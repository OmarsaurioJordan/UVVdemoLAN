<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_especial</parentName>
  <maskName>d_base_e</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
imge = 19;
idweb = s_idweb_loco(x, y);
fecha = 0;
reloj_sinc = -1;

var tll = 40;
imagen = ds_grid_create(tll, tll);
ds_grid_clear(imagen, c_black);
angulo = 30;

var aux;
var cc = o_control.nivel_celda;
var maxx = 0;
var maxy = 0;
var minx = room_width;
var miny = room_height;
for (var w = 0; w &lt; tll; w++) {
    for (var h = 0; h &lt; tll; h++) {
        aux = instance_create(x - ((tll / 2) * cc) + w * cc,
                y + 24 + h * cc, o_pniv);
        aux.origen = id;
        aux.mx = w;
        aux.my = h;
        maxx = max(maxx, aux.x);
        maxy = max(maxy, aux.y);
        minx = min(minx, aux.x);
        miny = min(miny, aux.y);
    }
}
cenx = mean(maxx, minx);
ceny = mean(maxy, miny);

alarm[0] = 1;
alarm[1] = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// angulo

var yop = id;
var vvv, ddd;
with o_pniv {
    if origen == yop {
        vvv = point_distance(yop.cenx, yop.ceny, xstart, ystart);
        ddd = point_direction(yop.cenx, yop.ceny, xstart, ystart);
        ddd += yop.angulo;
        x = yop.cenx + lengthdir_x(vvv, ddd);
        y = yop.ceny + lengthdir_y(vvv, ddd);
        depth = -y;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s_ini_md5_open("nivel" + string(idweb) + ".ini") {
    ini_open("nivel" + string(idweb) + ".ini");
    fecha = real(ini_read_string("config", "fecha", "0"));
    ds_grid_read(imagen, ini_read_string("dibujo", "imagen", ""));
    angulo = real(ini_read_string("dibujo", "angulo", "0"));
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sincronia

if !m_editor {
    if s_ciclo_actualizador(id) {
        var ww = ds_grid_width(imagen);
        var hh = ds_grid_height(imagen);
        var buf = s_header(24, 8 + ww * hh);
        buffer_write(buf, buffer_u16, idweb);
        buffer_write(buf, buffer_u32, fecha);
        buffer_write(buf, buffer_u16, angulo);
        for (var w = 0; w &lt; ww; w++) {
            for (var h = 0; h &lt; hh; h++) {
                buffer_write(buf, buffer_u8, ds_grid_get(imagen, w, h));
            }
        }
        s_udp_send(buf, "");
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("nivel" + string(idweb) + ".ini");
ini_write_string("config", "idweb", string(idweb)); // inutil
ini_write_string("config", "fecha", string(fecha));
ini_write_string("dibujo", "imagen", ds_grid_write(imagen));
ini_write_string("dibujo", "angulo", string(angulo));
ini_close();
s_ini_md5_close("nivel" + string(idweb) + ".ini");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_core, imge, x, y);

var ww = ds_grid_width(imagen);
var hh = ds_grid_height(imagen);
var ccc;
for (var w = 0; w &lt; ww; w++) {
    for (var h = 0; h &lt; hh; h++) {
        ccc = ds_grid_get(imagen, w, h);
        draw_sprite_ext(d_piezas, 0,
            x + lerp(-37, 37, w / ww) + 2,
            y + lerp(-84, -22, h / hh) + 2,
            1, 1, 0, make_colour_rgb(ccc, ccc, ccc), 1);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

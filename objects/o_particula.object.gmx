<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_visible</parentName>
  <maskName>d_base_r</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = random(360);
direction = random(360);
reloj_fin_max = 1;
reloj_fin = reloj_fin_max;
z = 64;
calor = 0.5;
activo = true;
velocity = 0;
s_anima_ini(id, 1, false, false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if activo {
    var acc = instance_nearest(x, y, o_acelerador);
    // vida e imagen
    image_angle += 70 * dlt;
    s_anima_osc(id, 0, max(2 - velocity / (acc.veloci_ini * 3), 0.2), 8);
    reloj_fin -= dlt;
    if reloj_fin &lt;= 0 {
        activo = false;
        exit;
    }
    // movimiento fragmentado
    var discc = point_distance(acc.x, acc.y, x, y);
    velocity *= acc.friccion;
    var vel = velocity * dlt; // recorrido
    var num = max(1, ceil(vel / 4)); // segun sprite coli
    var dltt = dlt / num;
    var centry;
    var yop = id;
    var otr, ac, ad, cc, pd;
    for (var i = 0; i &lt; num; i++) {
        // calor por baculo
        otr = instance_place(x, y, o_usuario);
        if otr != noone {
            if otr.objeto != 160 and otr.objeto != 161 {
                otr = noone;
            }
        }
        if otr != noone {
            cc = acc.transmision;
            if otr.objeto == 160 { // azul
                calor = max(0, calor - cc);
            }
            else { // rojo
                calor = min(1, calor + cc);
            }
        }
        // colision particulas y transmision calor
        otr = instance_place(x, y, o_particula);
        if otr != noone {
            velocity = max(velocity, acc.repulsion * dlt);
            ac = point_direction(otr.x, otr.y, x, y);
            ad = angle_difference(direction, ac);
            direction -= ad * dltt;
            cc = random((calor - otr.calor) / 2);
            if cc != 0 {
                calor = clamp(calor - cc, 0, 1);
                otr.calor = clamp(otr.calor + cc, 0, 1);
            }
        }
        // centrifugo
        centry = acc.centrifugo * acc.girar;
        if centry != 0 {
            velocity = max(velocity, centry * dlt);
            ac = point_direction(acc.x, acc.y, x, y) - 90;
            ad = angle_difference(direction, ac);
            direction -= min(abs(ad), centry * dltt) * sign(ad);
        }
        // colision solidos
        otr = instance_place(x, y, o_bloque);
        if otr != noone {
            velocity = max(velocity, acc.repulsion * dlt);
            ac = point_direction(otr.x, otr.y, x, y);
            ad = angle_difference(direction, ac) / 2;
            direction -= ad;
        }
        // atraccion repulsion
        centry = acc.atract;
        with o_usuario {
            if objeto == 158 { // blanco
                cc = 1;
            }
            else if objeto == 159 { // negro
                cc = -1;
            }
            else {
                continue;
            }
            pd = point_distance(x, y, yop.x, yop.y);
            if pd &lt; acc.radio * 1.5 {
                ac = point_direction(x, y, yop.x, yop.y);
                ad = angle_difference(yop.direction, ac);
                pd = lerp(1, 0.5, pd / acc.radio);
                yop.direction -= min(abs(ad), centry * dltt * pd) * sign(ad) * cc;
                yop.velocity = max(yop.velocity, centry * dlt * pd);
            }
        }
        // mover un paso
        var vv = velocity * dltt;
        x += lengthdir_x(vv, direction);
        y += lengthdir_y(vv, direction);
    }
    // limites finales
    if discc &gt; acc.radio {
        reloj_fin -= dlt * acc.decaimiento;
    }
    depth = -y;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if activo {
    var a = reloj_fin / reloj_fin_max;
    var c = merge_colour(merge_colour(c_blue, c_red, calor), c_white, 0.2);
    draw_sprite_ext(d_piezas, 19, x, y - (z + anima[0]), 1, 1, image_angle, c, a);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_game</parentName>
  <maskName>d_base_e</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
imge = 11;
idweb = s_idweb_loco(x, y);
fecha = 0;
reloj_sinc = -1;

secuencia = ""; // se van acumulando 0.1.2.3.4.5.6...x... (.:vac√≠o, x:todo)
intento = ""; // lo que han undido los usuarios, acumulable

ultima = 0; // ultima secuencia mostrada localmente, length secuencia
repeticion = 0; // ultimo intento mostrado localmente, length intento
reloj_secu = 0; // intervalo entre tramos de la secuencia
nota_anterior = "";

s_secuencia_restart(id, false);

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s_ini_md5_open("secuencia" + string(idweb) + ".ini") {
    ini_open("secuencia" + string(idweb) + ".ini");
    fecha = real(ini_read_string("config", "fecha", "0"));
    secuencia = ini_read_string("juego", "secuencia", "");
    intento = ini_read_string("juego", "intento", "");
    ultima = real(ini_read_string("juego", "ultima", "0"));
    repeticion = real(ini_read_string("juego", "repeticion", "0"));
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sincronia

if !m_editor {
    if s_ciclo_actualizador(id) {
        var buf = s_header(36, 6 + string_length(secuencia + intento));
        buffer_write(buf, buffer_u16, idweb);
        buffer_write(buf, buffer_u32, fecha);
        buffer_write(buf, buffer_string, secuencia);
        buffer_write(buf, buffer_string, intento);
        s_udp_send(buf, "");
    }
    
    // reproducir secuencia
    if visible {
        if ultima &lt;= string_length(secuencia) {
            reloj_secu -= dlt;
            if reloj_secu &lt;= 0 {
                reloj_secu = o_control.secuencia_velocidad;
                ultima++;
            }
        }
        else if repeticion &lt;= string_length(intento) {
            reloj_secu -= dlt;
            if reloj_secu &lt;= 0 {
                reloj_secu = o_control.secuencia_velocidad;
                repeticion++;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("secuencia" + string(idweb) + ".ini");
ini_write_string("config", "idweb", string(idweb)); // inutil
ini_write_string("config", "fecha", string(fecha));
ini_write_string("juego", "secuencia", secuencia);
ini_write_string("juego", "intento", intento);
ini_write_string("juego", "ultima", string(ultima));
ini_write_string("juego", "repeticion", string(repeticion));
ini_close();
s_ini_md5_close("secuencia" + string(idweb) + ".ini");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_game, imge, x, y);

if repeticion &gt;= string_length(intento) {
    draw_sprite_ext(d_piezas, 16, x, y - 49, 1, 1, 0, c_aqua, 1);
}

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text_transformed_colour(x, y - 49,
    string(string_count("x", secuencia)),
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);

var e = 0.7;
draw_text_transformed_colour(x - 22, y - 20, "Z",
    e, e, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x - 35, y - 48, "X",
    e, e, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x - 24, y - 74, "C",
    e, e, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x + 2, y - 80, "V",
    e, e, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x + 27, y - 74, "B",
    e, e, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x + 36, y - 49, "N",
    e, e, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x + 25, y - 24, "M",
    e, e, 0, c_black, c_black, c_black, c_black, 1);

var ant = "";
var ccc;
if ultima &lt; string_length(secuencia) {
    ccc = c_red;
    ant = string_char_at(secuencia, ultima + 1);
    switch ant {
        case "0": draw_sprite_ext(d_piezas, 16, x - 22, y - 20, 1, 1, 0, ccc, 1); break;
        case "1": draw_sprite_ext(d_piezas, 16, x - 35, y - 48, 1, 1, 0, ccc, 1); break;
        case "2": draw_sprite_ext(d_piezas, 16, x - 24, y - 74, 1, 1, 0, ccc, 1); break;
        case "3": draw_sprite_ext(d_piezas, 16, x + 2, y - 80, 1, 1, 0, ccc, 1); break;
        case "4": draw_sprite_ext(d_piezas, 16, x + 27, y - 74, 1, 1, 0, ccc, 1); break;
        case "5": draw_sprite_ext(d_piezas, 16, x + 36, y - 49, 1, 1, 0, ccc, 1); break;
        case "6": draw_sprite_ext(d_piezas, 16, x + 25, y - 24, 1, 1, 0, ccc, 1); break;
        case "x":
            draw_sprite_ext(d_piezas, 16, x - 22, y - 20, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x - 35, y - 48, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x - 24, y - 74, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x + 2, y - 80, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x + 27, y - 74, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x + 36, y - 49, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x + 25, y - 24, 1, 1, 0, ccc, 1);
            break;
    }
}
else if repeticion &lt; string_length(intento) {
    ccc = c_blue;
    ant = string_char_at(intento, repeticion + 1);
    switch ant {
        case "0": draw_sprite_ext(d_piezas, 16, x - 22, y - 20, 1, 1, 0, ccc, 1); break;
        case "1": draw_sprite_ext(d_piezas, 16, x - 35, y - 48, 1, 1, 0, ccc, 1); break;
        case "2": draw_sprite_ext(d_piezas, 16, x - 24, y - 74, 1, 1, 0, ccc, 1); break;
        case "3": draw_sprite_ext(d_piezas, 16, x + 2, y - 80, 1, 1, 0, ccc, 1); break;
        case "4": draw_sprite_ext(d_piezas, 16, x + 27, y - 74, 1, 1, 0, ccc, 1); break;
        case "5": draw_sprite_ext(d_piezas, 16, x + 36, y - 49, 1, 1, 0, ccc, 1); break;
        case "6": draw_sprite_ext(d_piezas, 16, x + 25, y - 24, 1, 1, 0, ccc, 1); break;
        case "x":
            draw_sprite_ext(d_piezas, 16, x - 22, y - 20, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x - 35, y - 48, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x - 24, y - 74, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x + 2, y - 80, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x + 27, y - 74, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x + 36, y - 49, 1, 1, 0, ccc, 1);
            draw_sprite_ext(d_piezas, 16, x + 25, y - 24, 1, 1, 0, ccc, 1);
            break;
    }
}
if ant != nota_anterior {
    var nn = noone;
    switch ant {
        case "0": nn = a_tono_do; break;
        case "1": nn = a_tono_re; break;
        case "2": nn = a_tono_mi; break;
        case "3": nn = a_tono_fa; break;
        case "4": nn = a_tono_sol; break;
        case "5": nn = a_tono_la; break;
        case "6": nn = a_tono_si; break;
    }
    if nn != noone {
        s_buzzer_nota(x, y, nn, false);
    }
}
nota_anterior = ant;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

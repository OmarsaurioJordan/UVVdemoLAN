<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_visible</parentName>
  <maskName>d_base_u</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>madre = noone; // quien lo creo
for (var g = 0; g &lt; 6; g++) { // genes normalizados
    // 0: radio vision
    // 1: velocidad andar
    // 2: capacidad energia
    // 3: empatia familiar
    // 4: agresividad no familiar
    // 5: temporizador dormir
    gen[g] = random(1);
}
s_fenotipo(id);
energia = fenotipo[2] / 2;
direction = random(360);
mx = x;
my = y;
objetivo = noone;
dormir = random(o_control.bicho_dormir); // segundos quietud
activo = true;
social = noone;
blanco = noone;
levantado = true;

// estadisticas
generacion = 1; // eslabon en cadena familiar
edad = 0; // segundos vida
hijos = 0; // reproducciones exitosas

s_anima_ini(id, 2, false, false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var aux = instance_create(x, y, o_bichoseco);
for (var g = 0; g &lt; 6; g++) {
    aux.gen[g] = gen[g];
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !m_editor and o_evolutivo.activo {
    s_anima_osc(id, 0, 1.4, 6);
    s_anima_osc(id, 1, lerp(1, 0.1, gen[0]), 9);
    
    // reloj de dormir y ver si activo
    activo = true;
    dormir += dlt;
    if dormir &gt;= o_control.bicho_dormir {
        dormir = 0;
    }
    if dormir &gt; fenotipo[5] {
        activo = false;
        mx = x;
        my = y;
    }
    
    // buscar alimento en rango de vision
    objetivo = noone;
    if instance_exists(o_alimento) {
        objetivo = instance_nearest(x, y, o_alimento);
        if point_distance(x, y, objetivo.x, objetivo.y) &gt; fenotipo[0] {
            objetivo = noone;
        }
        else if levantado or random(1) &lt; lerp(0.01, 0.1, gen[5]) {
            levantado = true;
            activo = true;
        }
        else {
             objetivo = noone;
        }
    }
    if !activo {
       levantado = false;
    }
    
    // buscar lugar al azar
    if objetivo == noone and activo and point_distance(x, y, mx, my) &lt; 24 {
        var neabos;
        var fren = 0;
        do {
            mx = x + random_range(-view_wview[0], view_wview[0]);
            my = y + random_range(-view_hview[0], view_hview[0]);
            neabos = instance_nearest(mx, my, o_pnt_lago2);
            fren++;
        }
        until (point_distance(mx, my, neabos.x, neabos.y) &lt; o_control.radio_zona and
            !place_meeting(mx, my, o_bloque)) or fren &gt;= 100;
    }
    
    // moverse hacia alimento o lugar
    if objetivo != noone {
        direction = point_direction(x, y, objetivo.x, objetivo.y);
        var vvv = fenotipo[1] * dlt;
        x += lengthdir_x(vvv, direction);
        y += lengthdir_y(vvv, direction);
    }
    else if activo {
        direction = point_direction(x, y, mx, my);
        var vvv = fenotipo[1] * dlt;
        x += lengthdir_x(vvv, direction);
        y += lengthdir_y(vvv, direction);
    }
    
    // detectar colisiones y resolver
    var otr = instance_place(x, y, o_bloque);
    if otr == noone {
        otr = instance_place(x, y, o_movil);
    }
    if otr != noone {
        direction = point_direction(otr.x, otr.y, x, y);
        var vvv = max(fenotipo[1], o_control.velocidad) * dlt * 1.25;
        x += lengthdir_x(vvv, direction);
        y += lengthdir_y(vvv, direction);
    }
    else {
        otr = instance_place(x, y, o_bicho);
        if otr != noone {
            direction = point_direction(otr.x, otr.y, x, y);
            var vvv = fenotipo[1] * dlt * 0.5;
            x += lengthdir_x(vvv, direction);
            y += lengthdir_y(vvv, direction);
            otr.x += lengthdir_x(vvv, -direction);
            otr.y += lengthdir_y(vvv, -direction);
        }
    }
    
    // prevenir salirse del mundo
    x = clamp(x, 0, room_width);
    y = clamp(y, 0, room_height);
    depth = -y;
    
    // consumir energia
    energia -= (fenotipo[0] / o_control.bicho_vision) * o_control.bicho_cp * (1 + gen[4] * 2);
    if activo {
        var vvv = point_distance(x, y, xprevious, yprevious) / dlt;
        energia -= vvv * o_control.bicho_ca;
    }
    
    // interaccion con otros
    if activo and objetivo == noone {
        var lej = false;
        blanco = collision_circle(x, y, 32, o_bicho, true, true);
        if blanco == noone {
            blanco = collision_circle(x, y, 64, o_bicho, true, true);
            lej = true;
        }
        if blanco != noone {
            var comport = random(gen[4]) &gt; random(gen[3]);
            var fami = (blanco.madre == madre and madre != noone) or madre == blanco or id == blanco.madre;
            // actividad social
            if fami and !comport {
                if blanco.energia &lt; blanco.fenotipo[2] * fenotipo[3] and energia &gt; fenotipo[2] * 0.69 {
                    s_audio(x, y, a_evo_empatia, false);
                    var lime = min(o_control.bicho_alimento, energia * 0.5,
                        blanco.fenotipo[2] - blanco.energia);
                    energia -= lime;
                    blanco.energia += lime;
                }
            }
            // actividad agresiva
            else if !fami and comport and !lej {
                var propbla = blanco.energia / blanco.fenotipo[2] &lt; energia / fenotipo[2];
                if propbla and blanco.energia &lt; blanco.fenotipo[2] * fenotipo[4] {
                    s_audio(x, y, a_evo_golpe, false);
                    if random(gen[4]) &gt; random(blanco.gen[4]) {
                        var lime = min(o_control.bicho_alimento,
                            fenotipo[2] - energia, blanco.energia);
                        energia += lime;
                        blanco.energia -= lime;
                    }
                    else {
                        energia -= min(o_control.bicho_alimento, energia);
                    }
                }
            }
        }
    }
    
    // comer cosas cercanas
    var comida = collision_circle(x, y, 10, o_alimento, true, false);
    if comida != noone {
        if fenotipo[2] - energia &gt;= comida.energia {
            energia += comida.energia;
            with comida {
                instance_destroy();
            }
        }
        else {
            comida.energia -= fenotipo[2] - energia;
            energia = fenotipo[2];
        }
    }
    
    // ver si reproducrise
    if energia &gt; fenotipo[2] * 0.95 {
        s_audio(x, y, a_evo_reproduccion, false);
        hijos++;
        energia /= 2;
        var aux = instance_create(x + random_range(-1, 1),
            y + random_range(-1, 1), o_bicho);
        aux.madre = id;
        s_mutacion(id, aux);
        aux.generacion = generacion + 1;
        aux.energia = min(energia, aux.fenotipo[2]);
    }
    
    // morir si no tiene energia
    edad += dlt;
    if energia &lt;= 0 {
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ccc = merge_colour(merge_colour(c_lime, c_orange, gen[5]), c_white, 0.5);
var alt = 58 + anima[0];
// alas
if !activo {
    alt = 24;
    draw_sprite_ext(d_bicho, 17 + clamp(round(4 * gen[1] - 0.5), 0, 3),
        x, y - alt, 1, 1, -18, ccc, 1);
    draw_sprite_ext(d_bicho, 17 + clamp(round(4 * gen[1] - 0.5), 0, 3),
        x, y - alt, -1, 1, 18, ccc, 1);
}
else {
    draw_sprite_ext(d_bicho, 17 + clamp(round(4 * gen[1] - 0.5), 0, 3),
        x, y - alt, 1, 1, anima[1], ccc, 1);
    draw_sprite_ext(d_bicho, 17 + clamp(round(4 * gen[1] - 0.5), 0, 3),
        x, y - alt, -1, 1, -anima[1], ccc, 1);
}
// cuerpo
draw_sprite_ext(d_bicho, 1 + clamp(round(4 * gen[2] - 0.5), 0, 3),
    x, y - alt, 1, 1, 0, ccc, 1);
// orejas
draw_sprite_ext(d_bicho, 5 + clamp(round(4 * gen[3] - 0.5), 0, 3),
    x, y - alt, 1, 1, 0, ccc, 1);
// cabeza
draw_sprite_ext(d_bicho, 0, x, y - alt, 1, 1, 0, ccc, 1);
// pinzas
draw_sprite_ext(d_bicho, 9 + clamp(round(4 * gen[4] - 0.5), 0, 3),
    x, y - alt, 1, 1, 0, ccc, 1);
// ojos
draw_sprite_ext(d_bicho, 13 + clamp(round(4 * gen[0] - 0.5), 0, 3),
    x, y - alt, 1, 1, 0, ccc, 1);

//draw_healthbar(x - 20, y - 86, x + 20, y - 80, (energia / fenotipo[2]) * 100,
//    c_gray, c_red, c_lime, 0, true, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_game</parentName>
  <maskName>d_base_m</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
imge = 0;
idweb = s_idweb_loco(x, y);
fecha = 0;
reloj_sinc = -1;

// constantes
radio = 100; // alcance particulas
transmision = 0.5; // cambio de calor con baculo
centrifugo = 75; // aceleracion angular basica para girar particulas centrifugamente
decaimiento = 3; // multiplo de disminucion de tiempo particulas en borde de radio
friccion = 0.999; // disminucion velocidad particulas
veloci_ini = 75; // velocidad inicial base de particulas
vida_particula = 6; // segundos de existencia, al azar el doble
reloj_parti_max = 0.05; // tiempo base para creacion de particulas
repulsion = 100; // velocidad colision con otras particulas
atract = 200; // velocidad de atraccion o repulsion

// variables
activo = false; // crear particulas
calor_ini = 2; // calor inicial 0:frio, 1:caliente, 2:medio, 3:azar
cadencia = 1; // cantidad de creacion de particulas 0,1,2,3:crear
girar = 2; // potencia centrifugo 0:nada, 1,2,3:acelerado
direccional = 360; // arco aleatorio para direccion inicial de particulas 0,45,90,180,360
disparado = 1; // potencia de veloci_ini, 0:nada, 1,2,3:velocidad

// funcionamiento
reloj_parti = 0;
sonido = noone;

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s_ini_md5_open("acelerador" + string(idweb) + ".ini") {
    ini_open("acelerador" + string(idweb) + ".ini");
    fecha = real(ini_read_string("config", "fecha", "0"));
    activo = ini_read_string("simulador", "activo", "1") != "0";
    calor_ini = real(ini_read_string("simulador", "calor_ini", "0"));
    cadencia = real(ini_read_string("simulador", "cadencia", "0"));
    girar = real(ini_read_string("simulador", "girar", "0"));
    direccional = real(ini_read_string("simulador", "direccional", "0"));
    disparado = real(ini_read_string("simulador", "disparado", "0"));
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sincronia

if !m_editor {
    if s_ciclo_actualizador(id) {
        var buf = s_header(40, 13);
        buffer_write(buf, buffer_u16, idweb);
        buffer_write(buf, buffer_u32, fecha);
        if activo {
            buffer_write(buf, buffer_u8, 1);
        }
        else {
            buffer_write(buf, buffer_u8, 0);
        }
        buffer_write(buf, buffer_u8, calor_ini);
        buffer_write(buf, buffer_u8, cadencia);
        buffer_write(buf, buffer_u8, girar);
        buffer_write(buf, buffer_u16, direccional);
        buffer_write(buf, buffer_u8, disparado);
        s_udp_send(buf, "");
    }
    
    if visible and activo {
        reloj_parti -= dlt;
        if reloj_parti &lt;= 0 {
            reloj_parti = reloj_parti_max * (cadencia + 1);
            var cc, dd;
            repeat 1 + irandom(3) {
                dd = random(direccional);
                switch calor_ini {
                    case 0: cc = 0; break;
                    case 1: cc = 1; break;
                    case 2: cc = 0.5; break;
                    case 3: cc = choose(0, 0.5, 1); break;
                }
                s_crea_particula(x + lengthdir_x(16, dd),
                    y + lengthdir_y(16, dd), cc, dd,
                    veloci_ini * disparado, vida_particula);
            }
            // sonido
            if sonido != noone {
                if !audio_is_playing(sonido) {
                    sonido = noone;
                }
            }
            if sonido == noone {
                sonido = audio_play_sound_at(a_acelerador, x, y, 64, 48,
                    view_wview[0] * 0.5, 1, false, 18);
                audio_sound_gain(sonido, 0.5, 0);
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("acelerador" + string(idweb) + ".ini");
ini_write_string("config", "idweb", string(idweb)); // inutil
ini_write_string("config", "fecha", string(fecha));
if activo {
    ini_write_string("simulador", "activo", "1");
}
else {
    ini_write_string("simulador", "activo", "0");
}
ini_write_string("simulador", "calor_ini", string(calor_ini));
ini_write_string("simulador", "cadencia", string(cadencia));
ini_write_string("simulador", "girar", string(girar));
ini_write_string("simulador", "direccional", string(direccional));
ini_write_string("simulador", "disparado", string(disparado));
ini_close();
s_ini_md5_close("acelerador" + string(idweb) + ".ini");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_game, imge, x, y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

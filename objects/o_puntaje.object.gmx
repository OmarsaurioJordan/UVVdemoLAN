<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_game</parentName>
  <maskName>d_base_e</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
imge = 1;
idweb = s_idweb_loco(x, y);
fecha = 0;
reloj_delta = 0; // para complementar fecha
reloj_sinc = 1;

puntos[0] = 0;
puntos[1] = 0;
reloj_juego = 0; // 0:desactivado, duracion de partido
reloj_balon = 0; // 0:desactivado, para aparecer el balon
enjuego = false; // true si esta en partido

// constantes
friccion = 0.99; // para detener balon
patada = 200; // velocidad de balon pateado
bisco = 45; // descache al azar al dirigir balon
puntos_futbol = 5; // maximos goles para ganar
reloj_juego_max = 90; // segundos de partido total

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s_ini_md5_open("puntaje" + string(idweb) + ".ini") {
    ini_open("puntaje" + string(idweb) + ".ini");
    fecha = real(ini_read_string("config", "fecha", "0"));
    puntos[0] = real(ini_read_string("juego", "p0", "0"));
    puntos[1] = real(ini_read_string("juego", "p1", "0"));
    reloj_juego = real(ini_read_string("juego", "reloj_juego", "0"));
    reloj_balon = real(ini_read_string("juego", "reloj_balon", "0"));
    enjuego = ini_read_string("juego", "enjuego", "0") != "0";
    var xx = real(ini_read_string("juego", "x", "0"));
    var yy = real(ini_read_string("juego", "y", "0"));
    if xx != 0 and yy != 0 {
        var aux = instance_create(xx, yy, o_balon);
        aux.origen = id;
    }
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sincronia

if !m_editor {
    reloj_delta += dlt;
    if s_ciclo_actualizador(id) {
        if s_permiso_pro() {
            if enjuego {
                reloj_sinc = 0.3;
            }
        }
        var buf = s_header(41, 29);
        buffer_write(buf, buffer_u16, idweb);
        buffer_write(buf, buffer_u32, fecha);
        buffer_write(buf, buffer_f32, reloj_delta);
        buffer_write(buf, buffer_u8, puntos[0]);
        buffer_write(buf, buffer_u8, puntos[1]);
        buffer_write(buf, buffer_f32, reloj_juego);
        buffer_write(buf, buffer_f32, reloj_balon);
        if enjuego {
            buffer_write(buf, buffer_u8, 1);
        }
        else {
            buffer_write(buf, buffer_u8, 0);
        }
        var yop = id;
        var bll = noone;
        with o_balon {
            if origen == yop {
                bll = id;
                break;
            }
        }
        if bll != noone {
            buffer_write(buf, buffer_u16, bll.posx);
            buffer_write(buf, buffer_u16, bll.posy);
            buffer_write(buf, buffer_u16, bll.direcc);
            buffer_write(buf, buffer_u16, bll.velocity);
        }
        else {
            buffer_write(buf, buffer_u16, 0);
            buffer_write(buf, buffer_u16, 0);
            buffer_write(buf, buffer_u16, 0);
            buffer_write(buf, buffer_u16, 0);
        }
        s_udp_send(buf, "");
        fecha = s_current_time();
        reloj_delta = 0;
    }
    
    // administrar juego
    if s_permiso_pro() {
        if enjuego {
            reloj_sinc = min(reloj_sinc, 1);
            // finalizar juego
            if reloj_juego != 0 {
                reloj_juego -= dlt;
                if reloj_juego &lt;= 0 {
                    reloj_juego = 0;
                    var yop = id;
                    with o_balon {
                        if origen == yop {
                            instance_destroy();
                            break;
                        }
                    }
                    reloj_balon = 0;
                    enjuego = false;
                }
            }
            // crear balon
            if reloj_balon != 0 {
                reloj_balon -= dlt;
                if reloj_balon &lt;= 0 {
                    reloj_balon = 0;
                    var yop = id;
                    var bll = noone;
                    with o_balon {
                        if origen == yop {
                            bll = id;
                            break;
                        }
                    }
                    if bll == noone {
                        var ank = instance_nearest(x, y + 100, o_pnt_futbol);
                        bll = instance_create(ank.x, ank.y, o_balon);
                        bll.origen = id;
                    }
                }
            }
        }
        // eliminar balon sin juego
        else if random(1) &lt; 0.03 {
            var yop = id;
            with o_balon {
                if origen == yop {
                    instance_destroy();
                    break;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("puntaje" + string(idweb) + ".ini");
ini_write_string("config", "idweb", string(idweb)); // inutil
ini_write_string("config", "fecha", string(fecha));
ini_write_string("juego", "p0", string(puntos[0]));
ini_write_string("juego", "p1", string(puntos[1]));
ini_write_string("juego", "reloj_juego", string(reloj_juego));
ini_write_string("juego", "reloj_balon", string(reloj_balon));
if enjuego {
    ini_write_string("juego", "enjuego", "1");
}
else {
    ini_write_string("juego", "enjuego", "0");
}
var bll = noone;
var yop = id;
with o_balon {
    if origen == yop {
        bll = id;
        break;
    }
}
if bll != noone {
    ini_write_string("juego", "x", string(bll.posx));
    ini_write_string("juego", "y", string(bll.posy));
}
else {
    ini_write_string("juego", "x", "0");
    ini_write_string("juego", "y", "0");
}
ini_close();
s_ini_md5_close("puntaje" + string(idweb) + ".ini");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_game, imge, x, y);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text_transformed_colour(x - 25, y - 68, string(puntos[0]),
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x + 22, y - 68, string(puntos[1]),
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);

draw_sprite_ext(d_piezas, 14, x, y - 30, 1, 1,
    360 * (reloj_juego / reloj_juego_max) + 90, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

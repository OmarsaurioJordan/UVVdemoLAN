<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_movil</parentName>
  <maskName>d_base_u</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// se cargan las variables creando este objeto con s_open_usuario

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_anima_osc(id, 0, 1.1, 2); // cuerpo
s_anima_osc(id, 1, 0.81, 1); // cabeza
s_anima_osc(id, 2, 0.69, 2); // objeto
s_anima_osc(id, 3, 0.555, 2); // expresion

if !m_editor { if propietario { // comandos movimiento
    
    // poner el puntero para envio udp
    puntero_x = mouse_x;
    puntero_y = mouse_y;
    
    // relojes propietario
    reloj_vercorreo = max(0, reloj_vercorreo - dlt);
    
    // revisar distancia a la pantalla
    if pantalla != noone {
        if point_distance(x, y, pantalla.x, pantalla.y) &gt; view_hview[0] * 0.4 {
            pantalla = noone;
        }
    }
    
    // escribir en el chat
    if modo_chat {
        if keyboard_check_pressed(vk_escape) {
            modo_chat = false;
        }
        else if keyboard_check_pressed(vk_enter) {
            modo_chat = false;
            var res = string_replace(keyboard_string, "#", "");
            while string_height_ext(res, 13, 90) * 0.6 &gt; 50 or
                    string_width_ext(res, 13, 90) * 0.6 &gt; 64 {
                res = string_copy(res, 1, string_length(res) - 1);
            }
            dialogo = res;
            reloj_dialogo = o_control.dialogo + o_control.dialogo_w * string_length(dialogo);
        }
    }
    else { // resto del codigo modo no_chat
    
    // abortar juego
    if keyboard_check_released(vk_escape) {
        if pantalla != noone {
            pantalla = noone;
        }
        else if ver_mapa != noone {
            sprite_delete(ver_mapa);
            ver_mapa = noone;
        }
        else if papelote != "" {
            papelote = "";
        }
        else if o_control.reloj_exit == 0 {
            o_control.reloj_exit = 1;
        }
        else {
            game_end();
            exit;
        }
    }
    
    // tomar pantallazo
    if keyboard_check_pressed(vk_f10) {
        var fff = get_save_filename("IMAGEN|*.png", "img");
        if fff != "" {
            screen_save(fff);
        }
    }
    
    // seleccionar usuario de la lista de contactos
    en_mira = noone;
    var xx = view_xview[0] + view_wview[0] - 96;
    var yy;
    for (var c = 0; c &lt; o_control.total_contactos; c++) {
        if amigo[c] != 0 {
            yy = view_yview[0] + 32 * c;
            if point_in_rectangle(mouse_x, mouse_y, xx, yy, xx + 96, yy + 32) {
                var yo = id;
                with o_usuario {
                    if id != yo and idweb == yo.amigo[c] {
                        yo.en_mira = id;
                        break;
                    }
                }
                break;
            }
        }
    }
    
    // interactuar con especial mas cercano
    comandos_gui = "";
    cerca_esp = instance_nearest(x, y, o_especial);
    if point_distance(x, y, cerca_esp.x, cerca_esp.y) &gt; o_control.cerca_especial {
        cerca_esp = noone;
    }
    if cerca_esp == noone {
        cerca_esp = instance_nearest(x, y, o_game);
        if point_distance(x, y, cerca_esp.x, cerca_esp.y) &gt; o_control.cerca_especial {
            cerca_esp = noone;
        }
    }
    if cerca_esp != noone {
        switch cerca_esp.object_index {
            
            case o_biblioteca:
                var tot = string(o_control.trozos_file * 64);
                comandos_gui = "BIBLIOTECA#Tomar (1,2,3,4,5,6,7,8,9)#Poner documento (... + Shift)" +
                    "#Eliminar documento (... + Ctrl)#...#max " + tot + " KB#formato PDF";
                var num = -1;
                if keyboard_check_pressed(ord('1')) { num = 0; }
                else if keyboard_check_pressed(ord('2')) { num = 1; }
                else if keyboard_check_pressed(ord('3')) { num = 2; }
                else if keyboard_check_pressed(ord('4')) { num = 3; }
                else if keyboard_check_pressed(ord('5')) { num = 4; }
                else if keyboard_check_pressed(ord('6')) { num = 5; }
                else if keyboard_check_pressed(ord('7')) { num = 6; }
                else if keyboard_check_pressed(ord('8')) { num = 7; }
                else if keyboard_check_pressed(ord('9')) { num = 8; }
                if num != -1 {
                    var aux = ds_list_find_value(cerca_esp.archivos, num);
                    if keyboard_check(vk_shift) {
                        var fff = get_open_filename("DOCUMENTO|*.pdf", "");
                        if fff != "" {
                            var namef = "f" + string(irandom(9)) + string(irandom(9)) + string(irandom(9)) +
                                "_" + filename_name(fff);
                            namef = string_replace(namef, ".pdf", "");
                            if s_troza_archivo(aux, fff, namef) {
                                cerca_esp.fechas[num] = s_current_time();
                                cerca_esp.fecha = s_minmax_vec(cerca_esp.fechas, true);
                                cerca_esp.reloj_sinc = 0;
                                cerca_esp.turno_sinc = 0;
                                cerca_esp.file_sinc = num;
                            }
                            else {
                                show_message_async("Advertencia: archivo muy grande (max " +
                                    tot + " KB)");
                            }
                        }
                    }
                    else if keyboard_check(vk_control) {
                        if !ds_list_empty(aux) {
                            ds_list_clear(aux);
                            cerca_esp.fechas[num] = s_current_time();
                            cerca_esp.fecha = s_minmax_vec(cerca_esp.fechas, true);
                            cerca_esp.reloj_sinc = 0;
                            cerca_esp.turno_sinc = 0;
                            cerca_esp.file_sinc = num;
                        }
                    }
                    else {
                        if !ds_list_empty(aux) {
                            var namef = ds_list_find_value(aux, 0);
                            namef = string_copy(namef, 6, string_length(namef) - 5);
                            var fff = get_save_filename("DOCUMENTO|*.pdf", namef);
                            if fff != "" {
                                if string_count(".pdf", fff) == 0 {
                                    fff += ".pdf";
                                }
                                s_rearma_archivo(aux, fff);
                            }
                        }
                    }
                }
                break;
            
            case o_lienzo:
                var ww = ds_grid_width(cerca_esp.imagen);
                var hh = ds_grid_height(cerca_esp.imagen);
                comandos_gui = "LIENZO#Importar imagen (1)#Limpiar imagen (0)#Ver full (Alt)#..." +
                    "#talla " + string(ww) + "," + string(hh) + " px#formatos PNG, JPG, BMP";
                if keyboard_check_pressed(ord('1')) {
                    var fff = get_open_filename("IMAGEN|*.png;*.jpg;*.bmp", "");
                    if fff != "" {
                        var spr = sprite_add(fff, 0, false, false, 0, 0);
                        var srf = surface_create(ww, hh);
                        surface_set_target(srf);
                        draw_clear_alpha(c_white, 0);
                        draw_sprite_ext(spr, 0, 0, 0,
                            (ww + 1) / sprite_get_width(spr),
                            (hh + 1) / sprite_get_height(spr),
                            0, c_white, 1);
                        surface_reset_target();
                        var pix;
                        for (var w = 0; w &lt; ww; w++) {
                            for (var h = 0; h &lt; hh; h++) {
                                pix = surface_getpixel_ext(srf, w, h);
                                ds_grid_set(cerca_esp.transp, w, h, ((pix &gt;&gt; 24) &amp; 255) / 255);
                                ds_grid_set(cerca_esp.imagen, w, h, make_colour_rgb(
                                    pix &amp; 255, (pix &gt;&gt; 8) &amp; 255, (pix &gt;&gt; 16) &amp; 255));
                            }
                        }
                        sprite_delete(spr);
                        surface_free(srf);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    var ww = ds_grid_width(cerca_esp.imagen);
                    var hh = ds_grid_height(cerca_esp.imagen);
                    if ds_grid_get_sum(cerca_esp.imagen, 0, 0, ww - 1, hh - 1) != 0 {
                        ds_grid_clear(cerca_esp.imagen, c_black);
                        ds_grid_clear(cerca_esp.transp, 0);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_presentacion:
                var ww = ds_grid_width(cerca_esp.imagen);
                var hh = ds_grid_height(cerca_esp.imagen);
                comandos_gui = "PRESENTACIÓN#Diapositiva (1-, 2+)#Importar diapos. (3)" +
                    "#Limpiar diapos. (0)#Ver full (Alt)#...#talla " + string(ww) + "," + string(hh) + " px" +
                    "#max diapos. " + string(o_control.num_diapositivas) +
                    "#formatos PNG, JPG, BMP#contenedor ZIP";
                if keyboard_check_pressed(ord('1')) {
                    if cerca_esp.aguja != 255 {
                        cerca_esp.aguja--;
                        if cerca_esp.aguja &lt; 0 {
                            cerca_esp.aguja = ds_list_size(cerca_esp.fotos) - 1;
                        }
                        s_presentacion_aguja(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if cerca_esp.aguja != 255 {
                        cerca_esp.aguja++;
                        if cerca_esp.aguja &gt;= ds_list_size(cerca_esp.fotos) {
                            cerca_esp.aguja = 0;
                        }
                        s_presentacion_aguja(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                else if keyboard_check_pressed(ord('3')) {
                    var fff = get_open_filename("CONTENEDOR|*.zip", "");
                    if fff != "" {
                        // desempaquetar contenedor zip
                        if directory_exists("zip") {
                            directory_destroy("zip");
                        }
                        if zip_unzip(fff, "zip/") &lt;= 0 {
                            break;
                        }
                        // buscar archivos extraidos
                        var img = ds_list_create();
                        fff = file_find_first("zip/*.png", 0);
                        while fff != "" {
                            ds_list_add(img, "zip/" + fff);
                            fff = file_find_next();
                        }
                        file_find_close();
                        fff = file_find_first("zip/*.jpg", 0);
                        while fff != "" {
                            ds_list_add(img, "zip/" + fff);
                            fff = file_find_next();
                        }
                        file_find_close();
                        fff = file_find_first("zip/*.bmp", 0);
                        while fff != "" {
                            ds_list_add(img, "zip/" + fff);
                            fff = file_find_next();
                        }
                        file_find_close();
                        if ds_list_empty(img) {
                            ds_list_destroy(img);
                            break;
                        }
                        // convertir a formato de matrix las imagenes
                        var spr, srf, pix, alp;
                        ds_list_clear(cerca_esp.fotos);
                        for (var i = 0; i &lt; min(o_control.num_diapositivas, ds_list_size(img)); i++) {
                            spr = sprite_add(ds_list_find_value(img, i), 0, false, false, 0, 0);
                            srf = surface_create(ww, hh);
                            surface_set_target(srf);
                            draw_clear_alpha(c_white, 0);
                            draw_sprite_ext(spr, 0, 0, 0,
                                (ww + 1) / sprite_get_width(spr),
                                (hh + 1) / sprite_get_height(spr),
                                0, c_white, 1);
                            surface_reset_target();
                            for (var w = 0; w &lt; ww; w++) {
                                for (var h = 0; h &lt; hh; h++) {
                                    pix = surface_getpixel_ext(srf, w, h);
                                    alp = (pix &gt;&gt; 24) &amp; 255;
                                    if alp == 0 {
                                        ds_grid_set(cerca_esp.imagen, w, h, 0);
                                    }
                                    else {
                                        pix = round(mean(pix &amp; 255, (pix &gt;&gt; 8) &amp; 255, (pix &gt;&gt; 16) &amp; 255));
                                        ds_grid_set(cerca_esp.imagen, w, h, max(1, pix));
                                    }
                                }
                            }
                            ds_list_add(cerca_esp.fotos, ds_grid_write(cerca_esp.imagen));
                            sprite_delete(spr);
                            surface_free(srf);
                        }
                        ds_list_destroy(img);
                        cerca_esp.aguja = 0;
                        s_presentacion_aguja(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if cerca_esp.aguja != 255 {
                        cerca_esp.aguja = 255;
                        ds_list_clear(cerca_esp.fotos);
                        s_presentacion_aguja(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_tablero:
                comandos_gui = "TABLERO#Dibujar (clic Iz)#Borrar (clic De)#Limpiar imagen (0)#Ver full (Alt)";
                var pnt = -1;
                if keyboard_check_pressed(ord('0')) {
                    var ww = ds_grid_width(cerca_esp.imagen);
                    var hh = ds_grid_height(cerca_esp.imagen);
                    if ds_grid_get_sum(cerca_esp.imagen, 0, 0, ww - 1, hh - 1) != 0 {
                        ds_grid_clear(cerca_esp.imagen, 0);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0.5;
                    }
                }
                else if mouse_check_button_released(mb_left) or mouse_check_button_released(mb_right) {
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 0.5;
                }
                else if mouse_check_button(mb_left) {
                    pnt = 1;
                }
                else if mouse_check_button(mb_right) {
                    pnt = 0;
                }
                if pnt != -1 {
                    var ww = ds_grid_width(cerca_esp.imagen);
                    var hh = ds_grid_height(cerca_esp.imagen);
                    var vx = lerp(0, ww, clamp(mous_viejx - view_xview[0],
                        0, view_wview[0]) / view_wview[0]);
                    var vy = lerp(0, hh, clamp(mous_viejy - view_yview[0],
                        0, view_hview[0]) / view_hview[0]);
                    var nx = lerp(0, ww, clamp(mouse_x - view_xview[0],
                        0, view_wview[0]) / view_wview[0]);
                    var ny = lerp(0, hh, clamp(mouse_y - view_yview[0],
                        0, view_hview[0]) / view_hview[0]);
                    var ddd = point_direction(vx, vy, nx, ny);
                    var vvv = point_distance(vx, vy, nx, ny);
                    var xx, yy;
                    if pnt == 0 {
                        for (var i = 0; i &lt;= vvv; i++) {
                            xx = clamp(round(vx + lengthdir_x(i, ddd)), 0, ww - 1);
                            yy = clamp(round(vy + lengthdir_y(i, ddd)), 0, hh - 1);
                            ds_grid_set_disk(cerca_esp.imagen, xx, yy, 1, 0);
                        }
                    }
                    else {
                        for (var i = 0; i &lt;= vvv; i += 0.5) {
                            xx = clamp(round(vx + lengthdir_x(i, ddd)), 0, ww - 1);
                            yy = clamp(round(vy + lengthdir_y(i, ddd)), 0, hh - 1);
                            ds_grid_set(cerca_esp.imagen, xx, yy, 1);
                        }
                    }
                }
                break;
            
            case o_pergamino:
                comandos_gui = "PERGAMINO#Ver gran texto (1)#Escribir texto (2)#Escribir gran texto(3)" +
                    "#Importar gran texto (4)#Borrar texto (9)#Borrar gran texto (0)#Abrir link (F5)";
                if keyboard_check_pressed(ord('1')) {
                    papelote = cerca_esp.textote;
                }
                else if keyboard_check_pressed(ord('2')) {
                    if dial_especial == -1 {
                        dial_especial = get_string_async("Escriba un texto", cerca_esp.texto);
                        tipo_especial = cerca_esp;
                        cerca_esp.redacta = 0;
                    }
                }
                else if keyboard_check_pressed(ord('3')) {
                    if dial_especial == -1 {
                        dial_especial = get_string_async("Escriba un texto, puede ser mayor a la " +
                            "capacidad del pergamino", cerca_esp.textote);
                        tipo_especial = cerca_esp;
                        cerca_esp.redacta = 1;
                    }
                }
                else if keyboard_check_pressed(ord('4')) {
                    var fff = get_open_filename("TEXTO|*.txt", "");
                    if fff != "" {
                        var tfi = file_text_open_read(fff);
                        var txt = "";
                        while !file_text_eof(tfi) {
                            txt += file_text_read_string(tfi);
                            if !file_text_eof(tfi) {
                                txt += "#";
                                file_text_readln(tfi);
                            }
                        }
                        file_text_close(tfi);
                        while string_height_ext(txt, 13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                string_width_ext(txt, 13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                            txt = string_copy(txt, 1, string_length(txt) - 1);
                        }
                        cerca_esp.textote = txt;
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    if cerca_esp.texto != "" {
                        cerca_esp.texto = "";
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if cerca_esp.textote != "" {
                        cerca_esp.textote = "";
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_parlante:
                var tot = string(o_control.trozos_file * 64);
                if cerca_esp.mute == 0 {
                    comandos_gui = "PARLANTE#Importar audio (1)#Silenciar audio (2)#Web compresor (9)" +
                        "#Limpiar audio (0)" +
                        "#...#max " + tot + " KB#mono, 8 Kbps, 8 KHz#formato OGG";
                }
                else {
                    comandos_gui = "PARLANTE#Importar audio (1)#Reproducir audio (2)#Web compresor (9)" +
                        "#Limpiar audio (0)" +
                        "#...#max " + tot + " KB#mono, 8 Kbps, 8 KHz#formato OGG";
                }
                if keyboard_check_pressed(ord('1')) {
                    var fff = get_open_filename("SONIDO|*.ogg", "");
                    if fff != "" {
                        if s_troza_archivo(cerca_esp.archivo, fff, string(irandom(65535))) {
                            s_limpia_parlante(cerca_esp, false);
                            cerca_esp.fecha = s_current_time();
                            cerca_esp.reloj_sinc = 0;
                            cerca_esp.turno_sinc = 0;
                            cerca_esp.mute = 0;
                            cerca_esp.reloj_sonar = 1;
                            cerca_esp.hubo_cambio = true;
                        }
                        else {
                            show_message_async("Advertencia: archivo muy grande (max " +
                                tot + " KB)");
                        }
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if reloj_vercorreo == 0 { // reutilizar esto para evitar cambios rapidos
                        if s_parlante_okey(cerca_esp) {
                            reloj_vercorreo = o_control.relojini_parlante;
                            if cerca_esp.mute == 0 {
                                cerca_esp.mute = 1;
                            }
                            else {
                                cerca_esp.mute = 0;
                            }
                            cerca_esp.reloj_sonar = 1;
                            cerca_esp.fecha = s_current_time();
                            var buf = s_header(17, 7);
                            buffer_write(buf, buffer_u16, cerca_esp.idweb);
                            buffer_write(buf, buffer_u32, cerca_esp.fecha);
                            buffer_write(buf, buffer_u8, cerca_esp.mute);
                            s_udp_send(buf, "");
                        }
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if s_limpia_parlante(cerca_esp, true) {
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                        cerca_esp.turno_sinc = 0;
                        cerca_esp.mute = 1;
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    execute_shell_simple("https://www.ps2pdf.com/audio-compressor");
                }
                break;
            
            case o_piano:
                if cerca_esp.mute == 0 {
                    comandos_gui = "PIANO#Escribir melodía (1)#Silenciar melodía (2)#Borrar melodía(0)" +
                        "#Tocar (Z,X,C,V,B,N,M)#...#notas 0:vacio 1:do 2:re ...#notas _:vacío Z:do X:re ..." +
                        "#ojo: primer digito 0-9 tempo";
                }
                else {
                    comandos_gui = "PIANO#Escribir melodía (1)#Reproducir melodía (2)#Borrar melodía(0)" +
                        "#Tocar (Z,X,C,V,B,N,M)#...#notas 0:vacio 1:do 2:re ...#notas _:vacío Z:do X:re ..." +
                        "#ojo: primer digito 0-9 tempo";
                }
                if keyboard_check_pressed(ord('1')) {
                    if dial_especial == -1 {
                        var txt = "";
                        for (var i = 0; i &lt; ds_list_size(cerca_esp.melodia); i++) {
                            txt += string(ds_list_find_value(cerca_esp.melodia, i));
                        }
                        var txu;
                        if random(1) &lt; 0.5 {
                            txu = "Digite notas 0:vacio 1:do 2:re 3:mi ... (ojo: primer digito es tempo)";
                        }
                        else {
                            txu = "Digite notas _:vacio Z:do X:re C:mi ... (ojo: primer digito es tempo)";
                        }
                        dial_especial = get_string_async(txu, txt);
                        tipo_especial = cerca_esp;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if cerca_esp.mute == 0 {
                        cerca_esp.mute = 1;
                    }
                    else {
                        cerca_esp.mute = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = o_control.relojini_parlante;
                }
                else if keyboard_check_pressed(ord('0')) {
                    if !ds_list_empty(cerca_esp.melodia) {
                        ds_list_clear(cerca_esp.melodia);
                        cerca_esp.aguja = 0;
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('Z')) {
                    s_piano_nota(cerca_esp, a_nota_med_do, true); }
                else if keyboard_check_pressed(ord('X')) {
                    s_piano_nota(cerca_esp, a_nota_med_re, true); }
                else if keyboard_check_pressed(ord('C')) {
                    s_piano_nota(cerca_esp, a_nota_med_mi, true); }
                else if keyboard_check_pressed(ord('V')) {
                    s_piano_nota(cerca_esp, a_nota_med_fa, true); }
                else if keyboard_check_pressed(ord('B')) {
                    s_piano_nota(cerca_esp, a_nota_med_sol, true); }
                else if keyboard_check_pressed(ord('N')) {
                    s_piano_nota(cerca_esp, a_nota_med_la, true); }
                else if keyboard_check_pressed(ord('M')) {
                    s_piano_nota(cerca_esp, a_nota_med_si, true); }
                break;
            
            case o_escritos:
                comandos_gui = "ESCRITOS#Leer texto (1,2,3,4,5,6,7,8,9,0)#Escribir texto (... + Shift)" +
                    "#Importar texto (... + Ctrl)#...#saltos linea: símbolo númeral#formato TXT";
                var num = -1;
                if keyboard_check_pressed(ord('1')) { num = 1; }
                else if keyboard_check_pressed(ord('2')) { num = 2; }
                else if keyboard_check_pressed(ord('3')) { num = 3; }
                else if keyboard_check_pressed(ord('4')) { num = 4; }
                else if keyboard_check_pressed(ord('5')) { num = 5; }
                else if keyboard_check_pressed(ord('6')) { num = 6; }
                else if keyboard_check_pressed(ord('7')) { num = 7; }
                else if keyboard_check_pressed(ord('8')) { num = 8; }
                else if keyboard_check_pressed(ord('9')) { num = 9; }
                else if keyboard_check_pressed(ord('0')) { num = 0; }
                if num != -1 {
                    if keyboard_check(vk_shift) {
                        if dial_especial == -1 {
                            var txt = ds_list_find_value(cerca_esp.textos, num);
                            dial_especial = get_string_async("Escriba un texto", txt);
                            tipo_especial = cerca_esp;
                            cerca_esp.aguja = num;
                        }
                    }
                    else if keyboard_check(vk_control) {
                        var fff = get_open_filename("TEXTO|*.txt", "");
                        if fff != "" {
                            var tfi = file_text_open_read(fff);
                            var txt = "";
                            while !file_text_eof(tfi) {
                                txt += file_text_read_string(tfi);
                                if !file_text_eof(tfi) {
                                    txt += "#";
                                    file_text_readln(tfi);
                                }
                            }
                            file_text_close(tfi);
                            while string_height_ext(txt, 13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                    string_width_ext(txt, 13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                                txt = string_copy(txt, 1, string_length(txt) - 1);
                            }
                            ds_list_replace(cerca_esp.textos, num, txt);
                            cerca_esp.fecha = s_current_time();
                            cerca_esp.reloj_sinc = 0;
                        }
                    }
                    else {
                        papelote = ds_list_find_value(cerca_esp.textos, num);
                    }
                }
                break;
            
            case o_confesionario:
                comandos_gui = "CONFESIONARIO#Leer Texto (1)#Escribir texto (2)#Importar texto (3)" +
                    "#...#visible en " + string((mean(o_control.confesion_futuro_min,
                    o_control.confesion_futuro_max) / o_control.relojes_acelerados) / 60) +
                    " minutos#saltos linea: símbolo númeral#formato TXT";
                if keyboard_check_pressed(ord('1')) {
                    papelote = ds_list_find_value(cerca_esp.textos, 0);
                    if cerca_esp.leido == 0 {
                        cerca_esp.leido = 1;
                        if ds_list_find_value(cerca_esp.textos, 0) != "" {
                            cerca_esp.futuro = s_current_time() + irandom_range(
                                o_control.confesion_futuro_min,
                                o_control.confesion_futuro_max) / o_control.relojes_acelerados;
                        }
                        else {
                            cerca_esp.futuro = s_current_time() + 10;
                        }
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    for (var t = 1; t &lt; ds_list_size(cerca_esp.textos); t++) {
                        if ds_list_find_value(cerca_esp.textos, t) == "" {
                            dial_especial = get_string_async("Escriba un texto", "");
                            tipo_especial = cerca_esp;
                            break;
                        }
                    }
                }
                else if keyboard_check_pressed(ord('3')) {
                    for (var t = 1; t &lt; ds_list_size(cerca_esp.textos); t++) {
                        if ds_list_find_value(cerca_esp.textos, t) == "" {
                            var fff = get_open_filename("TEXTO|*.txt", "");
                            if fff != "" {
                                var tfi = file_text_open_read(fff);
                                var txt = "";
                                while !file_text_eof(tfi) {
                                    txt += file_text_read_string(tfi);
                                    if !file_text_eof(tfi) {
                                        txt += "#";
                                        file_text_readln(tfi);
                                    }
                                }
                                file_text_close(tfi);
                                while string_height_ext(txt, 13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                        string_width_ext(txt, 13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                                    txt = string_copy(txt, 1, string_length(txt) - 1);
                                }
                                ds_list_replace(cerca_esp.textos, t, txt);
                                cerca_esp.fecha = s_current_time();
                                cerca_esp.reloj_sinc = 0;
                                cerca_esp.futuro = s_current_time() + irandom_range(
                                    o_control.confesion_futuro_min,
                                    o_control.confesion_futuro_max) / o_control.relojes_acelerados;
                            }
                            break;
                        }
                    }
                }
                break;
            
            case o_diccionario:
                var ww = ds_grid_width(cerca_esp.imagen);
                var hh = ds_grid_height(cerca_esp.imagen);
                comandos_gui = "DICCIONARIO#Cambiar hoja (1-, 2+)#Elegir hoja (3)#Hoja azar (4)" +
                    "#Escribir título (5)#Escribir información (6)#Importar imagen (7)#Limpiar hoja (0)" +
                    "#Importar (F2), Exportar (F3)" +
                    "#...#talla " + string(ww) + "," + string(hh) + " px#formatos PNG, JPG, BMP";
                if keyboard_check_pressed(ord('1')) {
                    cerca_esp.aguja--;
                    if cerca_esp.aguja &lt; 0 {
                        cerca_esp.aguja = ds_list_size(cerca_esp.titulos) - 1;
                    }
                    s_diccionario_aguja(cerca_esp);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 0.5;
                    cerca_esp.solo_aguja = true;
                }
                else if keyboard_check_pressed(ord('2')) {
                    cerca_esp.aguja++;
                    if cerca_esp.aguja &gt;= ds_list_size(cerca_esp.titulos) {
                        cerca_esp.aguja = 0;
                    }
                    s_diccionario_aguja(cerca_esp);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 0.5;
                    cerca_esp.solo_aguja = true;
                }
                else if keyboard_check_pressed(ord('3')) {
                    if dial_especial == -1 {
                        dial_especial = get_integer_async("Digite página deseada (0 - " +
                            string(ds_list_size(cerca_esp.titulos) - 1) + ")", cerca_esp.aguja);
                        tipo_especial = cerca_esp;
                        cerca_esp.orden_mensaje = 0;
                    }
                }
                else if keyboard_check_pressed(ord('4')) {
                    var almenosuno = false;
                    var tot = ds_list_size(cerca_esp.titulos);
                    for (var i = 0; i &lt; tot; i++) {
                        if ds_list_find_value(cerca_esp.titulos, i) != "" {
                            almenosuno = true;
                            break;
                        }
                    }
                    if almenosuno {
                        var agj;
                        do {
                            agj = irandom(tot - 1);
                        }
                        until ds_list_find_value(cerca_esp.titulos, agj) != "";
                        cerca_esp.aguja = agj;
                    }
                    else {
                        cerca_esp.aguja = irandom(tot - 1);
                    }
                    s_diccionario_aguja(cerca_esp);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 0.5;
                    cerca_esp.solo_aguja = true;
                }
                else if keyboard_check_pressed(ord('5')) {
                    if dial_especial == -1 {
                        var txt = ds_list_find_value(cerca_esp.titulos, cerca_esp.aguja);
                        dial_especial = get_string_async("Escriba el título de la hoja actual", txt);
                        tipo_especial = cerca_esp;
                        cerca_esp.orden_mensaje = 1;
                    }
                }
                else if keyboard_check_pressed(ord('6')) {
                    if dial_especial == -1 {
                        var txt = ds_list_find_value(cerca_esp.infos, cerca_esp.aguja);
                        dial_especial = get_string_async("Escriba texto informativo de la hoja actual", txt);
                        tipo_especial = cerca_esp;
                        cerca_esp.orden_mensaje = 2;
                    }
                }
                else if keyboard_check_pressed(ord('7')) {
                    var fff = get_open_filename("IMAGEN|*.png;*.jpg;*.bmp", "");
                    if fff != "" {
                        var spr = sprite_add(fff, 0, false, false, 0, 0);
                        var srf = surface_create(ww, hh);
                        surface_set_target(srf);
                        draw_clear_alpha(c_white, 0);
                        draw_sprite_ext(spr, 0, 0, 0,
                            (ww + 1) / sprite_get_width(spr),
                            (hh + 1) / sprite_get_height(spr),
                            0, c_white, 1);
                        surface_reset_target();
                        var pix, alp;
                        for (var w = 0; w &lt; ww; w++) {
                            for (var h = 0; h &lt; hh; h++) {
                                pix = surface_getpixel_ext(srf, w, h);
                                alp = (pix &gt;&gt; 24) &amp; 255;
                                if alp == 0 {
                                    ds_grid_set(cerca_esp.imagen, w, h, 0);
                                }
                                else {
                                    pix = round(mean(pix &amp; 255, (pix &gt;&gt; 8) &amp; 255, (pix &gt;&gt; 16) &amp; 255));
                                    ds_grid_set(cerca_esp.imagen, w, h, max(1, pix));
                                }
                            }
                        }
                        sprite_delete(spr);
                        surface_free(srf);
                        ds_list_replace(cerca_esp.fotos, cerca_esp.aguja, ds_grid_write(cerca_esp.imagen));
                        ds_list_replace(cerca_esp.infos, cerca_esp.aguja, "");
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                        cerca_esp.solo_aguja = false;
                        cerca_esp.imagen_vacia = false;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    var ww = ds_grid_width(cerca_esp.imagen);
                    var hh = ds_grid_height(cerca_esp.imagen);
                    if ds_list_find_value(cerca_esp.titulos, cerca_esp.aguja) != "" or
                            ds_list_find_value(cerca_esp.infos, cerca_esp.aguja) != "" or
                            ds_grid_get_sum(cerca_esp.imagen, 0, 0, ww - 1, hh - 1) != 0 {
                        ds_grid_clear(cerca_esp.imagen, 0);
                        ds_list_replace(cerca_esp.fotos, cerca_esp.aguja, "");
                        ds_list_replace(cerca_esp.titulos, cerca_esp.aguja, "");
                        ds_list_replace(cerca_esp.infos, cerca_esp.aguja, "");
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                        cerca_esp.solo_aguja = false;
                        cerca_esp.imagen_vacia = true;
                    }
                }
                else if keyboard_check_pressed(vk_f2) {
                    var fff = get_open_filename("DICCIONARIO|*.ini", "dic_");
                    if fff != "" {
                        ini_open(fff);
                        for (var i = 0; i &lt; 100; i++) {
                            ds_list_replace(cerca_esp.titulos, i, ini_read_string("H" + string(i), "T", ""));
                            ds_list_replace(cerca_esp.fotos, i, ini_read_string("H" + string(i), "F", ""));
                            ds_list_replace(cerca_esp.infos, i, ini_read_string("H" + string(i), "I", ""));
                        }
                        ini_close();
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                        cerca_esp.solo_aguja = false;
                        cerca_esp.imagen_vacia = false;
                    }
                }
                else if keyboard_check_pressed(vk_f3) {
                    var fff = get_save_filename("DICCIONARIO|*.ini", "dic_");
                    if fff != "" {
                        ini_open(fff);
                        for (var i = 0; i &lt; 100; i++) {
                            ini_write_string("H" + string(i), "T", ds_list_find_value(cerca_esp.titulos, i));
                            ini_write_string("H" + string(i), "F", ds_list_find_value(cerca_esp.fotos, i));
                            ini_write_string("H" + string(i), "I", ds_list_find_value(cerca_esp.infos, i));
                        }
                        ini_close();
                    }
                }
                break;
            
            case o_emisora:
                comandos_gui = "EMISORA#Escribir difusión (1)#Borrar difusión (0)#..." +
                    "#sonidos auto difundidos";
                if keyboard_check_pressed(ord('1')) {
                    if dial_especial == -1 {
                        dial_especial = get_string_async("Escriba texto a difundir", cerca_esp.texto);
                        tipo_especial = cerca_esp;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if cerca_esp.texto != "" {
                        cerca_esp.texto = "";
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_correo:
                comandos_gui = "CORREO#Revisar mail (1)#Redactar mail (2)#Total mails (3)#Leer envíos (4)" +
                    "#Editar envíos (5)#Vaciar envíos (9)#Vaciar mail (0)#...#un mensaje a la vez" +
                    "#límite 200 caracteres#forma: nombre|mensaje#saltos linea: símbolo númeral" +
                    "#texto nulo elimina envío";
                var mail = o_virtual_correo.id;
                if keyboard_check_pressed(ord('1')) {
                    if reloj_vercorreo == 0 {
                        var ok = false;
                        for (var i = 0; i &lt; ds_list_size(mail.mensajes); i++) {
                            if ds_list_find_value(mail.receptores, i) == idweb {
                                papelote = s_formato_mail(i);
                                reloj_vercorreo = o_control.vercorreo;
                                ds_list_delete(mail.mensajes, i);
                                ds_list_delete(mail.emisores, i);
                                ds_list_delete(mail.receptores, i);
                                ds_list_delete(mail.fechas, i);
                                break;
                            }
                        }
                        if ok {
                            mail.fecha = s_current_time();
                            mail.reloj_sinc = 0;
                        }
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if dial_especial == -1 {
                        dial_especial = get_string_async("Escriba un correo, de la forma: " +
                            "nombre|mensaje (ojo, solo un | y máximo 200 caracteres)", "");
                        tipo_especial = cerca_esp;
                    }
                }
                else if keyboard_check_pressed(ord('3')) {
                    var envi = 0;
                    var reci = 0;
                    for (var i = 0; i &lt; ds_list_size(mail.mensajes); i++) {
                        if ds_list_find_value(mail.receptores, i) == idweb {
                            reci++;
                        }
                        if ds_list_find_value(mail.emisores, i) == idweb {
                            envi++;
                        }
                    }
                    show_message_async("Recibidos: " + string(reci) + " - Enviados: " + string(envi));
                }
                else if keyboard_check_pressed(ord('4')) {
                    var tot = ds_list_size(mail.mensajes);
                    mail.aguja++;
                    if mail.aguja &gt;= tot {
                        mail.aguja = 0;
                    }
                    var ok = false;
                    for (var i = mail.aguja; i &lt; tot; i++) {
                        if ds_list_find_value(mail.emisores, i) == idweb {
                            papelote = s_formato_mail(i);
                            mail.aguja = i;
                            ok = true;
                            break;
                        }
                    }
                    if !ok {
                        mail.aguja = -1;
                    }
                }
                else if keyboard_check_pressed(ord('5')) {
                    if dial_especial == -1 {
                        var tot = ds_list_size(mail.mensajes);
                        if tot != 0 {
                            var agj = clamp(mail.aguja, 0, tot - 1);
                            if ds_list_find_value(mail.emisores, agj) == idweb {
                                var txt = s_busca_nombre(ds_list_find_value(mail.receptores, agj)) + "|" +
                                    ds_list_find_value(mail.mensajes, agj);
                                dial_especial = get_string_async("Escriba un correo, de la forma: " +
                                    "nombre|mensaje (ojo, solo un | y máximo 200 caracteres)", txt);
                                tipo_especial = cerca_esp;
                            }
                        }
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    var ok = false;
                    for (var i = ds_list_size(mail.mensajes) - 1; i &gt;= 0; i--) {
                        if ds_list_find_value(mail.emisores, i) == idweb {
                            ds_list_delete(mail.mensajes, i);
                            ds_list_delete(mail.emisores, i);
                            ds_list_delete(mail.receptores, i);
                            ds_list_delete(mail.fechas, i);
                            ok = true;
                        }
                    }
                    if ok {
                        mail.fecha = s_current_time();
                        mail.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    var ok = false;
                    for (var i = ds_list_size(mail.mensajes) - 1; i &gt;= 0; i--) {
                        if ds_list_find_value(mail.receptores, i) == idweb {
                            ds_list_delete(mail.mensajes, i);
                            ds_list_delete(mail.emisores, i);
                            ds_list_delete(mail.receptores, i);
                            ds_list_delete(mail.fechas, i);
                            ok = true;
                        }
                    }
                    if ok {
                        mail.fecha = s_current_time();
                        mail.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_monumento:
                comandos_gui = "MONUMENTO#Importar imagen (1)#Poner bandera (2-, 3+)#Exportar canon (8)#Limpiar imagen (0)" +
                    "#...#talla 96x144 px#centro 48x128 px#formato PNG";
                if keyboard_check_pressed(ord('1')) {
                    var fff = get_open_filename("IMAGEN|*.png", "");
                    if fff != "" {
                        var spr = sprite_add(fff, 0, false, false, 0, 0);
                        var srf = surface_create(96, 144);
                        surface_set_target(srf);
                        draw_clear_alpha(c_white, 0);
                        draw_sprite_ext(spr, 0, 0, 0,
                            96 / sprite_get_width(spr),
                            144 / sprite_get_height(spr),
                            0, c_white, 1);
                        surface_reset_target();
                        cerca_esp.spritefull = sprite_create_from_surface(srf, 0, 0, 96, 144,
                            false, false, 48, 144);
                        sprite_save(cerca_esp.spritefull, 0, "tmp.png");
                        cerca_esp.imagenpng = s_bin_archivo("tmp.png");
                        file_delete("tmp.png");
                        sprite_delete(spr);
                        surface_free(srf);
                        cerca_esp.mibandera = 0;
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if cerca_esp.imagenpng != "" {
                        cerca_esp.imagenpng = "";
                        s_actualiza_monumento(cerca_esp);
                    }
                    if cerca_esp.mibandera == 0 {
                        cerca_esp.mibandera = 235 - 177;
                    }
                    else {
                        cerca_esp.mibandera--;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('3')) {
                    if cerca_esp.imagenpng != "" {
                        cerca_esp.imagenpng = "";
                        s_actualiza_monumento(cerca_esp);
                    }
                    if cerca_esp.mibandera == 235 - 177 {
                        cerca_esp.mibandera = 0;
                    }
                    else {
                        cerca_esp.mibandera++;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('0')) {
                    if cerca_esp.imagenpng != "" {
                        cerca_esp.imagenpng = "";
                        cerca_esp.mibandera = 0;
                        s_actualiza_monumento(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('8')) {
                    var fff = get_save_filename("IMAGEN|*.png", "monumento_strip5");
                    if fff != "" {
                        file_copy("monumento_strip5.png", fff);
                    }
                }
                break;
            
            case o_estilo:
                comandos_gui = "ESTILO#Ropa (1-, 2+)#Tela (3-, 4+)" +
                    "#Pelo (5-, 6+)#Tinte (7-, 8+)#Ropa azar (9)#Pelo azar (0)#Foto ava/perf (F2, F3)#..." +
                    "#Perfil en Registro";
                // ropa
                if keyboard_check_pressed(ord('1')) {
                    ropa--;
                    if ropa &lt; 0 {
                        ropa = sprite_get_number(d_ropa_fem) - 1;
                    }
                    s_tutorial(1);
                }
                else if keyboard_check_pressed(ord('2')) {
                    ropa++;
                    if ropa &gt;= sprite_get_number(d_ropa_fem) {
                        ropa = 0;
                    }
                    s_tutorial(1);
                }
                else if keyboard_check_pressed(ord('9')) {
                    ropa = irandom_range(4, sprite_get_number(d_ropa_fem) - 1);
                    s_tutorial(1);
                }
                // tela
                if keyboard_check_pressed(ord('3')) {
                    tela--;
                    if tela &lt; 0 {
                        tela = array_length_1d(o_control.colores) - 1;
                    }
                    s_tutorial(1);
                }
                else if keyboard_check_pressed(ord('4')) {
                    tela++;
                    if tela &gt;= array_length_1d(o_control.colores) {
                        tela = 0;
                    }
                    s_tutorial(1);
                }
                // pelo
                if keyboard_check_pressed(ord('5')) {
                    pelo--;
                    if pelo &lt; 0 {
                        pelo = sprite_get_number(d_pelo) - 1;
                    }
                    s_pelo_femenino(id, false);
                    s_tutorial(1);
                }
                else if keyboard_check_pressed(ord('6')) {
                    pelo++;
                    if pelo &gt;= sprite_get_number(d_pelo) {
                        pelo = 0;
                    }
                    s_pelo_femenino(id, true);
                    s_tutorial(1);
                }
                else if keyboard_check_pressed(ord('0')) {
                    pelo = irandom(sprite_get_number(d_pelo) - 1);
                    s_pelo_femenino(id, true);
                    s_tutorial(1);
                }
                // tinte
                if keyboard_check_pressed(ord('7')) {
                    tinte--;
                    if tinte &lt; 0 {
                        tinte = array_length_1d(o_control.colores) - 1;
                    }
                    s_tutorial(1);
                }
                else if keyboard_check_pressed(ord('8')) {
                    tinte++;
                    if tinte &gt;= array_length_1d(o_control.colores) {
                        tinte = 0;
                    }
                    s_tutorial(1);
                }
                // foto
                if keyboard_check_pressed(vk_f2) {
                    var fff = get_save_filename("FOTO|*.png", "usr_" + nombre);
                    if fff != "" {
                        s_foto_avatar(fff, id);
                    }
                }
                else if keyboard_check_pressed(vk_f3) {
                    var fff = get_save_filename("FOTO|*.png", "prf_" + nombre);
                    if fff != "" {
                        s_foto_perfil(fff, id);
                    }
                }
                break;
            
            case o_registro:
                comandos_gui = "REGISTRO#Nombre (1)#Zodiaco (2), Género (3)#Piel (4), " +
                    "Edad (5)#Rol (6), Facultad (7)#Textos (8 + Shift / Ctrl)#Contacto (9), Hashtag (0)" +
                    "#Importar (F2), Exportar (F3)#...#Ávatar en Estilo";
                if dial_registro == -1 {
                    if keyboard_check_pressed(vk_f2) {
                        var fff = get_open_filename("USUARIO|*.ini", "");
                        if fff != "" {
                            s_import_usuario(fff);
                        }
                    }
                    else if keyboard_check_pressed(vk_f3) {
                        var fff = get_save_filename("USUARIO|*.ini", "usr_" + nombre);
                        if fff != "" {
                            s_export_usuario(id, fff);
                        }
                    }
                    else if keyboard_check_pressed(ord('1')) {
                        tipo_registro = 1;
                        dial_registro = get_string_async("Escriba su nombre o apodo", nombre);
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('2')) {
                        zodiaco++;
                        if zodiaco &gt;= 12 {
                            zodiaco = 0;
                        }
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('3')) {
                        if genero == 0 {
                            genero = 1;
                        }
                        else {
                            genero = 0;
                        }
                        s_pelo_femenino(id, true);
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('4')) {
                        piel++;
                        if piel &gt;= 3 {
                            piel = 0;
                        }
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('5')) {
                        tipo_registro = 5;
                        dial_registro = get_integer_async("Escriba su año de nacimiento", edad);
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('6')) {
                        nivel++;
                        if nivel &gt;= array_length_1d(o_control.title) {
                            nivel = 0;
                        }
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('7')) {
                        grupo++;
                        if grupo &gt;= array_length_1d(o_control.grupos) {
                            grupo = 0;
                        }
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('8')) {
                        if keyboard_check(vk_shift) {
                            tipo_registro = 80;
                            dial_registro = get_string_async("Escriba su biografía", biografia);
                        }
                        else if keyboard_check(vk_control) {
                            var fff = get_open_filename("TEXTO|*.txt", "");
                            if fff != "" {
                                var tfi = file_text_open_read(fff);
                                var txt = "";
                                while !file_text_eof(tfi) {
                                    txt += file_text_read_string(tfi);
                                    if !file_text_eof(tfi) {
                                        txt += "#";
                                        file_text_readln(tfi);
                                    }
                                }
                                file_text_close(tfi);
                                while string_height_ext(txt, 13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                        string_width_ext(txt, 13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                                    txt = string_copy(txt, 1, string_length(txt) - 1);
                                }
                                biografia = txt;
                            }
                        }
                        else {
                            tipo_registro = 8;
                            dial_registro = get_string_async("Escriba su descripción", descripcion);
                        }
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('9')) {
                        tipo_registro = 9;
                        dial_registro = get_string_async("Escriba el link a su página web", contacto);
                        s_tutorial(2);
                    }
                    else if keyboard_check_pressed(ord('0')) {
                        tipo_registro = 0;
                        dial_registro = get_string_async("Escriba hashtag, podrá ubicar a otros usuarios" +
                            " que posean el mismo", hashtag);
                        s_tutorial(2);
                    }
                }
                break;
            
            case o_baul:
                comandos_gui = "BAÚL#Objeto (1-, 2+)#Azar (3)#Bandera (4)#Elegir (5)#Vacío (0)#..." +
                    "#efectos especiales#(Espacio)";
                // objeto
                if keyboard_check_pressed(ord('1')) {
                    objeto--;
                    if objeto &lt; 0 {
                        objeto = sprite_get_number(d_objeto) - 1;
                    }
                    s_objeto_prohibido(id, false);
                }
                else if keyboard_check_pressed(ord('2')) {
                    objeto++;
                    if objeto &gt;= sprite_get_number(d_objeto) {
                        objeto = 0;
                    }
                    s_objeto_prohibido(id, true);
                }
                else if keyboard_check_pressed(ord('3')) {
                    do {
                        objeto = irandom(sprite_get_number(d_objeto) - 1);
                        s_objeto_prohibido(id, true);
                    }
                    until objeto != 0 and (objeto &lt; 178 or objeto &gt; 235);
                }
                else if keyboard_check_pressed(ord('0')) {
                    objeto = 0;
                }
                else if keyboard_check_pressed(ord('4')) {
                    objeto = irandom_range(178, 235);
                }
                else if keyboard_check_pressed(ord('5')) {
                    dial_especial = get_integer_async("Digite ID de objeto (0 vacío)", objeto);
                    tipo_especial = cerca_esp;
                }
                var ids = sprite_get_number(d_objeto) - 1;
                if objeto == ids {
                    var uv = 0;
                    with o_usuario {
                        if objeto == ids {
                            uv++;
                        }
                    }
                    if uv &gt; 1 {
                        objeto = 0;
                    }
                }
                break;
            
            case o_antena:
                var www;
                if g_network == m_net_peer {
                    www = "(P)";
                }
                else if g_network == m_net_client {
                    www = "(C)";
                }
                else if g_network == m_net_server {
                    www = "(S)";
                }
                comandos_gui = "ANTENA" + www + "#Ver un perfil (1)#Agregar como amigo (2)#..." +
                    "#Cambiar IP LAN (8)#Conectar IP (9)#Configuracion web (0)#...#Usuarios / Conectados#" +
                    o_control.network_estadist;
                if keyboard_check_pressed(ord('1')) {
                    cerca_esp.perfil_azar = instance_find(o_usuario,
                        irandom(instance_number(o_usuario) - 1));
                    if cerca_esp.perfil_azar == id {
                        cerca_esp.perfil_azar = noone;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if cerca_esp.perfil_azar != noone {
                        // ver si ya esta y lo va a cambiar
                        var ok = false;
                        for (var c = 0; c &lt; o_control.total_contactos; c++) {
                            if amigo[c] == cerca_esp.perfil_azar.idweb {
                                ok = true;
                                break;
                            }
                        }
                        if !ok {
                            // ver espacio disponible para agregarlo
                            for (var c = 0; c &lt; o_control.total_contactos; c++) {
                                if amigo[c] == 0 {
                                    amigo[c] = cerca_esp.perfil_azar.idweb;
                                    amigi[c] = m_cont_amigo;
                                    break;
                                }
                            }
                        }
                    }
                }
                else if keyboard_check_pressed(ord('8')) {
                    var lan = get_string("Escriba la dirección LAN IPv4 sin el último número " +
                        "(por defecto: 192.168.1.)", o_control.mascara);
                    if s_str_es_ip_msk(lan) {
                        o_control.mascara = lan;
                        s_ini_save("mascaraLAN", lan);
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    if dial_especial == -1 {
                        dial_especial = get_string_async("Digite una IPv4 personalizada (" + 
                            ds_list_find_value(o_control.conectados, 0) + ")", "");
                        tipo_especial = cerca_esp;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    with o_control {
                        if show_question("Modificará la forma de conexión ¿Desea continuar?") {
                            var qst = show_question("Escoja SI para el modo p2p (conexión total, opción por defecto), o" +
                                " NO para cliente / servidor");
                            if qst {
                                s_ini_save("g_network", m_net_peer);
                            }
                            else {
                                qst = show_question("Escoja SI para funcionar como cliente, o NO para actuar como servidor");
                                if qst {
                                    s_ini_save("g_network", m_net_client);
                                }
                                else {
                                    s_ini_save("g_network", m_net_server);
                                }
                            }
                            with o_control.mipropio {
                                if file_exists("usuario" + string(idweb) + ".ini") {
                                    file_delete("usuario" + string(idweb) + ".ini");
                                }
                                idweb = irandom_range(1, 65535);
                            }
                            show_message("Es requerido reiniciar el software");
                            game_end();
                            exit;
                        }
                    }
                }
                if en_mira == noone {
                    en_mira = cerca_esp.perfil_azar;
                }
                break;
            
            case o_mapa:
                comandos_gui = "MAPA#Ver mapa (1)#Objeto mapa (2)#Foto mapa (9)#Recargar mapas (0)";
                if keyboard_check_pressed(ord('1')) and ver_mapa == noone {
                    ver_mapa = sprite_add("mapa.png", 0, false, false, 1024 / 2,
                        (1024 / room_width) * room_height / 2);
                }
                else if keyboard_check_pressed(ord('2')) {
                    if objeto == 163 {
                        objeto = 0;
                    }
                    else {
                        objeto = 163;
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    if file_exists("mapaUV.png") {
                        var fff = get_save_filename("IMAGEN|*.png", "mapaUV");
                        if fff != "" {
                            file_copy("mapaUV.png", fff);
                        }
                    }
                    else {
                        s_foto_mapa("mapaUV.png", 4000);
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    s_foto_mapa("mapa.png", 1024);
                    s_foto_mapa("mapaUV.png", 4000);
                }
                break;
            
            case o_acelerador:
                var a, c, r, g, d, s;
                if cerca_esp.activo {
                    a = "Encendido";
                }
                else {
                    a = "Apagado";
                }
                switch cerca_esp.calor_ini {
                    case 0: c = "0 °C"; break;
                    case 1: c = "100 °C"; break;
                    case 2: c = "50 °C"; break;
                    case 3: c = "??? °C"; break;
                }
                r = string(round(1 / (cerca_esp.reloj_parti_max * (cerca_esp.cadencia + 1)))) + " pps";
                switch cerca_esp.girar {
                    case 0: g = "No"; break;
                    case 1: g = "x1"; break;
                    case 2: g = "x2"; break;
                    case 3: g = "x3"; break;
                }
                g += " centrifugo";
                d = string(cerca_esp.direccional) + "° lanzamiento";
                switch cerca_esp.disparado {
                    case 0: s = "No"; break;
                    case 1: s = "x1"; break;
                    case 2: s = "x2"; break;
                    case 3: s = "x3"; break;
                }
                s += " rapidez";
                comandos_gui = "PARTÍCULAS#" + a + " (1)#" + c + " (2)#" + r + " (3)#" + g + " (4)" +
                    "#" + d + " (5)#" + s + " (6)#Herramienta (7)";
                if keyboard_check_pressed(ord('1')) {
                    if cerca_esp.activo {
                        cerca_esp.activo = false;
                    }
                    else {
                        cerca_esp.activo = true;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('2')) {
                    cerca_esp.calor_ini++;
                    if cerca_esp.calor_ini &gt; 3 {
                        cerca_esp.calor_ini = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('3')) {
                    cerca_esp.cadencia++;
                    if cerca_esp.cadencia &gt; 3 {
                        cerca_esp.cadencia = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('4')) {
                    cerca_esp.girar++;
                    if cerca_esp.girar &gt; 3 {
                        cerca_esp.girar = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('5')) {
                    switch cerca_esp.direccional {
                        case 0: cerca_esp.direccional = 45; break;
                        case 45: cerca_esp.direccional = 90; break;
                        case 90: cerca_esp.direccional = 180; break;
                        case 180: cerca_esp.direccional = 360; break;
                        case 360: cerca_esp.direccional = 0; break;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('6')) {
                    cerca_esp.disparado++;
                    if cerca_esp.disparado &gt; 3 {
                        cerca_esp.disparado = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('7')) {
                    objeto++;
                    if objeto &gt; 161 {
                        objeto = 0;
                    }
                    else if objeto &lt; 158 {
                        objeto = 158;
                    }
                }
                break;
            
            case o_nivel:
                var ww = ds_grid_width(cerca_esp.imagen);
                var hh = ds_grid_height(cerca_esp.imagen);
                comandos_gui = "CAMPO ESCALAR#Rotar (1-, 2+)#Importar imagen (3)#Limpiar imagen (0)#..." +
                    "#talla " + string(ww) + "," + string(hh) + " px#formatos PNG, JPG, BMP";
                if keyboard_check_pressed(ord('1')) {
                    cerca_esp.angulo += 10;
                    if cerca_esp.angulo &gt;= 360 {
                        cerca_esp.angulo = 0;
                    }
                    cerca_esp.alarm[1] = 1;
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('2')) {
                    cerca_esp.angulo -= 10;
                    if cerca_esp.angulo &lt; 0 {
                        cerca_esp.angulo = 350;
                    }
                    cerca_esp.alarm[1] = 1;
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('3')) {
                    var fff = get_open_filename("IMAGEN|*.png;*.jpg;*.bmp", "");
                    if fff != "" {
                        var spr = sprite_add(fff, 0, false, false, 0, 0);
                        var srf = surface_create(ww, hh);
                        surface_set_target(srf);
                        draw_clear_alpha(c_white, 0);
                        draw_sprite_ext(spr, 0, 0, 0,
                            (ww + 1) / sprite_get_width(spr),
                            (hh + 1) / sprite_get_height(spr),
                            0, c_white, 1);
                        surface_reset_target();
                        var pix;
                        for (var w = 0; w &lt; ww; w++) {
                            for (var h = 0; h &lt; hh; h++) {
                                pix = surface_getpixel_ext(srf, w, h);
                                ds_grid_set(cerca_esp.imagen, w, h, round(
                                    mean(pix &amp; 255, (pix &gt;&gt; 8) &amp; 255, (pix &gt;&gt; 16) &amp; 255)));
                            }
                        }
                        sprite_delete(spr);
                        surface_free(srf);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    var ww = ds_grid_width(cerca_esp.imagen);
                    var hh = ds_grid_height(cerca_esp.imagen);
                    if ds_grid_get_sum(cerca_esp.imagen, 0, 0, ww - 1, hh - 1) != 0 {
                        ds_grid_clear(cerca_esp.imagen, c_black);
                        ds_grid_clear(cerca_esp.transp, 0);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_puntaje:
                comandos_gui = "CANCHAS#Equipo (1)#Balón (2)#Juego ilimitado (8)#Juego temporizado (9)" +
                    "#Finalizar juego (0)";
                if keyboard_check_pressed(ord('1')) {
                    objeto++;
                    if objeto &gt; 82 {
                        objeto = 0;
                    }
                    else if objeto &lt; 81 {
                        objeto = 81;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    objeto++;
                    if objeto &gt; 16 {
                        objeto = 0;
                    }
                    else if objeto &lt; 15 {
                        objeto = 15;
                    }
                }
                else{
                    var num = -1;
                    var enj = true;
                    if keyboard_check_pressed(ord('8')) {
                        num = 0;
                    }
                    else if keyboard_check_pressed(ord('9')) {
                        num = cerca_esp.reloj_juego_max + 5;
                    }
                    else if keyboard_check_pressed(ord('0')) {
                        num = 0;
                        enj = false;
                    }
                    if num != -1 {
                        cerca_esp.puntos[0] = 0;
                        cerca_esp.puntos[1] = 0;
                        cerca_esp.reloj_juego = num;
                        if enj {
                            cerca_esp.reloj_balon = 5;
                        }
                        else {
                            cerca_esp.reloj_balon = 0;
                        }
                        cerca_esp.enjuego = enj;
                        var yop = cerca_esp;
                        with o_balon {
                            if origen == yop {
                                instance_destroy();
                                break;
                            }
                        }
                        cerca_esp.fecha = s_current_time() + 3;
                        cerca_esp.reloj_delta = 2;
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_planetario:
                comandos_gui = "PLANETARIO#Velocidad (1-, 2+)#Azar (3)#Telescopio (4)";
                if keyboard_check_pressed(ord('1')) {
                    var ant = cerca_esp.velocidad;
                    cerca_esp.velocidad = max(0, cerca_esp.velocidad - 0.5);
                    if ant != cerca_esp.velocidad {
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    var ant = cerca_esp.velocidad;
                    cerca_esp.velocidad = min(10, cerca_esp.velocidad + 0.5);
                    if ant != cerca_esp.velocidad {
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                else if keyboard_check_pressed(ord('3')) {
                    var yop = cerca_esp;
                    with o_planeta {
                        if origen ==  yop {
                            direction = random(360);
                        }
                    }
                }
                else if keyboard_check_pressed(ord('4')) {
                    if objeto == 0 {
                        objeto = 146;
                    }
                    else {
                        objeto = 0;
                    }
                }
                break;
            
            case o_signal:
                comandos_gui = "SEÑALES#Amplitud (1-, 2+)#Frecuencia (3-, 4+)#Desfase (5-, 6+)" +
                    "#Onda (7)";
                if keyboard_check_pressed(ord('1')) {
                    cerca_esp.amplitud = max(0, cerca_esp.amplitud - 1);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('2')) {
                    cerca_esp.amplitud = min(9, cerca_esp.amplitud + 1);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('3')) {
                    cerca_esp.frecuencia = max(0, cerca_esp.frecuencia - 1);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('4')) {
                    cerca_esp.frecuencia = min(9, cerca_esp.frecuencia + 1);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('5')) {
                    cerca_esp.desfase = max(0, cerca_esp.desfase - 1);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('6')) {
                    cerca_esp.desfase = min(9, cerca_esp.desfase + 1);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('7')) {
                    cerca_esp.tipo++;
                    if cerca_esp.tipo &gt; 5 {
                        cerca_esp.tipo = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                break;
            
            case o_cultivo:
                var cosito = collision_point(mouse_x, mouse_y, o_planta, true, false);
                if cosito != noone {
                    if cosito.origen != cerca_esp {
                        cosito = noone;
                    }
                }
                var ttt = "";
                switch cerca_esp.semilla {
                    case 0: ttt = "Maíz"; break;
                    case 1: ttt = "Calabaza"; break;
                    case 2: ttt = "Fríjol"; break;
                    case 3: ttt = "Flor"; break;
                    case 4: ttt = "Espinaca"; break;
                }
                var ok = s_current_time() - cerca_esp.ultima_accion &gt; o_control.poder_cultivar;
                if ok {
                    comandos_gui = "CULTIVO#Crear (clic Iz)#Semilla (1)#Matera (2)#Arrancar (0)" +
                        "#...#" + ttt + " :semilla";
                }
                else {
                    comandos_gui = "CULTIVO#Germinando...#Semilla (1)#Matera (2)#Arrancar (0)" +
                        "#...#" + ttt + " :semilla";
                }
                if mouse_check_button_pressed(mb_left) and ok and cosito == noone {
                    if !place_meeting(mouse_x, mouse_y, o_bloque) and !place_meeting(mouse_x, mouse_y, o_planta) and
                            point_in_rectangle(mouse_x, mouse_y,
                                cerca_esp.x - 192, cerca_esp.y + 24,
                                cerca_esp.x + 192, cerca_esp.y + 24 + 192) {
                        var aux = instance_create(mouse_x, mouse_y, o_planta);
                        aux.origen = cerca_esp;
                        aux.tipo = cerca_esp.semilla;
                        cerca_esp.ultima_accion = s_current_time();
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                if keyboard_check_pressed(ord('1')) {
                    cerca_esp.semilla++;
                    if cerca_esp.semilla &gt; 4 {
                        cerca_esp.semilla = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if cosito != noone {
                        with cosito {
                            instance_destroy();
                        }
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    objeto++;
                    if objeto &gt; 20 {
                        objeto = 0;
                    }
                    else if objeto &lt; 17 {
                        objeto = 17;
                    }
                }
                break;
            
            case o_shooter:
                comandos_gui = "DISPAROS#Objeto (1-, 2+)#Azar (3)#Vacío (0)#Disparar (Espacio, clic Iz)#..." +
                    "#Rojos aliados#Azules aliados#Amarillos vs todos#Verdes vs todos";
                // objeto
                if keyboard_check_pressed(ord('1')) {
                    objeto--;
                    if objeto &lt; 130 {
                        objeto = 137;
                    }
                    else if objeto &gt; 137 {
                        objeto = 137;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    objeto++;
                    if objeto &gt; 137 {
                        objeto = 130;
                    }
                    else if objeto &lt; 130 {
                        objeto = 130;
                    }
                }
                else if keyboard_check_pressed(ord('3')) {
                    objeto = irandom_range(130, 137);
                }
                else if keyboard_check_pressed(ord('0')) {
                    objeto = 0;
                }
                break;
            
            case o_juegovida:
                var vv = string(11 - cerca_esp.reloj_max * 2);
                if cerca_esp.reloj_max == 0 {
                    comandos_gui = "JUEGO VIDA#Modificar (clic Iz)#Velocidad " + vv + " (1-, 2+)#Ejecutar (3)" +
                        "#Aleatorio (4)#Actualizar datos (5)#Compartir datos (6)#Reglas (7)#Limpiar (0)";
                }
                else {
                    comandos_gui = "JUEGO VIDA#Modificar (clic Iz)#Velocidad " + vv + " (1-, 2+)#Detener (3)" +
                        "#Aleatorio (4)#Actualizar datos (5)#Compartir datos (6)#Reglas (7)#Limpiar (0)";
                }
                if keyboard_check_pressed(ord('2')) {
                    cerca_esp.reloj_max = max(0.5, cerca_esp.reloj_max - 0.5);
                    cerca_esp.reloj_cambio = min(cerca_esp.reloj_cambio, cerca_esp.reloj_max);
                }
                else if keyboard_check_pressed(ord('1')) {
                    cerca_esp.reloj_max = min(5, cerca_esp.reloj_max + 0.5);
                    cerca_esp.reloj_cambio = min(cerca_esp.reloj_cambio, cerca_esp.reloj_max);
                }
                else if keyboard_check_pressed(ord('3')) {
                    if cerca_esp.reloj_max == 0 {
                        cerca_esp.reloj_max = 1.5;
                    }
                    else {
                        cerca_esp.reloj_max = 0;
                    }
                    cerca_esp.reloj_cambio = min(cerca_esp.reloj_cambio, cerca_esp.reloj_max);
                }
                else if keyboard_check_pressed(ord('0')) {
                    ds_grid_clear(cerca_esp.est_nex, 0);
                }
                else if keyboard_check_pressed(ord('4')) {
                    ds_grid_clear(cerca_esp.est_nex, 0);
                    for (var w = 0; w &lt; ds_grid_width(cerca_esp.est_nex); w++) {
                        for (var h = 0; h &lt; ds_grid_height(cerca_esp.est_nex); h++) {
                            if random(1) &lt; 0.5 {
                                ds_grid_set(cerca_esp.est_nex, w, h, 1);
                            }
                        }
                    }
                }
                else if keyboard_check_pressed(ord('5')) {
                    ds_grid_copy(cerca_esp.est_nex, cerca_esp.entrante);
                }
                else if keyboard_check_pressed(ord('6')) {
                    ds_grid_copy(cerca_esp.saliente, cerca_esp.est_nex);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('7')) {
                    if dial_especial == -1 {
                        var hh = cerca_esp.regla[0] + "/" + cerca_esp.regla[1];
                        dial_especial = get_string_async("Digite números de vecinas que mantienen estado vivo / " +
                            "números que hacen nacer, ej: 245/368 (por defecto 23/3)", hh);
                        tipo_especial = cerca_esp;
                    }
                }
                if mouse_check_button_pressed(mb_left) {
                    var gus = collision_point(mouse_x, mouse_y, o_gusano, true, false);
                    if gus != noone {
                        if ds_grid_get(cerca_esp.est_nex, gus.mx, gus.my) == 0 {
                            ds_grid_set(cerca_esp.est_nex, gus.mx, gus.my, 1);
                        }
                        else {
                            ds_grid_set(cerca_esp.est_nex, gus.mx, gus.my, 0);
                        }
                    }
                }
                break;
            
            case o_ahorcado:
                comandos_gui = "AHORCADO#Escriba letra (1)#Palabra suya (2)#Reinicie juego (0)" +
                    "#...#de títulos en Diccionarios";
                if keyboard_check_pressed(ord('1')) {
                    if cerca_esp.vidas &gt; 0 and dial_especial == -1 and
                            cerca_esp.palabra != cerca_esp.adivinada {
                        dial_especial = get_string_async("Escriba letra o palabra", "");
                        tipo_especial = cerca_esp;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    s_ahorcado_reinicia(cerca_esp);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 0.5;
                }
                else if keyboard_check_pressed(ord('2')) {
                    if dial_especial == -1 {
                        s_ahorcado_reinicia(cerca_esp);
                        cerca_esp.palabra = "";
                        cerca_esp.adivinada = "";
                        cerca_esp.vidas = 6;
                        cerca_esp.historial = "";
                        dial_especial = get_string_async("Escriba palabra personalizada", "");
                        tipo_especial = cerca_esp;
                    }
                }
                break;
            
            case o_tarot:
                comandos_gui = "TAROT#Tirada azar (1)#Obtener imagen (2)#..." +
                    "#40 servidores";
                if keyboard_check_pressed(ord('1')) {
                    s_barajar(cerca_esp);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 0.5;
                }
                else if keyboard_check_pressed(ord('2')) {
                    var fff = get_save_filename("IMAGEN|*.jpg", "forthy_servants");
                    if fff != "" {
                        file_copy("forthy_servants.jpg", fff);
                    }
                }
                break;
            
            case o_evolutivo:
                comandos_gui = "EVOLUCIÓN#Alimento (1)#Mutación (2)#Recombinación (3)#Red jama (4)" +
                    "#Actualizar datos (5)#Compartir datos (6)#Poblar al azar (9)#Extinguir mitad (0)" +
                    "#...#Población / Generación";
                if keyboard_check_pressed(ord('1')) {
                    cerca_esp.densidad_alimento++;
                    if cerca_esp.densidad_alimento &gt; 9 {
                        cerca_esp.densidad_alimento = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 3;
                }
                else if keyboard_check_pressed(ord('2')) {
                    cerca_esp.fuerza_mutacion++;
                    if cerca_esp.fuerza_mutacion &gt; 9 {
                        cerca_esp.fuerza_mutacion = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 3;
                }
                else if keyboard_check_pressed(ord('3')) {
                    cerca_esp.fuerza_recombinacion++;
                    if cerca_esp.fuerza_recombinacion &gt; 9 {
                        cerca_esp.fuerza_recombinacion = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 3;
                }
                else if keyboard_check_pressed(ord('4')) {
                    if objeto == 157 {
                        objeto = 0;
                    }
                    else {
                        objeto = 157;
                    }
                }
                else if keyboard_check_pressed(ord('5')) {
                    with o_bicho {
                        instance_destroy();
                    }
                    var aux;
                    var ant_mut = cerca_esp.fuerza_mutacion;
                    var ant_recomb = cerca_esp.fuerza_recombinacion;
                    cerca_esp.fuerza_mutacion = 3;
                    cerca_esp.fuerza_recombinacion = 7;
                    repeat cerca_esp.num_bichos_udp {
                        aux = s_pobla_bichos(cerca_esp, true);
                        if aux != noone {
                            for (var g = 0; g &lt; 6; g++) {
                                aux.gen[g] = cerca_esp.gen[g];
                            }
                            s_mutacion(aux, aux);
                        }
                    }
                    cerca_esp.fuerza_mutacion = ant_mut;
                    cerca_esp.fuerza_recombinacion = ant_recomb;
                }
                else if keyboard_check_pressed(ord('6')) {
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 3;
                }
                else if keyboard_check_pressed(ord('9')) {
                    with o_bicho {
                        instance_destroy();
                    }
                    repeat irandom_range(3, 9) {
                        s_pobla_bichos(cerca_esp, true);
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    with o_bicho {
                        if random(1) &lt; 0.5 {
                            instance_destroy();
                        }
                    }
                }
                break;
            
            case o_calculadora:
                comandos_gui = "CALCULADORA#Respuesta (1, 2, 3, 4)#Mini-calculadora (9)#Reiniciar (0)";
                var ind = -1;
                if keyboard_check_pressed(ord('1')) {
                    ind = 0;
                }
                else if keyboard_check_pressed(ord('2')) {
                    ind = 1;
                }
                else if keyboard_check_pressed(ord('3')) {
                    ind = 2;
                }
                else if keyboard_check_pressed(ord('4')) {
                    ind = 3;
                }
                if ind != -1 and cerca_esp.respuesta[0] != "+" {
                    var lad = x &gt; cerca_esp.x;
                    if ind == cerca_esp.verdadera {
                        s_calculadora(cerca_esp, false, lad, 1);
                    }
                    else {
                        s_calculadora(cerca_esp, false, lad, -1);
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 0;
                }
                else if keyboard_check_pressed(ord('9')) {
                    if objeto == 0 {
                        objeto = 77;
                    }
                    else {
                        objeto = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    s_calculadora(cerca_esp, true, false, 0);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                break;
            
            case o_secuencia:
                comandos_gui = "SECUENCIA#Reiniciar (0)#Botónes (Z,X,C,V,B,N,M)";
                if keyboard_check_pressed(ord('0')) {
                    if cerca_esp.ultima &gt;= string_length(cerca_esp.secuencia) {
                        s_secuencia_restart(cerca_esp, true);
                    }
                }
                else {
                    var num = -1;
                    if keyboard_check_pressed(ord('Z')) { num = 0; }
                    else if keyboard_check_pressed(ord('X')) { num = 1; }
                    else if keyboard_check_pressed(ord('C')) { num = 2; }
                    else if keyboard_check_pressed(ord('V')) { num = 3; }
                    else if keyboard_check_pressed(ord('B')) { num = 4; }
                    else if keyboard_check_pressed(ord('N')) { num = 5; }
                    else if keyboard_check_pressed(ord('M')) { num = 6; }
                    if num != -1 and cerca_esp.repeticion &gt;= string_length(cerca_esp.intento) {
                        cerca_esp.intento += string(num) + ".";
                        if cerca_esp.intento == string_copy(cerca_esp.secuencia, 1,
                                string_length(cerca_esp.intento)) {
                            if cerca_esp.intento == cerca_esp.secuencia {
                                cerca_esp.secuencia += ".x..";
                                repeat o_control.secuencia_minima + string_count("x", cerca_esp.secuencia) - 1 {
                                    cerca_esp.secuencia += string(irandom(6)) + ".";
                                }
                                cerca_esp.intento += ".x..";
                                cerca_esp.repeticion += 3;
                                s_audio(cerca_esp.x, cerca_esp.y, a_chekpoint, true);
                            }
                            else {
                                cerca_esp.repeticion--;
                            }
                            cerca_esp.fecha = s_current_time();
                            cerca_esp.reloj_sinc = 0.5;
                        }
                        else {
                            s_audio(cerca_esp.x, cerca_esp.y, a_fracaso, true);
                            s_secuencia_restart(cerca_esp, true);
                        }
                    }
                }
                break;
            
            case o_pipati:
                comandos_gui = "RIÑA#Piedra (1)#Papel (2)#Tijera (3)#Azar (4)#Objeto (5)#Limpiar (0)";
                if keyboard_check_pressed(ord('0')) {
                    cerca_esp.jugador_a = 0;
                    cerca_esp.jugador_b = 0;
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 0.5;
                }
                else if keyboard_check_pressed(ord('5')) {
                    objeto = choose(0, 99, 100, 101);
                }
                else {
                    var num = 0;
                    if keyboard_check_pressed(ord('1')) { num = 1; }
                    else if keyboard_check_pressed(ord('2')) { num = 2; }
                    else if keyboard_check_pressed(ord('3')) { num = 3; }
                    else if keyboard_check_pressed(ord('4')) { num = 1 + irandom(2); }
                    if num != 0 {
                        if cerca_esp.jugador_a == 0 and x &lt; cerca_esp.x {
                            cerca_esp.jugador_a = num;
                            num = 0;
                        }
                        if cerca_esp.jugador_b == 0 and x &gt; cerca_esp.x {
                            cerca_esp.jugador_b = num;
                            num = 0;
                        }
                        if num == 0 {
                            cerca_esp.fecha = s_current_time();
                            cerca_esp.reloj_sinc = 0.5;
                        }
                    }
                }
                break;
            
            case o_digital:
                var cosito = collision_point(mouse_x, mouse_y, o_dispo, true, false);
                var ttt = " :valor#";
                var ok = false;
                var eltipo = cerca_esp.tipo;
                if cosito != noone {
                    if cosito.origen == cerca_esp {
                        ttt = string(cosito.valor) + " :valor#";
                        eltipo = cosito.tipo;
                        ok = true;
                    }
                }
                switch eltipo {
                    case 0: ttt += "Bombilla :tipo#1 :in / 0 :out"; break;
                    case 1: ttt += "Bocina :tipo#1 :in / 0 :out"; break;
                    case 2: ttt += "Memoria :tipo#2 :in / 1 :out"; break;
                    case 3: ttt += "Retardo :tipo#1 :in / 1 :out"; break;
                    case 4: ttt += "Aleatorio :tipo#0 :in / 1 :out"; break;
                    case 5: ttt += "Sensor :tipo#0 :in / 1 :out"; break;
                    case 6: ttt += "Botón :tipo#0 :in / 1 :out"; break;
                    case 7: ttt += "Oscilador :tipo#0 :in / 1 :out"; break;
                    case 8: ttt += "Alto :tipo#0 :in / 1 :out"; break;
                    case 9: ttt += "Bajo :tipo#0 :in / 1 :out"; break;
                    case 10: ttt += "Not :tipo#1 :in / 1 :out"; break;
                    case 11: ttt += "Or :tipo#2 :in / 1 :out"; break;
                    case 12: ttt += "And :tipo#2 :in / 1 :out"; break;
                    case 13: ttt += "Xor :tipo#2 :in / 1 :out"; break;
                    case 14: ttt += "Cable :tipo#1 :in / 2 :out"; break;
                }
                if cerca_esp.mute == 0 {
                    comandos_gui = "CIRCUITO#Crear (clic Iz)#Conectar (1)#Tipo (2-, 3+)#Valor (4)#Detener (5)#Borrar (0)" +
                        "#...#" + ttt;
                }
                else {
                    comandos_gui = "CIRCUITO#Crear (clic Iz)#Conectar (1)#Tipo (2-, 3+)#Valor (4)#Ejecutar (5)#Borrar (0)" +
                        "#...#" + ttt;
                }
                if mouse_check_button_pressed(mb_left) and !ok {
                    if !place_meeting(mouse_x, mouse_y, o_bloque) and !place_meeting(mouse_x, mouse_y, o_dispo) and
                            point_distance(mouse_x, mouse_y, cerca_esp.x, cerca_esp.y) &lt; 250 and cerca_esp.nodos &lt; 255 {
                        var aux = instance_create(mouse_x, mouse_y, o_dispo);
                        aux.origen = cerca_esp;
                        s_dispo_unico(aux);
                        aux.tipo = cerca_esp.tipo;
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                if keyboard_check_pressed(ord('1')) {
                    if dial_especial == -1 and ok {
                        ttt = string(cosito.vecina[0]) + "|" + string(cosito.vecina[1]) +
                            "|" + string(cosito.vecina[2]);
                        ttt = string_replace_all(ttt, "255", "");
                        dial_especial = get_string_async("Digite los IDs de las conexiónes A|B|C (ID: " +
                            string(cosito.name) + ")", ttt);
                        tipo_especial = cosito;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    cerca_esp.tipo++;
                    if cerca_esp.tipo &gt;= 15 {
                        cerca_esp.tipo = 0;
                    }
                }
                else if keyboard_check_pressed(ord('3')) {
                    cerca_esp.tipo--;
                    if cerca_esp.tipo &lt; 0 {
                        cerca_esp.tipo = 14;
                    }
                }
                else if keyboard_check_pressed(ord('4')) {
                    if ok {
                        cosito.valor++;
                        if cosito.valor &gt;= 7 {
                            cosito.valor = 0;
                        }
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                else if keyboard_check_pressed(ord('5')) {
                    if cerca_esp.mute == 0 {
                        cerca_esp.mute = 1;
                    }
                    else {
                        cerca_esp.mute = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('0')) {
                    if ok {
                        with o_dispo {
                            for (var i = 0; i &lt; 3; i++) {
                                if vecino[i] == cosito {
                                    vecino[i] = noone;
                                    vecina[i] = 255;
                                }
                            }
                        }
                        with cosito {
                            instance_destroy();
                        }
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                break;
            
            case o_memoria:
                comandos_gui = "MEMORIZA#Descubrir (clic Iz)#Reiniciar (0)";
                var mem = collision_point(mouse_x, mouse_y, o_fichamem, true, false);
                if mem != noone {
                    mem.exalte = true;
                }
                if mouse_check_button_pressed(mb_left) {
                    if mem != noone {
                        var ok = false;
                        var tll = ds_grid_width(cerca_esp.tablero);
                        for (var h = 0; h &lt; tll; h++) {
                            for (var w = 0; w &lt; tll; w++) {
                                if ds_grid_get(cerca_esp.tablero, w, h) == mem {
                                    ok = true;
                                }
                            }
                        }
                        if ok and mem.mostrado == 0 { // seleccion valida
                            if cerca_esp.ultimo[0] == 255 { // no se ha seleccionado previo
                                for (var h = 0; h &lt; tll; h++) {
                                    for (var w = 0; w &lt; tll; w++) {
                                        if ds_grid_get(cerca_esp.tablero, w, h) == mem {
                                            cerca_esp.ultimo[0] = w;
                                            cerca_esp.ultimo[1] = h;
                                        }
                                    }
                                }
                                mem.mostrado = -1;
                            }
                            else { // hay seleccion previa
                                var mum = ds_grid_get(cerca_esp.tablero,
                                    cerca_esp.ultimo[0], cerca_esp.ultimo[1]);
                                cerca_esp.ultimo[0] = 255;
                                cerca_esp.ultimo[1] = 0;
                                if mum.tipo == mem.tipo { // coincide
                                    mem.mostrado = -1;
                                }
                                else { // no coincide
                                    mum.mostrado = o_control.muestra_memoria;
                                    mem.mostrado = o_control.muestra_memoria;
                                    cerca_esp.turno++;
                                }
                            }
                            cerca_esp.fecha = s_current_time();
                            cerca_esp.reloj_sinc = 0.5;
                        }
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    s_memoria_ini(cerca_esp);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                break;
            
            case o_virus:
                comandos_gui = "VIRUS#Prob. mortandad (1)#Prob. transmisión (2)" +
                    "#Tiempo incubación (3)#Tiempo enfermedad (4)#Herramientas (5)" +
                    "#Infectarse (8)#Infectar al azar (9)#Curar a todos (0)#...#" +
                    string(round(lerp(1, o_control.virus_incubacion / 60, cerca_esp.incubacion / 9))) +
                    " min incubado#" +
                    string(round(lerp(1, o_control.virus_enfermedad / 60, cerca_esp.enfermedad / 9))) +
                    " min enfermo#" +
                    string(cerca_esp.poblacion) + " :población";
                if keyboard_check_pressed(ord('1')) {
                    cerca_esp.mortandad++;
                    if cerca_esp.mortandad &gt; 9 {
                        cerca_esp.mortandad = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('3')) {
                    cerca_esp.incubacion++;
                    if cerca_esp.incubacion &gt; 9 {
                        cerca_esp.incubacion = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('4')) {
                    cerca_esp.enfermedad++;
                    if cerca_esp.enfermedad &gt; 9 {
                        cerca_esp.enfermedad = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('2')) {
                    cerca_esp.transmision++;
                    if cerca_esp.transmision &gt; 9 {
                        cerca_esp.transmision = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('5')) {
                    switch objeto {
                        case 0: objeto = 36; break;
                        case 36: objeto = 168; break;
                        case 168: objeto = 125; break;
                        default: objeto = 0; break;
                    }
                }
                else if keyboard_check_pressed(ord('8')) {
                    cerca_esp.curatodos = 0;
                    if salud == 0 {
                        salud = s_current_time();
                        s_infectar_udp(idweb, 0);
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    cerca_esp.curatodos = 0;
                    var list = ds_list_create();
                    with o_usuario {
                        if salud == 0 and estaonline and objeto != 36 and objeto != 125 {
                            ds_list_add(list, id);
                        }
                    }
                    if ds_list_empty(list) {
                        with o_usuario {
                            if salud == 0 and objeto != 36 and objeto != 125 {
                                ds_list_add(list, id);
                            }
                        }
                    }
                    if !ds_list_empty(list) {
                        ds_list_shuffle(list);
                        var aux = ds_list_find_value(list, 0);
                        if aux.salud == 0 {
                            aux.salud = s_current_time();
                            s_infectar_udp(aux.idweb, 0);
                        }
                    }
                    ds_list_destroy(list);
                }
                else if keyboard_check_pressed(ord('0')) {
                    if cerca_esp.curatodos == 0 {
                        cerca_esp.curatodos = 1;
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 1;
                    }
                }
                break;
            
            case o_parabolico:
                comandos_gui = "CAÑÓN#Disparo (1)#Ángulo (3-, 2+)#Dirección (4-, 5+)#Fuerza (6-, 7+)" +
                    "#Aleatorio (8)#Escudo (9)";
                if keyboard_check_pressed(ord('1')) {
                    with cerca_esp {
                        s_tiro_parabolico(id, angulo, direction, fuerza, true);
                    }
                }
                else if keyboard_check(ord('2')) {
                    if cerca_esp.angulo &lt; 89 {
                        cerca_esp.angulo++;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check(ord('3')) {
                    if cerca_esp.angulo &gt; 0 {
                        cerca_esp.angulo--;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check(ord('4')) {
                    cerca_esp.direction--;
                    if cerca_esp.direction &lt; 0 {
                        cerca_esp.direction = 359;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check(ord('5')) {
                    cerca_esp.direction++;
                    if cerca_esp.direction &gt; 359 {
                        cerca_esp.direction = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check(ord('6')) {
                    if cerca_esp.fuerza &gt; 0 {
                        cerca_esp.fuerza--;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check(ord('7')) {
                    if cerca_esp.fuerza &lt; 255 {
                        cerca_esp.fuerza++;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('8')) {
                    with cerca_esp {
                        s_tiro_parabolico(id, irandom(89), irandom(359), irandom(255), true);
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    if objeto == 4 {
                        objeto = 0;
                    }
                    else {
                        objeto = 4;
                    }
                }
                break;
            
            case o_ajedrez:
                if cerca_esp.turno == 0 {
                    comandos_gui = "AJEDRÉZ#Jugar Negras (1)#Reiniciar (0)#..." +
                        "#comando: posFicha|posMover#posición: LetraNúmero#ejemplo: B6|C5" +
                        "#enroque: 000 Iz o 00 De";
                }
                else {
                    comandos_gui = "AJEDRÉZ#Jugar Blancas (1)#Reiniciar (0)#..." +
                        "#comando: posFicha|posMover#posición: LetraNúmero#ejemplo: B6|C5";
                }
                if keyboard_check_pressed(ord('1')) {
                    if dial_especial == -1 {
                        dial_especial = get_string_async("Escriba las coordenadas letra/número de una ficha, y las " +
                            "coordenadas de su destino, ejemplo: B6|C5", "");
                        tipo_especial = cerca_esp;
                        cerca_esp.miturno = cerca_esp.turno_max;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if cerca_esp.turno_max &gt; 1 {
                        s_ajedrez_reinicia(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_batalla:
                comandos_gui = "BATALLA#Disparo (1)#Reiniciar (0)";
                if keyboard_check_pressed(ord('1')) {
                    if dial_especial == -1 and s_batalla_estado() != 2 {
                        dial_especial = get_string_async("Escriba las coordenadas letra/número donde desea disparar" +
                            ", ejemplo: B6", "");
                        tipo_especial = cerca_esp;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                   s_batalla_ini(cerca_esp);
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1; 
                    if s_batalla_estado() != 0 {
                        var btll = instance_furthest(cerca_esp.x, cerca_esp.y, o_batalla);
                        s_batalla_ini(btll);
                        btll.fecha = s_current_time();
                        btll.reloj_sinc = 1;
                    }
                    s_batalla_ficha();
                }
                break;
            
            case o_reloj:
                comandos_gui = "RELOJ#" + date_datetime_string(date_inc_hour(date_current_datetime(), -5));
                break;
            
            case o_univalle:
                comandos_gui = "UNIVALLE#UVV v" + string(m_version) + "#Web oficial (1)";
                if keyboard_check_pressed(ord('1')) {
                    execute_shell_simple("https://www.univalle.edu.co");
                }
                break;
            
            case o_omwekiatl:
                comandos_gui = "OMWEKIATL#Web juegos (1)#Web links (2)#...#creador, contacto:#ojorcio@gmail.com";
                if keyboard_check_pressed(ord('1')) {
                    execute_shell_simple("https://omwekiatl.itch.io/");
                }
                else if keyboard_check_pressed(ord('2')) {
                    execute_shell_simple("https://linktr.ee/omwekiatl");
                }
                break;
            
            case o_gym:
                comandos_gui = "GIMNASIO#Quitar objeto (0)";
                if keyboard_check_pressed(ord('0')) {
                    objeto = 0;
                }
                break;
            
            case o_examen:
                var pre = max(0, ds_list_size(cerca_esp.preguntas) - 1);
                var nts = "???";
                for (var i = 0; i &lt; ds_list_size(cerca_esp.estudiantes); i++) {
                    if ds_list_find_value(cerca_esp.estudiantes, i) == idweb {
                        nts = string(round((ds_list_find_value(cerca_esp.notas, i) / pre) * 50) / 10);
                    }
                }
                comandos_gui = "EXÁMEN#Responder " + string(pre) + " preguntas (1)#Exportar resultados (2)#Exportar ejemplo (8)" +
                    "#Importar preguntas (9)#Limpiar preguntas (0)#...#notas &gt; 4.333#notas &gt; 3.666#notas &gt; 3" +
                    "#notas &gt; 2#notas &gt; 0#...#" + nts + " :su nota#" + string(o_control.preguntas_max) + " :preguntas max";
                if keyboard_check_pressed(ord('1')) {
                    if pre != 0 and ds_list_find_index(cerca_esp.estudiantes, idweb) == -1 {
                        if show_question(ds_list_find_value(cerca_esp.preguntas, 0)) {
                            var pp = 0;
                            var nn, rr;
                            for (var i = 1; i &lt;= pre; i++) {
                                nn = ds_list_find_value(cerca_esp.preguntas, i);
                                rr = string_char_at(nn, 1) == "V";
                                nn = string_copy(nn, 4, string_length(nn) - 3);
                                if show_question(nn) {
                                    if rr {
                                        pp++;
                                    }
                                }
                                else {
                                    if !rr {
                                        pp++;
                                    }
                                }
                            }
                            ds_list_add(cerca_esp.estudiantes, idweb);
                            ds_list_add(cerca_esp.notas, pp);
                            s_notas(cerca_esp);
                            cerca_esp.fecha = s_current_time();
                            cerca_esp.reloj_sinc = 0;
                        }
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if ds_list_size(cerca_esp.notas) != 0 {
                        var fff = get_save_filename("TEXTO|*.txt", "res_examen");
                        if fff != "" {
                            var f = file_text_open_write(fff);
                            file_text_write_string(f, "Resultados de exámen Univalle Virtual " +
                                date_datetime_string(date_inc_hour(date_current_datetime(), -5)));
                            file_text_writeln(f);
                            file_text_writeln(f);
                            file_text_write_string(f, ds_list_find_value(cerca_esp.preguntas, 0));
                            file_text_writeln(f);
                            file_text_writeln(f);
                            file_text_write_string(f, string(ds_list_size(cerca_esp.notas)) + ": Respuestas totales");
                            file_text_writeln(f);
                            file_text_write_string(f, string(pre) + ": Número de preguntas");
                            file_text_writeln(f);
                            file_text_writeln(f);
                            for (var i = 0; i &lt; ds_list_size(cerca_esp.notas); i++) {
                                file_text_write_string(f, string(round((ds_list_find_value(cerca_esp.notas, i) / pre) * 50) / 10) +
                                    ": " + s_busca_nombre(ds_list_find_value(cerca_esp.estudiantes, i)));
                                file_text_writeln(f);
                            }
                            file_text_close(f);
                        }
                    }
                }
                else if keyboard_check_pressed(ord('8')) {
                    var fff = get_save_filename("TEXTO|*.txt", "ej_examen");
                    if fff != "" {
                        var f = file_text_open_write(fff);
                        file_text_write_string(f, "Exámen de ejemplo, por Omwekiatl");
                        file_text_writeln(f);
                        file_text_write_string(f, "F: ¿Están en el Olimpo los campos Elíseos? (estos guardan las almas de los héroes)");
                        file_text_writeln(f);
                        file_text_write_string(f, "V: ¿La energía eléctrica que llega a los hogares oscila entre polos opuestos?");
                        file_text_writeln(f);
                        file_text_write_string(f, "V: ¿La estética SteamPunk se inspira fuertemente en la revolución industrial?");
                        file_text_writeln(f);
                        file_text_write_string(f, "F: ¿Es el átomo la partícula más pequeña del universo?");
                        file_text_writeln(f);
                        file_text_close(f);
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    var fff = get_open_filename("TEXTO|*.txt", "");
                    if fff != "" {
                        ds_list_clear(cerca_esp.preguntas);
                        ds_list_clear(cerca_esp.estudiantes);
                        ds_list_clear(cerca_esp.notas);
                        var f = file_text_open_read(fff);
                        var n;
                        var fre = 0;
                        while !file_text_eof(f) {
                            n = file_text_read_string(f);
                            if string_length(n) &gt; 3 {
                                ds_list_add(cerca_esp.preguntas, n);
                                fre++;
                                if fre &gt; o_control.preguntas_max {
                                    break;
                                }
                            }
                            file_text_readln(f);
                        }
                        file_text_close(f);
                        s_notas(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if ds_list_size(cerca_esp.preguntas) != 0 or ds_list_size(cerca_esp.notas) != 0 {
                        ds_list_clear(cerca_esp.preguntas);
                        ds_list_clear(cerca_esp.estudiantes);
                        ds_list_clear(cerca_esp.notas);
                        s_notas(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_encuesta:
                var pre = max(0, ds_list_size(cerca_esp.preguntas) - 1);
                comandos_gui = "ENCUESTA#Responder " + string(pre) + " preguntas (1)#Exportar resultados (2)#Exportar ejemplo (8)" +
                    "#Importar preguntas (9)#Limpiar preguntas (0)#...#auto-incluye género de ávatar#" +
                    string(o_control.encuesta_max) + " :preguntas max";
                if keyboard_check_pressed(ord('1')) {
                    if pre != 0 and ds_list_find_index(cerca_esp.estudiantes, idweb) == -1 {
                        if show_question(ds_list_find_value(cerca_esp.preguntas, 0)) {
                            var nn;
                            for (var i = 1; i &lt;= pre; i++) {
                                if show_question(ds_list_find_value(cerca_esp.preguntas, i)) {
                                    nn = ds_list_find_value(cerca_esp.respuestas, i - 1);
                                    ds_list_replace(cerca_esp.respuestas, i - 1, nn + 1);
                                }
                            }
                            cerca_esp.genero += genero;
                            ds_list_add(cerca_esp.estudiantes, idweb);
                            s_respuestas(cerca_esp);
                            cerca_esp.fecha = s_current_time();
                            cerca_esp.reloj_sinc = 0;
                        }
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if ds_list_size(cerca_esp.estudiantes) != 0 {
                        var fff = get_save_filename("TEXTO|*.txt", "res_encuesta");
                        if fff != "" {
                            var f = file_text_open_write(fff);
                            file_text_write_string(f, "Resultados de encuesta Univalle Virtual " +
                                date_datetime_string(date_inc_hour(date_current_datetime(), -5)));
                            file_text_writeln(f);
                            file_text_writeln(f);
                            file_text_write_string(f, ds_list_find_value(cerca_esp.preguntas, 0));
                            file_text_writeln(f);
                            file_text_writeln(f);
                            file_text_write_string(f, string(ds_list_size(cerca_esp.estudiantes)) + ": Respuestas totales");
                            file_text_writeln(f);
                            file_text_write_string(f, string(cerca_esp.genero) + ": Usuarios de género masculino");
                            file_text_writeln(f);
                            file_text_writeln(f);
                            for (var i = 1; i &lt;= pre; i++) {
                                file_text_write_string(f, string(ds_list_find_value(cerca_esp.respuestas, i - 1)) + ": " +
                                    ds_list_find_value(cerca_esp.preguntas, i));
                                file_text_writeln(f);
                            }
                            file_text_close(f);
                        }
                    }
                }
                else if keyboard_check_pressed(ord('8')) {
                    var fff = get_save_filename("TEXTO|*.txt", "ej_encuesta");
                    if fff != "" {
                        var f = file_text_open_write(fff);
                        file_text_write_string(f, "Encuesta de ejemplo, por Omwekiatl");
                        file_text_writeln(f);
                        file_text_write_string(f, "¿Su nivel de inglés le permite entender películas en dicho idioma?");
                        file_text_writeln(f);
                        file_text_write_string(f, "¿Utiliza usted la bicicleta como principal medio de transporte?");
                        file_text_writeln(f);
                        file_text_write_string(f, "¿Tiene usted una o más mascotas en casa? (perros o gatos)");
                        file_text_writeln(f);
                        file_text_write_string(f, "¿Considera su alimentación como vegetariana o casi vegetariana?");
                        file_text_writeln(f);
                        file_text_close(f);
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    var fff = get_open_filename("TEXTO|*.txt", "");
                    if fff != "" {
                        ds_list_clear(cerca_esp.preguntas);
                        ds_list_clear(cerca_esp.estudiantes);
                        ds_list_clear(cerca_esp.respuestas);
                        cerca_esp.genero = 0;
                        for (var i = 0; i &lt; o_control.encuesta_max; i++) {
                            ds_list_add(cerca_esp.respuestas, 0);
                        }
                        var f = file_text_open_read(fff);
                        var n;
                        var fre = 0;
                        while !file_text_eof(f) {
                            n = file_text_read_string(f);
                            if n != "" {
                                ds_list_add(cerca_esp.preguntas, n);
                                fre++;
                                if fre &gt; o_control.encuesta_max {
                                    break;
                                }
                            }
                            file_text_readln(f);
                        }
                        file_text_close(f);
                        s_respuestas(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if ds_list_size(cerca_esp.preguntas) != 0 or ds_list_size(cerca_esp.estudiantes) != 0 {
                        ds_list_clear(cerca_esp.preguntas);
                        ds_list_clear(cerca_esp.estudiantes);
                        ds_list_clear(cerca_esp.respuestas);
                        cerca_esp.genero = 0;
                        for (var i = 0; i &lt; o_control.encuesta_max; i++) {
                            ds_list_add(cerca_esp.respuestas, 0);
                        }
                        s_respuestas(cerca_esp);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_votacion:
                comandos_gui = "VOTACIÓN#Si (1)#No (2)#Modificar (9)#Limpiar (0)";
                if keyboard_check_pressed(ord('1')) {
                    for (var i = 0; i &lt; ds_list_size(cerca_esp.derecha); i++) {
                        if ds_list_find_value(cerca_esp.derecha, i) == idweb {
                            ds_list_delete(cerca_esp.derecha, i);
                            break;
                        }
                    }
                    var ok = true;
                    for (var i = 0; i &lt; ds_list_size(cerca_esp.izquierda); i++) {
                        if ds_list_find_value(cerca_esp.izquierda, i) == idweb {
                            ok = false;
                            break;
                        }
                    }
                    if ok {
                        ds_list_add(cerca_esp.izquierda, idweb);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0.5;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    for (var i = 0; i &lt; ds_list_size(cerca_esp.izquierda); i++) {
                        if ds_list_find_value(cerca_esp.izquierda, i) == idweb {
                            ds_list_delete(cerca_esp.izquierda, i);
                            break;
                        }
                    }
                    var ok = true;
                    for (var i = 0; i &lt; ds_list_size(cerca_esp.derecha); i++) {
                        if ds_list_find_value(cerca_esp.derecha, i) == idweb {
                            ok = false;
                            break;
                        }
                    }
                    if ok {
                        ds_list_add(cerca_esp.derecha, idweb);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0.5;
                    }
                }
                else if keyboard_check_pressed(ord('9')) {
                    if dial_especial == -1 {
                        dial_especial = get_string_async("Escriba la pregunta para votación", cerca_esp.pregunta);
                        tipo_especial = cerca_esp;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    if ds_list_size(cerca_esp.derecha) != 0 or ds_list_size(cerca_esp.izquierda) != 0 or
                            cerca_esp.pregunta != "" {
                        ds_list_clear(cerca_esp.derecha);
                        ds_list_clear(cerca_esp.izquierda);
                        cerca_esp.pregunta = "";
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                break;
            
            case o_molino:
                comandos_gui = "CLIMA#Llueve (1)#Seco (2)#Sombrilla (3)";
                var opi = o_virtual_molino.opinador;
                if keyboard_check_pressed(ord('1')) {
                    var ok = false;
                    for (var i = 0; i &lt; o_control.cantidad_opiniones; i++) {
                        if ds_grid_get(opi, i, 0) == idweb {
                            ok = true;
                            ds_grid_set(opi, i, 1, s_current_time());
                            ds_grid_set(opi, i, 2, 1);
                            break;
                        }
                    }
                    if !ok {
                        var minn = s_current_time() + 1;
                        var nn = 0;
                        var pp;
                        for (var i = 0; i &lt; o_control.cantidad_opiniones; i++) {
                            pp = ds_grid_get(opi, i, 1);
                            if pp &lt; minn {
                                minn = pp;
                                nn = i;
                            }
                        }
                        ds_grid_set(opi, nn, 0, idweb);
                        ds_grid_set(opi, nn, 1, s_current_time());
                        ds_grid_set(opi, nn, 2, 1);
                    }
                    o_virtual_molino.fecha = s_current_time();
                    o_virtual_molino.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('2')) {
                    var ok = false;
                    for (var i = 0; i &lt; o_control.cantidad_opiniones; i++) {
                        if ds_grid_get(opi, i, 0) == idweb {
                            ok = true;
                            ds_grid_set(opi, i, 1, s_current_time());
                            ds_grid_set(opi, i, 2, -1);
                            break;
                        }
                    }
                    if !ok {
                        var minn = s_current_time() + 1;
                        var nn = 0;
                        var pp;
                        for (var i = 0; i &lt; o_control.cantidad_opiniones; i++) {
                            pp = ds_grid_get(opi, i, 1);
                            if pp &lt; minn {
                                minn = pp;
                                nn = i;
                            }
                        }
                        ds_grid_set(opi, nn, 0, idweb);
                        ds_grid_set(opi, nn, 1, s_current_time());
                        ds_grid_set(opi, nn, 2, -1);
                    }
                    o_virtual_molino.fecha = s_current_time();
                    o_virtual_molino.reloj_sinc = 1;
                }
                else if keyboard_check_pressed(ord('3')) {
                    if objeto == 162 {
                        objeto = 0;
                    }
                    else {
                        objeto = 162;
                    }
                }
                break;
            
            case o_alfombra:
                var ww = ds_grid_width(cerca_esp.imagen);
                var hh = ds_grid_height(cerca_esp.imagen);
                comandos_gui = "ALFOMBRA#Importar imagen (1)#Pinturas (2)#Limpiar imagen (0)#..." +
                    "#talla " + string(ww) + "," + string(hh) + " px#formatos PNG, JPG, BMP";
                if keyboard_check_pressed(ord('1')) {
                    var fff = get_open_filename("IMAGEN|*.png;*.jpg;*.bmp", "");
                    if fff != "" {
                        var spr = sprite_add(fff, 0, false, false, 0, 0);
                        var srf = surface_create(ww, hh);
                        surface_set_target(srf);
                        draw_clear_alpha(c_white, 0);
                        draw_sprite_ext(spr, 0, 0, 0,
                            (ww + 1) / sprite_get_width(spr),
                            (hh + 1) / sprite_get_height(spr),
                            0, c_white, 1);
                        surface_reset_target();
                        var pix;
                        for (var w = 0; w &lt; ww; w++) {
                            for (var h = 0; h &lt; hh; h++) {
                                pix = surface_getpixel_ext(srf, w, h);
                                ds_grid_set(cerca_esp.transp, w, h, ((pix &gt;&gt; 24) &amp; 255) / 255);
                                ds_grid_set(cerca_esp.imagen, w, h, make_colour_rgb(
                                    pix &amp; 255, (pix &gt;&gt; 8) &amp; 255, (pix &gt;&gt; 16) &amp; 255));
                            }
                        }
                        sprite_delete(spr);
                        surface_free(srf);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    var ww = ds_grid_width(cerca_esp.imagen);
                    var hh = ds_grid_height(cerca_esp.imagen);
                    if ds_grid_get_sum(cerca_esp.imagen, 0, 0, ww - 1, hh - 1) != 0 {
                        ds_grid_clear(cerca_esp.imagen, c_black);
                        ds_grid_clear(cerca_esp.transp, 0);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    objeto++;
                    if objeto &gt; 72 {
                        objeto = 0;
                    }
                    else if objeto &lt; 69 {
                        objeto = 69;
                    }
                }
                break;
            
            case o_azar:
                if cerca_esp.perfil_azar == noone {
                    comandos_gui = "AZAR#Ganador (1)#Dado (2)#Ruleta (3)#Objeto dado (4)" +
                        "#...#??? :gana";
                }
                else {
                    comandos_gui = "AZAR#Ganador (1)#Dado (2)#Ruleta (3)#Objeto dado (4)" +
                        "#...#" + cerca_esp.perfil_azar.nombre + " :gana";
                }
                if keyboard_check_pressed(ord('1')) {
                    if s_current_time() - cerca_esp.fecha &gt; 10 {
                        cerca_esp.ganador = 0;
                        cerca_esp.perfil_azar = noone;
                        var list = ds_list_create();
                        with o_usuario {
                            if estaonline {
                                ds_list_add(list, idweb);
                            }
                        }
                        if ds_list_size(list) &gt; 1 {
                            ds_list_shuffle(list);
                            cerca_esp.ganador = ds_list_find_value(list, 0);
                        }
                        if cerca_esp.ganador == 0 {
                            ds_list_clear(list);
                            with o_usuario {
                                ds_list_add(list, idweb);
                            }
                            if !ds_list_empty(list) {
                                ds_list_shuffle(list);
                                cerca_esp.ganador = ds_list_find_value(list, 0);
                            }
                        }
                        ds_list_destroy(list);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('2')) {
                    if s_current_time() - cerca_esp.fecha &gt; 1 {
                        cerca_esp.dado = irandom_range(1, 6);
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('3')) {
                    if s_current_time() - cerca_esp.fecha &gt; 5 {
                        cerca_esp.numerito = string(irandom(9)) + string(irandom(9)) + string(irandom(9));
                        cerca_esp.fecha = s_current_time();
                        cerca_esp.reloj_sinc = 0;
                    }
                }
                else if keyboard_check_pressed(ord('4')) {
                    if objeto == 0 {
                        objeto = 31;
                    }
                    else {
                        objeto = 0;
                    }
                }
                break;
            
            case o_ciclas:
                comandos_gui = "CICLAS#Tomar vehículo (1)#Dejar vehículo (0)";
                if keyboard_check_pressed(ord('1')) {
                    objeto++;
                    if objeto &gt; 155 {
                        objeto = 151;
                    }
                    else if objeto &lt; 151 {
                        objeto = 151;
                    }
                }
                else if keyboard_check_pressed(ord('0')) {
                    objeto = 0;
                }
                break;
            
            case o_anatomia:
                comandos_gui = "RAYOS-X#Intensidad (1)#...#";
                switch cerca_esp.intensidad {
                    case 0: comandos_gui += "Músculos"; break;
                    case 1: comandos_gui += "Huesos"; break;
                    case 2: comandos_gui += "Órganos"; break;
                }
                if keyboard_check_pressed(ord('1')) {
                    cerca_esp.intensidad++;
                    if cerca_esp.intensidad &gt; 2 {
                        cerca_esp.intensidad = 0;
                    }
                    cerca_esp.fecha = s_current_time();
                    cerca_esp.reloj_sinc = 1;
                }
                break;
            
            case o_sex:
                comandos_gui = "MATORRAL#Protección (1)#...#trae aquí a tu amante";
                if keyboard_check_pressed(ord('1')) {
                    if objeto == 0 {
                        objeto = 169;
                    }
                    else {
                        objeto = 0;
                    }
                }
                break;
        }
    }
    
    // agarrar pantalla completa
    if keyboard_check_pressed(vk_alt) {
        if pantalla == noone {
            pantalla = cerca_esp;
        }
        else {
            pantalla = noone;
        }
    }
    
    // ingresar nueva IP
    if keyboard_check_pressed(vk_f9) {
        if dial_especial == -1 {
            dial_especial = get_string_async("Digite una IPv4 personalizada (192.168.1.?)", "");
            tipo_especial = o_antena.id;
        }
    }
    
    // ir a web de widget
    var visiteweb = false;
    if keyboard_check_pressed(vk_f5) {
        if papelote != "" {
            var txt = s_busca_url(papelote);
            if txt != "" {
                execute_shell_simple(txt);
            }
        }
        else if cerca_esp != noone {
            var txt = "";
            switch cerca_esp.object_index {
                case o_diccionario:
                    txt = ds_list_find_value(cerca_esp.infos, cerca_esp.aguja);
                    break;
                case o_pergamino:
                    txt = cerca_esp.texto;
                    break;
                case o_votacion:
                    txt = cerca_esp.pregunta;
                    break;
            }
            txt = s_busca_url(txt);
            if txt != "" {
                execute_shell_simple(txt);
            }
        }
    }
    
    // buscar usuario cercano para ver su perfil
    if en_mira == noone {
        var cercano = ds_priority_create();
        var vp = o_control.ver_perfil;
        var yo = id;
        with o_usuario {
            if id != yo and point_in_rectangle(x, y,
                    yo.x - vp, yo.y - vp, yo.x + vp, yo.y + vp) {
                ds_priority_add(cercano, id, point_distance(x, y, yo.x, yo.y));
            }
        }
        if !ds_priority_empty(cercano) {
            var eles = ds_priority_find_min(cercano);
            if point_distance(eles.x, eles.y, yo.x, yo.y) &lt;= vp {
                en_mira = eles;
            }
        }
        ds_priority_destroy(cercano);
    }
    
    // comandos de perfiles y de jugabilidad
    if comandos_gui == "" {
        var kri = collision_circle(x, y, o_control.cerca_especial, o_kreature, true, false);
        if en_mira != noone { // otro usuario
            if en_mira.bloqueado {
                comandos_gui = "PERFIL#Amigo (1)#Colega (2)#Amante (3)#Secreto (4)" +
                    "#Ver biografía (6)#Ver web (7)#Desbloquear (9)#Nadie (0)" +
                    "#...#Secreto, inicie#dialogo con ($)";
            }
            else {
                comandos_gui = "PERFIL#Amigo (1)#Colega (2)#Amante (3)#Secreto (4)" +
                    "#Ver biografía (6)#Ver web (7)#Bloquear (9)#Nadie (0)" +
                    "#...#Secreto, inicie#dialogo con ($)";
            }
            var agregar = -1;
            if keyboard_check_pressed(ord('4')) { agregar = m_cont_secreto; }
            else if keyboard_check_pressed(ord('2')) { agregar = m_cont_colega; }
            else if keyboard_check_pressed(ord('1')) { agregar = m_cont_amigo; }
            else if keyboard_check_pressed(ord('3')) { agregar = m_cont_love; }
            if agregar != -1 {
                // ver si ya esta y lo va a cambiar
                var ok = false;
                for (var c = 0; c &lt; o_control.total_contactos; c++) {
                    if amigo[c] == en_mira.idweb {
                        amigi[c] = agregar;
                        ok = true;
                        break;
                    }
                }
                if !ok {
                    // ver espacio disponible para agregarlo
                    for (var c = 0; c &lt; o_control.total_contactos; c++) {
                        if amigo[c] == 0 {
                            amigo[c] = en_mira.idweb;
                            amigi[c] = agregar;
                            break;
                        }
                    }
                }
            }
            else if keyboard_check_pressed(ord('6')) {
                papelote = en_mira.biografia;
            }
            else if keyboard_check_pressed(ord('7')) {
                if !visiteweb and s_url(en_mira.contacto) {
                    dial_usr_web = show_question_async("Desea ir a: " + en_mira.contacto);
                }
            }
            else if keyboard_check_pressed(ord('9')) {
                if en_mira.bloqueado {
                    en_mira.bloqueado = false;
                    for (var b = 0; b &lt; o_control.total_bloqueados; b++) {
                        if enemigo[b] == en_mira.idweb {
                            enemigo[b] = 0;
                            break;
                        }
                    }
                }
                else {
                    for (var b = 0; b &lt; o_control.total_bloqueados; b++) {
                        if enemigo[b] == 0 {
                            enemigo[b] = en_mira.idweb;
                            en_mira.bloqueado = true;
                            break;
                        }
                    }
                }
            }
            else if keyboard_check_pressed(ord('0')) {
                for (var c = 0; c &lt; o_control.total_contactos; c++) {
                    if amigo[c] == en_mira.idweb {
                        amigo[c] = 0;
                        break;
                    }
                }
            }
        }
        else if data_bicho != "" { // informacion bicho
            comandos_gui = data_bicho;
        }
        else if kri != noone { // criatura
            var nnn = "???";
            switch kri.tipok {
                case 0: nnn = "Mascota UV"; break;
                case 1: nnn = "Perro"; break;
                case 2: nnn = "Gato"; break;
                case 3: nnn = "Toro"; break;
                case 4: nnn = "Esqueleto"; break;
                case 5: nnn = "Robot"; break;
                case 6: nnn = "Gigante"; break;
                case 7: nnn = "Fantasma"; break;
                case 8: nnn = "Enano"; break;
                case 9: nnn = "Iguana"; break;
                case 10: nnn = "Juguete"; break;
                case 11: nnn = "Guardia"; break;
                case 12: nnn = "Obrero"; break;
                case 13: nnn = "Tulpa"; break;
                case 14: nnn = "Ninfa"; break;
                case 15: nnn = "SMAD"; break;
            }
            comandos_gui = "ENTIDAD#Cambiar tipo (8)#...#" + nnn;
            if keyboard_check_pressed(ord('8')) and kri.tipok != 0 {
                kri.tipok++;
                if kri.tipok &gt; sprite_get_number(d_kreature) / 4 - 1 {
                    kri.tipok = 1;
                }
                kri.metax = kri.posx;
                kri.metay = kri.posy;
                kri.fecha = s_current_time();
                kri.reloj_sinc = 1;
            }
        }
        else { // comandos propios
            comandos_gui = "MANEJO#Seguir mouse (F), Caminar (W,A,S,D)#Seguir/Halar (T), Reaparecer (F1)" +
                "#Dialogar (Enter), Pancarta (Borrar)#Expresiónes (Y,U,I,O,P,G,H,J,K,L)" +
                "#Emociónes (Q), Especial (Espacio)#Abrir link (F5), Ampliar (Alt)" +
                "#Dialogo a hashtag inicia con (%)#Dialogo secreto inicia con ($)";
        }
    }
    
    // mensajote en cartel
    if keyboard_check_pressed(vk_backspace) and dial_panfleto == -1 {
        dial_panfleto = get_string_async("Escriba su panfleto", panfleto);
    }
    
    // hablar
    if keyboard_check_pressed(vk_enter) {
        modo_chat = true;
        keyboard_string = "";
    }
    
    // ejecutar expresion sonora
    if expresion == 0 {
        if keyboard_check_pressed(vk_numpad0) or keyboard_check_pressed(ord('U')) { // coqueteo
            expresion = 1; reloj_expresion = o_control.expresion;
            // activar coqueteo en pareja
            if en_mira != noone {
                if en_mira.expresion == 0 and point_distance(x, y, en_mira.x, en_mira.y) &lt; o_control.ver_perfil * 2 {
                    var ok = false;
                    for (var c = 0; c &lt; o_control.total_contactos; c++) {
                        if en_mira.amigo[c] == idweb and en_mira.amigi[c] == m_cont_love {
                            ok = true;
                            break;
                        }
                    }
                    if ok {
                        en_mira.expresion = 1; en_mira.reloj_expresion = o_control.expresion; en_mira.expresion_ant = 1;
                    }
                }
            }
        }
        else if keyboard_check_pressed(vk_numpad1) or keyboard_check_pressed(ord('O')) { // idea
            expresion = 2; reloj_expresion = o_control.expresion; }
        else if keyboard_check_pressed(vk_numpad2) or keyboard_check_pressed(ord('Y')) { // bien si
            expresion = 3; reloj_expresion = o_control.expresion; }
        else if keyboard_check_pressed(vk_numpad3) or keyboard_check_pressed(ord('K')) { // mal no
            expresion = 4; reloj_expresion = o_control.expresion; }
        else if keyboard_check_pressed(vk_numpad4) or keyboard_check_pressed(ord('I')) { // insulto
            expresion = 5; reloj_expresion = o_control.expresion; }
        else if keyboard_check_pressed(vk_numpad5) or keyboard_check_pressed(ord('P')) { // alza mano
            expresion = 6; reloj_expresion = o_control.expresion; }
        else if keyboard_check_pressed(vk_numpad6) or keyboard_check_pressed(ord('H')) { // saludo
            expresion = 7; reloj_expresion = o_control.expresion; }
        else if keyboard_check_pressed(vk_numpad7) or keyboard_check_pressed(ord('G')) { // grito
            expresion = 8; reloj_expresion = o_control.expresion; }
        else if keyboard_check_pressed(vk_numpad8) or keyboard_check_pressed(ord('L')) { // llama seguir
            expresion = 9; reloj_expresion = o_control.expresion; }
        else if keyboard_check_pressed(vk_numpad9) or keyboard_check_pressed(ord('J')) { // risas
            expresion = 10; reloj_expresion = o_control.expresion; }
    }
    
    // buscar a quien engancharse
    if keyboard_check_pressed(ord('T')) {
        if seguir_halar != noone {
            seguir_halar = noone;
        }
        else {
            seguir_halar = collision_circle(x, y, o_control.dist_seghala, o_usuario, true, true);
            if seguir_halar != noone {
                if seguir_halar.estaonline {
                    var buf = s_hala_usuario(seguir_halar.idweb);
                    s_udp_send(buf, "");
                }
            }
        }
    }
    
    // cambiar de emocion
    if keyboard_check_pressed(ord('Q')) {
        emocion++;
        if emocion &gt;= sprite_get_number(d_emocion) {
            emocion = 0;
        }
    }
    
    // modo andar automaticamente
    if keyboard_check_pressed(ord('F')) {
        andar_mouse = !andar_mouse;
    }
    
    // hacer respawn
    if keyboard_check_pressed(vk_f1) {
        reloj_respawn = o_control.time_respawn;
    }
    else if reloj_respawn != 0 {
        reloj_respawn -= dlt;
        if reloj_respawn &lt;= 0 {
            reloj_respawn = 0;
            var pos = s_pnt_respawn();
            posx = pos[0];
            posy = pos[1];
            x = posx;
            y = posy;
        }
        else if keyboard_check_pressed(vk_anykey) {
            reloj_respawn = 0;
        }
    }
    
    // efectos especiales segun objeto
    if panfleto == "" {
        switch objeto {
            
            case 0: // no tiene nada, intenta tomar algo
                if en_mira != noone and keyboard_check_pressed(vk_space) {
                if point_distance(x, y, en_mira.x, en_mira.y) &lt; o_control.ver_perfil * 2 {
                    switch en_mira.objeto {
                        case 140: objeto = 141; break; // vino
                        case 144: objeto = 61; break; // corazon
                        case 138: objeto = 29; break; // agua
                        case 33: objeto = 127; break; // carta
                        case 139: objeto = 14; break; // bomba
                        case 34: objeto = 23; break; // banano
                        case 35: objeto = 106; break; // billete
                        case 172: objeto = 177; break; // comida
                        case 167: objeto = 166; break; // cerveza
                        case 165: objeto = 22; break; // pizza
                        case 60: // cualquier cosa
                            while objeto == 0 or (objeto &gt;= 178 and objeto &lt;= 235) {
                                objeto = irandom(sprite_get_number(d_objeto) - 1);
                                s_objeto_prohibido(id, true);
                            }
                            break;
                        case 80: // tomar gamepad de amigo
                            var ok = false;
                            for (var c = 0; c &lt; o_control.total_contactos; c++) {
                                if en_mira.amigo[c] == idweb and en_mira.amigi[c] == m_cont_amigo {
                                    ok = true;
                                    break;
                                }
                            }
                            if ok {
                                var buf = s_header(56, 4);
                                buffer_write(buf, buffer_u16, en_mira.idweb);
                                buffer_write(buf, buffer_u16, 0);
                                s_udp_send(buf, "");
                                objeto = en_mira.objeto;
                                en_mira.objeto = 0;
                            }
                            break;
                    }
                } }
                break;
            
            case 130: case 131: case 132: case 133: // disparos
                if keyboard_check(vk_space) or mouse_check_button(mb_left) {
                    if reloj_recarga == 0 and reloj_cadencia == 0 {
                        s_crea_bala(x, y, point_direction(x, y, mouse_x, mouse_y),
                            idweb, objeto - 130, true);
                        reloj_cadencia = o_control.cadencia_bala;
                        municion--;
                        if municion &lt;= 0 {
                            reloj_recarga = o_control.recarga_bala;
                        }
                    }
                }
                break;
            
            case 61: case 127: case 105: // dar objeto una vez
                if en_mira != noone and keyboard_check_pressed(vk_space) {
                if point_distance(x, y, en_mira.x, en_mira.y) &lt; o_control.ver_perfil * 2 {
                    if en_mira.objeto == 0 {
                        var buf = s_header(56, 4);
                        buffer_write(buf, buffer_u16, en_mira.idweb);
                        buffer_write(buf, buffer_u16, objeto);
                        s_udp_send(buf, "");
                        en_mira.objeto = objeto;
                        objeto = 0;
                    }
                } }
                break;
            
            case 106: // cambia billete por objeto
                if en_mira != noone and keyboard_check_pressed(vk_space) {
                if point_distance(x, y, en_mira.x, en_mira.y) &lt; o_control.ver_perfil * 2 {
                    var obj = en_mira.objeto;
                    if s_objeto_madre(obj) or obj == 0 or obj == 14 or obj == 61 {
                        break;
                    }
                    else {
                        objeto = en_mira.objeto;
                        var buf = s_header(56, 4);
                        buffer_write(buf, buffer_u16, en_mira.idweb);
                        buffer_write(buf, buffer_u16, 106);
                        s_udp_send(buf, "");
                        en_mira.objeto = 106;
                    }
                } }
                break;
            
            case 93: // duplicar cartelera a colega
                if en_mira != noone and keyboard_check_pressed(vk_space) {
                if point_distance(x, y, en_mira.x, en_mira.y) &lt; o_control.ver_perfil * 2 {
                    if en_mira.objeto == 0 {
                        var ok = false;
                        for (var c = 0; c &lt; o_control.total_contactos; c++) {
                            if en_mira.amigo[c] == idweb and en_mira.amigi[c] == m_cont_colega {
                                ok = true;
                                break;
                            }
                        }
                        if ok {
                            var buf = s_header(56, 4);
                            buffer_write(buf, buffer_u16, en_mira.idweb);
                            buffer_write(buf, buffer_u16, objeto);
                            s_udp_send(buf, "");
                            en_mira.objeto = objeto;
                        }
                    }
                } }
                break;
            
            case 80: // pasar gamepad a amigo
                if en_mira != noone and keyboard_check_pressed(vk_space) {
                if point_distance(x, y, en_mira.x, en_mira.y) &lt; o_control.ver_perfil * 2 {
                    if en_mira.objeto == 0 {
                        var ok = false;
                        for (var c = 0; c &lt; o_control.total_contactos; c++) {
                            if en_mira.amigo[c] == idweb and en_mira.amigi[c] == m_cont_amigo {
                                ok = true;
                                break;
                            }
                        }
                        if ok {
                            var buf = s_header(56, 4);
                            buffer_write(buf, buffer_u16, en_mira.idweb);
                            buffer_write(buf, buffer_u16, objeto);
                            s_udp_send(buf, "");
                            en_mira.objeto = objeto;
                            objeto = 0;
                        }
                    }
                } }
                break;
            
            case 99: case 100: case 101: // pipati
                if en_mira != noone {
                if point_distance(x, y, en_mira.x, en_mira.y) &lt; o_control.ver_perfil {
                    var obj = en_mira.objeto;
                    if (objeto == 99 and obj == 101) or
                            (objeto == 100 and obj == 99) or
                            (objeto == 101 and obj == 100) {
                        var buf = s_header(56, 4);
                        buffer_write(buf, buffer_u16, en_mira.idweb);
                        buffer_write(buf, buffer_u16, 0);
                        s_udp_send(buf, "");
                        en_mira.objeto = 0;
                    }
                } }
                break;
            
            case 148: // camara
                if keyboard_check_pressed(vk_space) {
                    if keyboard_check(vk_control) {
                        if reloj_vercorreo == 0 {
                            reloj_vercorreo = 3;
                            s_audio(x, y, a_camara, true);
                        }
                    }
                    else if en_mira != noone and !keyboard_check(vk_shift) {
                        if point_distance(x, y, en_mira.x, en_mira.y) &lt; view_hview[0] * 0.5 {
                            var fff = get_save_filename("FOTO|*.png", "usr_" + en_mira.nombre);
                            if fff != "" {
                                s_foto_avatar(fff, en_mira);
                                if reloj_vercorreo == 0 {
                                    reloj_vercorreo = 3;
                                    s_audio(x, y, a_camara, true);
                                }
                            }
                        }
                        else {
                            var fff = get_save_filename("IMAGEN|*.png", "img");
                            if fff != "" {
                                screen_save(fff);
                                if reloj_vercorreo == 0 {
                                    reloj_vercorreo = 3;
                                    s_audio(x, y, a_camara, true);
                                }
                            }
                        }
                    }
                    else {
                        var fff = get_save_filename("IMAGEN|*.png", "img");
                        if fff != "" {
                            screen_save(fff);
                            if reloj_vercorreo == 0 {
                                reloj_vercorreo = 3;
                                s_audio(x, y, a_camara, true);
                            }
                        }
                    }
                }
                break;
            
            case 123: // llave pal candado match
                if en_mira != noone and keyboard_check_pressed(vk_space) {
                if point_distance(x, y, en_mira.x, en_mira.y) &lt; o_control.ver_perfil * 2 {
                    if en_mira.objeto == 124 {
                        var buf = s_header(56, 4);
                        buffer_write(buf, buffer_u16, en_mira.idweb);
                        buffer_write(buf, buffer_u16, 61);
                        s_udp_send(buf, "");
                        en_mira.objeto = 61;
                        objeto = 61;
                    }
                } }
                break;
            
            case 128: // iman rastrea hashtag
                if random(1) &lt; 0.03 {
                    var quien = ds_list_create();
                    var yop = id;
                    var hash = s_letters_digits_lower(hashtag);
                    with o_usuario {
                        if id != yop and estaonline and s_letters_digits_lower(hashtag) == hash {
                            ds_list_add(quien, id);
                        }
                    }
                    if !ds_list_empty(quien) {
                        var aux = noone;
                        with o_pbatll {
                            if !activo {
                                activo = true;
                                destino = noone;
                                x = yop.x;
                                y = yop.y;
                                aux = id;
                                break;
                            }
                        }
                        if aux == noone {
                            aux = instance_create(x, y, o_pbatll);
                        }
                        ds_list_shuffle(quien);
                        var q = ds_list_find_value(quien, 0);
                        aux.direction = point_direction(x, y, q.x, q.y);
                        aux.color = c_aqua;
                        aux.reloj_fin = 4;
                    }
                    ds_list_destroy(quien);
                }
                break;
            
            case 31: // dado azar
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 2;
                    s_numero(x, y + 3, string(irandom_range(1, 6)), true);
                }
                break;
            
            case 92: // conteo
                if keyboard_check_released(vk_space) {
                    reloj_conteo = -1;
                }
                else if keyboard_check_pressed(vk_space) {
                    reloj_conteo = 0;
                    numero_conteo = 0;
                    if !collision_circle(x, y + 3, 48, o_numero, true, false) {
                        s_numero(x, y + 3, string(numero_conteo), true);
                    }
                }
                if reloj_conteo != -1 {
                    reloj_conteo += dlt;
                    if reloj_conteo &gt;= 1 {
                        reloj_conteo -= 1;
                        numero_conteo++;
                        s_numero(x, y + 3, string(numero_conteo), true);
                    }
                }
                break;
            
            case 102: // globo
                if keyboard_check_pressed(vk_space) {
                    var buf = s_header(58, 3);
                    buffer_write(buf, buffer_u16, idweb);
                    buffer_write(buf, buffer_u8, 0);
                    s_udp_send(buf, "");
                    objeto = 0;
                    instance_create(x, y + 1, o_globo);
                }
                break;
            
            case 174: // confeti
                if keyboard_check_pressed(vk_space) {
                    var buf = s_header(58, 3);
                    buffer_write(buf, buffer_u16, idweb);
                    buffer_write(buf, buffer_u8, 1);
                    s_udp_send(buf, "");
                    objeto = 0;
                    var aux = instance_create(x, y + 1, o_globo);
                    aux.esconfeti = true;
                    s_audio(x, y, a_rocket, false);
                }
                break;
            
            case 69: case 70: case 71: case 72: // pinturas
                if keyboard_check(vk_space) {
                    if !place_meeting(x, y + 1, o_pintura) and !place_meeting(x, y + 1, o_bloque) {
                        var aux = instance_create(x, y + 1, o_pintura);
                        aux.colorid = objeto - 69;
                        aux.envio = true;
                        s_pintura(aux);
                        if reloj_obra_pintura == -1 {
                            reloj_obra_pintura = 2;
                        }
                    }
                }
                break;
            
            case 43: // lapiz
                if keyboard_check(vk_space) or mouse_check_button(mb_left) {
                    if !collision_point(mouse_x, mouse_y, o_pintura, true, false) and
                            !place_meeting(mouse_x, mouse_y, o_bloque) {
                        var aux = instance_create(mouse_x, mouse_y, o_pintura);
                        aux.colorid = 69;
                        aux.envio = true;
                        s_pintura(aux);
                        if reloj_obra_pintura == -1 {
                            reloj_obra_pintura = 2;
                        }
                    }
                }
                break;
            
            case 163: // mapa
                if keyboard_check_pressed(vk_space) and ver_mapa == noone {
                    ver_mapa = sprite_add("mapa.png", 0, false, false, 1024 / 2,
                        (1024 / room_width) * room_height / 2);
                }
                break;
            
            // efectos de sonido segun objeto
            case 83:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_telefono, true);
                } break;
            case 5:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_perro, true);
                } break;
            case 6:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_gato, true);
                } break;
            case 7:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_cerdo, true);
                } break;
            case 13:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_loro, true);
                } break;
            case 115:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 1;
                    s_audio(x, y, a_flecha, true);
                } break;
            case 30:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_cacerola, true);
                } break;
            case 14:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_explosion, true);
                    objeto = 0;
                } break;
            case 9: case 10: case 11:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_bebe, true);
                } break;
            case 121:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 1;
                    s_audio(x, y, a_latigo, true);
                } break;
            case 97:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 2;
                    s_audio(x, y, a_motocierra, true);
                } break;
            case 68:
            case 116: case 117: case 118: case 119: case 120:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 1;
                    s_audio(x, y, a_espadazo, true);
                } break;
            case 62:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_pistola, true);
                } break;
            case 63:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_sniper, true);
                } break;
            case 64:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_metralla, true);
                } break;
            case 65:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_escopeta, true);
                } break;
            case 66:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_bazooka, true);
                } break;
            case 45:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_guitarra, true);
                } break;
            case 46:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_electrica, true);
                } break;
            case 47:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_violin, true);
                } break;
            case 48:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_bajo, true);
                } break;
            case 49:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_flauta, true);
                } break;
            case 50:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 3;
                    s_audio(x, y, a_trompeta, true);
                } break;
            case 51:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 2;
                    s_audio(x, y, a_trombon, true);
                } break;
            case 52:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_banjo, true);
                } break;
            case 53:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_piano, true);
                } break;
            case 54:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 5;
                    s_audio(x, y, a_tambor, true);
                } break;
            case 55:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 1;
                    s_audio(x, y, a_tambuuum, true);
                } break;
            case 56:
                if reloj_vercorreo == 0 and keyboard_check_pressed(vk_space) {
                    reloj_vercorreo = 2;
                    s_audio(x, y, a_platillo, true);
                } break;
        }
    }
    
    // envio de pinturas
    if reloj_obra_pintura != -1 {
        reloj_obra_pintura -= dlt;
        if reloj_obra_pintura &lt;= 0 {
            reloj_obra_pintura = -1;
            var tot = 0;
            with o_pintura {
                if envio {
                    tot++;
                }
            }
            if tot &gt; 0 {
                var buf = s_header(59, 2 + 5 * tot);
                buffer_write(buf, buffer_u16, tot);
                with o_pintura {
                    if envio {
                        envio = false;
                        buffer_write(buf, buffer_u16, x);
                        buffer_write(buf, buffer_u16, y);
                        buffer_write(buf, buffer_u8, colorid);
                    }
                }
                s_udp_send(buf, "");
            }
        }
    }
    
    } // fin de modo no_chat
    
    // reloj disparos
    if objeto &gt;= 130 and objeto &lt;= 133 and panfleto == "" {
        if reloj_recarga != 0 {
            reloj_recarga -= dlt;
            if reloj_recarga &lt;= 0 {
                reloj_recarga = 0;
                municion = o_control.municion_bala;
            }
        }
        reloj_cadencia = max(0, reloj_cadencia - dlt);
    }
    
    // rebote
    var impasable = false;
    var esmovil = false;
    var otr = instance_place(posx, posy, o_bloque);
    if otr == noone {
        otr = instance_place(posx, posy, o_tiro_pesado);
        if otr != noone {
            if otr.altura &gt; 82 {
                otr = noone;
            }
            else {
                impasable = true;
            }
        }
        if otr == noone {
            otr = instance_place(posx, posy, o_movil);
            if otr != noone {
                esmovil = true;
            }
        }
    }
    else {
        var elparent = object_get_parent(otr.object_index);
        if elparent != o_especial and elparent != o_game {
            impasable = true;
        }
    }
    if otr != noone {
        direction = point_direction(otr.x, otr.y, posx, posy);
        var vel;
        if impasable {
            vel = o_control.velocidad * dlt * 1.25;
        }
        else {
            // hacer rebotar al otro
            if esmovil {
                vel = o_control.velocidad * dlt;
                if !place_meeting(otr.posx, otr.posy, o_bloque) {
                    vel *= 0.75;
                    otr.posx += lengthdir_x(vel, -direction);
                    otr.posy += lengthdir_y(vel, -direction);
                    if otr.estaonline {
                        // Tarea forzar a mover a usuario conectado
                    }
                    else {
                        otr.reloj_udp = min(otr.reloj_udp, 0.5);
                    }
                }
            }
            else {
                vel = o_control.velocidad * dlt * 0.75;
            }
        }
        posx += lengthdir_x(vel, direction);
        posy += lengthdir_y(vel, direction);
    }
    // comandos para andar
    var andar = true;
    if !modo_chat {
        if keyboard_check(ord('D')) or keyboard_check(vk_right) {
            if keyboard_check(ord('W')) or keyboard_check(vk_up) {
                direction = 45; andar_mouse = false;
            }
            else if keyboard_check(ord('S')) or keyboard_check(vk_down) {
                direction = 315; andar_mouse = false;
            }
            else {
                direction = 0; andar_mouse = false;
            }
        }
        else if keyboard_check(ord('A')) or keyboard_check(vk_left) {
            if keyboard_check(ord('W')) or keyboard_check(vk_up) {
                direction = 135; andar_mouse = false;
            }
            else if keyboard_check(ord('S')) or keyboard_check(vk_down) {
                direction = 225; andar_mouse = false;
            }
            else {
                direction = 180; andar_mouse = false;
            }
        }
        else {
            if keyboard_check(ord('W')) or keyboard_check(vk_up) {
                direction = 90; andar_mouse = false;
            }
            else if keyboard_check(ord('S')) or keyboard_check(vk_down) {
                direction = 270; andar_mouse = false;
            }
            else {
                andar = false;
            }
        }
    }
    else {
        andar = false;
    }
    // seguir al mouse
    if andar_mouse {
        if point_distance(posx, posy, mouse_x, mouse_y) &gt; 36 {
            direction = point_direction(posx, posy, mouse_x, mouse_y);
            andar = true;
        }
        else {
            andar = false;
        }
    }
    // verificar emocion no disponible
    if andar and emocion == 0 {
        emocion = 1;
    }
    // ir detras de conectado
    if !andar and seguir_halar != noone {
        if seguir_halar.estaonline {
            var vl = point_distance(posx, posy, seguir_halar.posx, seguir_halar.posy);
            if vl &gt; 124 {
                seguir_halar = noone;
            }
            else if vl &gt; 24 {
                direction = point_direction(posx, posy, seguir_halar.posx, seguir_halar.posy);
                andar = true;
            }
        }
    }
    // ejecutar movimiento
    if andar and !impasable {
        var vel = o_control.velocidad * dlt;
        if s_enagua(posx, posy) {
            vel *= 0.75;
        }
        else if objeto &gt;= 151 and objeto &lt;= 155 and panfleto == "" {
            vel *= 1.5;
        }
        posx += lengthdir_x(vel, direction);
        posy += lengthdir_y(vel, direction);
        if reloj_vercorreo == 0 {
            papelote = "";
        }
        if ver_mapa != noone {
            sprite_delete(ver_mapa);
            ver_mapa = noone;
        }
    }
    // si no mueve atrae insecto con red jama
    else {
        data_bicho = "";
        if objeto == 157 {
            if o_evolutivo.visible and instance_exists(o_bicho) {
                var bich = instance_nearest(x, y, o_bicho);
                if point_distance(x, y, bich.x, bich.y) &lt; 24 {
                    bich.direction = point_direction(x, y, bich.x, bich.y);
                    bich.x = x + lengthdir_x(16, bich.direction);
                    bich.y = y + lengthdir_y(16, bich.direction);
                    var txt = "";
                    with bich {
                        txt = "INSECTO#" +
                            string(generacion) + " :Gener.#" +
                            string(round(edad)) + " :Edad s#" +
                            string(hijos) + " :Hijos#...#Genes %#" +
                            string(round(gen[0] * 100)) + " :Visión#" +
                            string(round(gen[1] * 100)) + " :Veloci.#" +
                            string(round(gen[2] * 100)) + " :Capaci.#" +
                            string(round(gen[3] * 100)) + " :Empatía#" +
                            string(round(gen[4] * 100)) + " :Agresivi.#" +
                            string(round(gen[5] * 100)) + " :Letargo";
                        
                    }
                    data_bicho = txt;
                }
            }
        }
    }
    
    // limites
    posx = clamp(posx, 0, room_width);
    posy = clamp(posy, 0, room_height);
    
    // mover camara
    var camb = false;
    var cx = view_xview[0] + view_wview[0] / 2;
    var cy = view_yview[0] + view_hview[0] / 2 + 32;
    var vel = point_distance(cx, cy, x, y);
    if vel &gt; 100 {
        view_xview[0] = x - view_wview[0] / 2;
        view_yview[0] = y - view_hview[0] / 2;
        camb = true;
    }
    else if vel &gt; 2 {
        vel *= dlt * 2;
        direction = point_direction(cx, cy, x, y);
        view_xview[0] += lengthdir_x(vel, direction);
        view_yview[0] += lengthdir_y(vel, direction);
        camb = true;
    }
    if camb {
        view_xview[0] = clamp(view_xview[0], 0, room_width - view_wview[0]);
        view_yview[0] = clamp(view_yview[0], 0, room_height - view_hview[0]);
    }
    view_xview[0] = round(view_xview[0]);
    view_yview[0] = round(view_yview[0]);
    
    // posiciones viejas
    mous_viejx = mouse_x;
    mous_viejy = mouse_y;
    
    // enviar datos a otros
    if reloj_udp == 0 {
        reloj_udp = m_delay_env_usr;
        actividadweb = s_current_time();
        fecha = s_current_time();
        var buf = s_buf_usuario(id);
        s_udp_send(buf, "");
    }
    
    // guardar ini
    if random(1) &lt; 0.002 {
        s_save_usuario(id);
    }
}
else { // NPC local
    estaonline = ds_list_find_index(o_control.idconectados, idweb) != -1;
    
    // ver si debe ser colisionado por este PC
    if !estaonline {
        
        // rebote
        var impasable = false;
        var otr = instance_place(posx, posy, o_bloque);
        if otr == noone {
            otr = instance_place(posx, posy, o_tiro_pesado);
            if otr != noone {
                if otr.altura &gt; 82 {
                    otr = noone;
                }
                else {
                    impasable = true;
                }
            }
            if otr == noone {
                otr = collision_circle(posx, posy, 12, o_movil, true, true); // base_u(8) + 4 px
            }
        }
        else {
            impasable = true;
        }
        if otr != noone {
            direction = point_direction(otr.x, otr.y, posx, posy);
            var vel;
            if impasable {
                vel = o_control.velocidad * dlt * 1.25;
            }
            else {
                vel = o_control.velocidad * dlt;
            }
            posx += lengthdir_x(vel, direction);
            posy += lengthdir_y(vel, direction);
        }
        
        // seguir a jugador
        var halado = false;
        var otr = o_control.mipropio;
        if !impasable and otr.seguir_halar == id {
            var vvv = point_distance(posx, posy, otr.posx, otr.posy);
            if vvv &gt; 124 {
                otr.seguir_halar = noone;
            }
            else if vvv &gt; 24 {
                direction = point_direction(posx, posy, otr.posx, otr.posy);
                var vel = o_control.velocidad * dlt;
                posx += lengthdir_x(vel, direction);
                posy += lengthdir_y(vel, direction);
                halado = true;
            }
        }
        
        // limites
        posx = clamp(posx, 0, room_width);
        posy = clamp(posy, 0, room_height);
        
        // si movio entonces adelantar envio
        if pos_viejx != posx or pos_viejy != posy {
            if halado or s_permiso_pro() {
                reloj_udp = min(reloj_udp, 0.5);
            }
        }
        
        // enviar datos a otros
        if s_permiso_pro() {
            if reloj_udp == 0 {
                reloj_udp = o_control.esp_sinc + random(o_control.esp_sinc);
                fecha = s_current_time();
                if pos_viejx == posx and pos_viejy == posy {
                    var buf = s_buf_usuario(id);
                    s_udp_send(buf, "");
                }
                else {
                    var buf = s_move_usuario(id);
                    s_udp_send(buf, "");
                }
                pos_viejx = posx;
                pos_viejy = posy;
            }
        }
    }
} }

// ejecucion general
// sincronizacion posicion
var vel = point_distance(x, y, posx, posy);
if vel &gt; 100 {
    x = posx;
    y = posy;
}
else if vel &gt; 4 {
    vel *= dlt * 2;
    direction = point_direction(x, y, posx, posy);
    x += lengthdir_x(vel, direction);
    y += lengthdir_y(vel, direction);
}
// reloj envios
reloj_udp = max(0, reloj_udp - dlt);
// duracion expresion
if reloj_expresion &gt; 0 {
    reloj_expresion -= dlt;
    if reloj_expresion &lt;= 0 {
        reloj_expresion = 0;
        expresion = 0;
    }
}
// duracion dialogo
if reloj_dialogo &gt; 0 {
    reloj_dialogo -= dlt;
    if reloj_dialogo &lt;= 0 {
        reloj_dialogo = 0;
        dialogo = "";
    }
}
// duracion panfleto
if panfleto != "" and random(1) &lt; 0.003 {
    if s_current_time() - dia_panfleto &gt;= 86400 { // un dia
        panfleto = "";
    }
}
// expresar voz
if expresion_ant == 0 and expresion != 0 {
    if o_control.mipropio.seguir_halar == id and expresion == 4 {
        o_control.mipropio.seguir_halar = noone;
    }
    s_expresion_voz(id);
}
expresion_ant = expresion;
// efecto del virus
if salud != 0 {
    // curacion general
    if o_virus.curatodos == 1 or objeto == 36 or objeto == 125 {
        salud = 0;
    }
    // esta enfermo
    else if salud != 1 and random(1) &lt; 0.03 {
        // efecto del virus al final
        var incu = lerp(60, o_control.virus_incubacion, o_virus.incubacion / 9);
        var enfe = lerp(60, o_control.virus_enfermedad, o_virus.enfermedad / 9);
        if s_current_time() - salud &gt;= incu + enfe {
            if random(1) &lt; lerp(0.1, 0.9, o_virus.mortandad / 9) {
                salud = 1; // muere
            }
            else {
                salud = 0; // se cura
            }
        }
        // intentar infectar
        var yop = id;
        var ddd = o_control.virus_distancia;
        var incu = lerp(0.1, 0.9, o_virus.transmision / 9);
        var lad, inku;
        with o_usuario {
            if salud == 0 and random(1) &lt; 0.1 {
                if point_in_rectangle(x, y, yop.x - ddd, yop.y - ddd, yop.x + ddd, yop.y + ddd) {
                    lad = point_distance(x, y, yop.x, yop.y);
                    if lad &lt; ddd {
                        if objeto == 125 {
                            inku = 0.5;
                        }
                        else {
                            inku = incu;
                        }
                        if random(1) &lt; exp(-3 * (lad / ddd)) * inku {
                            if objeto == 125 {
                                yop.salud = 0;
                                s_infectar_udp(yop.idweb, 1);
                            }
                            else {
                                salud = s_current_time();
                                s_infectar_udp(idweb, 0);
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
    // ponerse visualmente como enfermo y toser
    if random(1) &lt; 0.03 {
        if salud &gt; 1 {
            enfermito = s_current_time() - salud &gt;= lerp(60, o_control.virus_incubacion,
                o_virus.incubacion / 9);
            var ob = o_control.mipropio.objeto;
            if enfermito and (ob == 36 or ob == 125) and random(1) &lt; 0.1 {
                instance_create(x, y, o_tos);
            }
        }
        else {
            enfermito = false;
        }
    }
}
// reloj parpadeo luces
parpadeo_llama -= dlt * 0.33;
if parpadeo_llama &lt;= 0.5 {
    parpadeo_llama = random_range(0.8, 0.9);
}
// humo faso
if visible and objeto == 142 and random(1) &lt; 0.2 {
    if random(1) &lt; 0.5 or !place_meeting(x, y, o_tiro_humo) {
        var r = 48;
        var xx = x + random_range(-r, r);
        var yy = y + random_range(-r, r);
        if point_distance(xx, yy, x, y) &lt; r {
            if !place_meeting(xx, yy, o_bloque) and !place_meeting(xx, yy, o_hierba) {
                instance_create(xx, yy, o_hierba);
            }
        }
    }
}
// fuego antorcha
if visible and objeto == 111 and random(1) &lt; 0.1 {
    if random(1) &lt; 0.5 or !place_meeting(x, y, o_tiro_humo) {
        s_tiro_humo(x - 18, y, 56, 26);
    }
}
// perfume brillos
if visible and objeto == 175 and random(1) &lt; 0.03 {
    s_tiro_humo(x, y, 48, 27);
}
// ver si esta bloqueado
if !propietario and random(1) &lt; 0.005 {
    bloqueado = false;
    var elman = o_control.mipropio;
    for (var b = 0; b &lt; o_control.total_bloqueados; b++) {
        if elman.enemigo[b] == idweb or enemigo[b] == elman.idweb {
            bloqueado = true;
            break;
        }
    }
}

// animacion
s_anima_paso(id, 0.1, 6); // pies
depth = -y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if propietario {
    keyboard_clear(vk_shift);
    keyboard_clear(vk_control);
    switch ds_map_find_value(async_load, "id") {
        case dial_usr_web:
            dial_usr_web = -1;
            if ds_map_find_value(async_load, "status") {
                if en_mira != noone {
                    if s_url(en_mira.contacto) {
                        execute_shell_simple(en_mira.contacto);
                    }
                }
            }
            break;
        case dial_panfleto:
            dial_panfleto = -1;
            if ds_map_find_value(async_load, "status") {
                var res = string_replace(ds_map_find_value(async_load, "result"), "#", "");
                dia_panfleto = s_current_time();
                while string_width(res) * 0.7 &gt; 64 {
                    res = string_copy(res, 1, string_length(res) - 1);
                }
                panfleto = res;
            }
            break;
        case dial_registro:
            dial_registro = -1;
            if ds_map_find_value(async_load, "status") {
                switch tipo_registro {
                    case 1: // nombre
                        var res = string_replace(ds_map_find_value(async_load, "result"), "#", "");
                        res = s_string_letters_digits(res);
                        if res != "" {
                            while string_width(res) * 0.8 &gt; 72 {
                                res = string_copy(res, 1, string_length(res) - 1);
                            }
                            nombre = res;
                            nombremas = s_letters_digits_lower(nombre);
                            registro = s_current_time();
                            s_nombre_unico(id);
                        }
                        break;
                    case 5: // year nacimiento
                        var res = ds_map_find_value(async_load, "result");
                        edad = clamp(round(res), 1900, current_year - 1);
                        break;
                    case 8: // descripcion
                        var res = ds_map_find_value(async_load, "result");
                        while string_height_ext(res, 13, 128) * 0.6 &gt; 80 or
                                string_width_ext(res, 13, 128) * 0.6 &gt; 72 {
                            res = string_copy(res, 1, string_length(res) - 1);
                        }
                        descripcion = res;
                        break;
                    case 9: // contacto
                        var res = ds_map_find_value(async_load, "result");
                        contacto = string_copy(res, 1, min(string_length(res), 255));
                        break;
                    case 0: // hashtag
                        var res = string_replace(ds_map_find_value(async_load, "result"), "#", "");
                        while string_width(res) * 0.7 &gt; 72 {
                            res = string_copy(res, 1, string_length(res) - 1);
                        }
                        hashtag = res;
                        elhashtagmin = s_letters_digits_lower(hashtag);
                        break;
                    case 80: // biografia
                        var res = ds_map_find_value(async_load, "result");
                        while string_height_ext(res, 13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                string_width_ext(res, 13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                            res = string_copy(res, 1, string_length(res) - 1);
                        }
                        biografia = res;
                        break;
                }
            }
            break;
        case dial_especial:
            dial_especial = -1;
            if ds_map_find_value(async_load, "status") {
                if !instance_exists(tipo_especial) {
                    exit;
                }
                switch tipo_especial.object_index {
                    
                    case o_pergamino:
                        var res = ds_map_find_value(async_load, "result");
                        if tipo_especial.redacta == 0 {
                            while string_height_ext(res, 13, 128) * 0.6 &gt; 72 or
                                    string_width_ext(res, 13, 128) * 0.6 &gt; 72 {
                                res = string_copy(res, 1, string_length(res) - 1);
                            }
                            tipo_especial.texto = res;
                            tipo_especial.fecha = s_current_time();
                            tipo_especial.reloj_sinc = 0;
                        }
                        else {
                            while string_height_ext(res, 13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                    string_width_ext(res, 13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                                res = string_copy(res, 1, string_length(res) - 1);
                            }
                            tipo_especial.textote = res;
                            tipo_especial.fecha = s_current_time();
                            tipo_especial.reloj_sinc = 0;
                        }
                        break;
                    
                    case o_emisora:
                        var res = string_replace(ds_map_find_value(async_load, "result"), "#", "");
                        while string_height_ext(res, 13, 90) * 0.6 &gt; 50 or
                                string_width_ext(res, 13, 90) * 0.6 &gt; 64 {
                            res = string_copy(res, 1, string_length(res) - 1);
                        }
                        tipo_especial.texto = res;
                        tipo_especial.fecha = s_current_time();
                        tipo_especial.reloj_sinc = 0;
                        break;
                    
                    case o_piano:
                        var res = string_lower(ds_map_find_value(async_load, "result"));
                        var nts = "";
                        var r;
                        while res != "" {
                            r = string_char_at(res, 1);
                            if nts == "" and string_count(r, "0123456789") != 0 {
                                nts += r;
                            }
                            else if string_count(r, "01234567") != 0 {
                                nts += r;
                            }
                            else if string_count(r, " _zxcvbnm") != 0 {
                                switch r {
                                    case " ": nts += "0"; break;
                                    case "_": nts += "0"; break;
                                    case "z": nts += "1"; break;
                                    case "x": nts += "2"; break;
                                    case "c": nts += "3"; break;
                                    case "v": nts += "4"; break;
                                    case "b": nts += "5"; break;
                                    case "n": nts += "6"; break;
                                    case "m": nts += "7"; break;
                                }
                            }
                            if string_length(res) &lt;= 1 {
                                break;
                            }
                            res = string_copy(res, 2, string_length(res) - 1);
                        }
                        nts = string_copy(nts, 1, min(string_length(nts), 64000));
                        if string_length(nts) &gt;= 2 {
                            ds_list_clear(tipo_especial.melodia);
                            tipo_especial.aguja = 0;
                            while nts != "" {
                                ds_list_add(tipo_especial.melodia, real(string_char_at(nts, 1)));
                                if string_length(nts) &lt;= 1 {
                                    break;
                                }
                                nts = string_copy(nts, 2, string_length(nts) - 1);
                            }
                            tipo_especial.fecha = s_current_time();
                            tipo_especial.reloj_sinc = 0;
                            tipo_especial.mute = 0;
                        }
                        break;
                    
                    case o_antena:
                        var res = ds_map_find_value(async_load, "result");
                        if s_str_es_ip(res) {
                            with o_control {
                                network_enviados++;
                                network_env_bytes += saludo_size + m_head_udp;
                                network_send_udp_raw(conexion, res, m_web, saludo_buf, saludo_size);
                            }
                        }
                        break;
                    
                    case o_escritos:
                        var res = ds_map_find_value(async_load, "result");
                        while string_height_ext(res, 13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                string_width_ext(res, 13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                            res = string_copy(res, 1, string_length(res) - 1);
                        }
                        ds_list_replace(tipo_especial.textos, tipo_especial.aguja, res);
                        tipo_especial.fecha = s_current_time();
                        tipo_especial.reloj_sinc = 0;
                        break;
                    
                    case o_baul:
                        var res = ds_map_find_value(async_load, "result");
                        objeto = clamp(round(res), 0, sprite_get_number(d_objeto) - 1);
                        //s_objeto_prohibido(id, true);
                        break;
                    
                    case o_diccionario:
                        switch tipo_especial.orden_mensaje {
                            case 0: // pagina
                                var res = ds_map_find_value(async_load, "result");
                                tipo_especial.aguja = clamp(round(res), 0,
                                    ds_list_size(tipo_especial.titulos) - 1);
                                s_diccionario_aguja(tipo_especial);
                                tipo_especial.fecha = s_current_time();
                                tipo_especial.reloj_sinc = 0;
                                tipo_especial.solo_aguja = true;
                                break;
                            case 1: // titulo
                                var res = string_replace(ds_map_find_value(async_load, "result"), "#", "");
                                while string_width(res) * 0.7 &gt; 50 {
                                    res = string_copy(res, 1, string_length(res) - 1);
                                }
                                ds_list_replace(tipo_especial.titulos, tipo_especial.aguja, res);
                                tipo_especial.fecha = s_current_time();
                                tipo_especial.reloj_sinc = 0;
                                tipo_especial.solo_aguja = false;
                                break;
                            case 2: // informacion
                                var res = ds_map_find_value(async_load, "result");
                                while string_height_ext(res, 13, 85) * 0.6 &gt; 64 or
                                        string_width_ext(res, 13, 85) * 0.6 &gt; 48 {
                                    res = string_copy(res, 1, string_length(res) - 1);
                                }
                                ds_list_replace(tipo_especial.infos, tipo_especial.aguja, res);
                                if res != "" {
                                    ds_list_replace(tipo_especial.fotos, tipo_especial.aguja, "");
                                    s_diccionario_aguja(tipo_especial);
                                }
                                tipo_especial.fecha = s_current_time();
                                tipo_especial.reloj_sinc = 0;
                                tipo_especial.solo_aguja = false;
                                break;
                        }
                        break;
                    
                    case o_correo:
                        var mail = o_virtual_correo.id;
                        var res = s_split(ds_map_find_value(async_load, "result"), "|", false);
                        if is_array(res) {
                            if array_length_1d(res) == 2 {
                                // buscar si existe el receptor
                                var quien = s_busca_pornombre(res[0]);
                                if quien == -1 {
                                    break;
                                }
                                else {
                                    with o_usuario {
                                        if quien == idweb {
                                            if bloqueado {
                                                quien = -1;
                                            }
                                            break;
                                        }
                                    }
                                    if quien == -1 {
                                        break;
                                    }
                                }
                                // limitar la talla del mensaje, igual que con escritos
                                if res[1] != "" {
                                    res[1] = string_copy(res[1], 1, min(200, string_length(res[1])));
                                }
                                while string_height_ext(s_formato_mail_raw(res[1]),
                                        13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                        string_width_ext(s_formato_mail_raw(res[1]),
                                        13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                                    res[1] = string_copy(res[1], 1, string_length(res[1]) - 1);
                                }
                                // ver que hacer con el mensaje
                                var ok = false;
                                if res[1] == "" {
                                    // buscar si existe el mensaje en cola para eliminarlo
                                    for (var i = 0; i &lt; ds_list_size(mail.mensajes); i++) {
                                        if ds_list_find_value(mail.emisores, i) == idweb and
                                                ds_list_find_value(mail.receptores, i) == quien {
                                            ds_list_delete(mail.mensajes, i);
                                            ds_list_delete(mail.emisores, i);
                                            ds_list_delete(mail.receptores, i);
                                            ds_list_delete(mail.fechas, i);
                                            ok = true;
                                            break;
                                        }
                                    }
                                }
                                else {
                                    // buscar si existe el mensaje para modificarlo
                                    for (var i = 0; i &lt; ds_list_size(mail.mensajes); i++) {
                                        if ds_list_find_value(mail.emisores, i) == idweb and
                                                ds_list_find_value(mail.receptores, i) == quien {
                                            ds_list_replace(mail.mensajes, i, res[1]);
                                            ds_list_replace(mail.fechas, i, s_current_time());
                                            ok = true;
                                            break;
                                        }
                                    }
                                    if !ok {
                                        ok = true;
                                        // ver si hay demasiados mensajes, reemplazar antiguo
                                        if ds_list_size(mail.mensajes) &gt;= o_control.limite_correos {
                                            var antik = 0;
                                            var minim = s_current_time();
                                            var mn;
                                            for (var i = 0; i &lt; ds_list_size(mail.mensajes); i++) {
                                                mn = ds_list_find_value(mail.fechas, i);
                                                if mn &lt;= minim {
                                                    minim = mn;
                                                    antik = i;
                                                }
                                            }
                                            ds_list_replace(mail.mensajes, antik, res[1]);
                                            ds_list_replace(mail.emisores, antik, idweb);
                                            ds_list_replace(mail.receptores, antik, quien);
                                            ds_list_replace(mail.fechas, antik, s_current_time());
                                        }
                                        else {
                                            // incrustar el mensaje en la cola
                                            ds_list_add(mail.mensajes, res[1]);
                                            ds_list_add(mail.emisores, idweb);
                                            ds_list_add(mail.receptores, quien);
                                            ds_list_add(mail.fechas, s_current_time());
                                        }
                                    }
                                }
                                // actualizar sincronizacion
                                if ok {
                                    mail.fecha = s_current_time();
                                    mail.reloj_sinc = 0;
                                }
                            }
                        }
                        break;
                    
                    case o_confesionario:
                        for (var t = 1; t &lt; ds_list_size(tipo_especial.textos); t++) {
                            if ds_list_find_value(tipo_especial.textos, t) == "" {
                                var res = ds_map_find_value(async_load, "result");
                                while string_height_ext(res, 13, 232 * 1.5) * 0.6 &gt; 172 * 1.5 or
                                        string_width_ext(res, 13, 232 * 1.5) * 0.6 &gt; 150 * 1.5 {
                                    res = string_copy(res, 1, string_length(res) - 1);
                                }
                                ds_list_replace(tipo_especial.textos, t, res);
                                tipo_especial.fecha = s_current_time();
                                tipo_especial.reloj_sinc = 0;
                                tipo_especial.futuro = s_current_time() + irandom_range(
                                    o_control.confesion_futuro_min,
                                    o_control.confesion_futuro_max) /
                                    o_control.relojes_acelerados;
                                break;
                            }
                        }
                        break;
                    
                    case o_ahorcado:
                        if tipo_especial.vidas &gt; 0 and tipo_especial.palabra != tipo_especial.adivinada {
                            var res = s_string_letters_lower(ds_map_find_value(async_load, "result"));
                            if tipo_especial.palabra == "" {
                                s_ahorcado_reinicia(tipo_especial);
                                if res != "" {
                                    tipo_especial.palabra = string_copy(res, 1, min(o_control.limite_ahorcado, string_length(res)));
                                    tipo_especial.adivinada = string_repeat("-", string_length(tipo_especial.palabra));
                                }
                                tipo_especial.fecha = s_current_time();
                                tipo_especial.reloj_sinc = 0;
                                exit;
                            }
                            with tipo_especial {
                                var ok = false;
                                if string_length(res) == 1 {
                                    var newad = "";
                                    var v, p;
                                    for (var c = 1; c &lt;= string_length(palabra); c++) {
                                        v = string_char_at(adivinada, c);
                                        p = string_char_at(palabra, c);
                                        if v != "-" {
                                            newad += v;
                                        }
                                        else if p == res {
                                            newad += p;
                                        }
                                        else {
                                            newad += "-";
                                        }
                                    }
                                    if newad != adivinada {
                                        historial += res;
                                        adivinada = newad;
                                        ok = true;
                                    }
                                    else {
                                        if string_count(res, historial) == 0 {
                                            historial += res;
                                            vidas--;
                                            ok = true;
                                        }
                                    }
                                }
                                else if res != "" {
                                    ok = true;
                                    if res == palabra {
                                        adivinada = res;
                                    }
                                    else {
                                        vidas--;
                                    }
                                }
                                if ok {
                                    fecha = s_current_time();
                                    reloj_sinc = 0;
                                }
                            }
                        }
                        break;
                    
                    case o_dispo:
                        var res = ds_map_find_value(async_load, "result");
                        if res != "" {
                            res = s_split(res, "|", false);
                            if is_array(res) {
                                if array_length_1d(res) == 3 {
                                    for (var i = 0; i &lt; 3; i++) {
                                        res[i] = string_digits(res[i]);
                                        if res[i] == "" {
                                            res[i] = 255;
                                        }
                                        else {
                                            res[i] = clamp(round(real(res[i])), 0, 255);
                                        }
                                        tipo_especial.vecina[i] = res[i];
                                    }
                                    tipo_especial.alarm[0] = 1;
                                    tipo_especial.origen.fecha = s_current_time();
                                    tipo_especial.origen.reloj_sinc = 1;
                                }
                            }
                        }
                        break;
                    
                    case o_ajedrez:
                        if tipo_especial.miturno == tipo_especial.turno_max {
                            var res = string_lower(ds_map_find_value(async_load, "result"));
                            if res == "000" {
                                s_ajedrez_enrroque(tipo_especial, false);
                            }
                            else if res == "00" {
                                s_ajedrez_enrroque(tipo_especial, true);
                            }
                            else if string_length(res) == 5 {
                                var wi = -1; var hi = -1; var wf = -1; var hf = -1;
                                switch string_char_at(res, 1) {
                                    case "a": wi = 0; break;
                                    case "b": wi = 1; break;
                                    case "c": wi = 2; break;
                                    case "d": wi = 3; break;
                                    case "e": wi = 4; break;
                                    case "f": wi = 5; break;
                                    case "g": wi = 6; break;
                                    case "h": wi = 7; break;
                                }
                                switch string_char_at(res, 2) {
                                    case "8": hi = 0; break;
                                    case "7": hi = 1; break;
                                    case "6": hi = 2; break;
                                    case "5": hi = 3; break;
                                    case "4": hi = 4; break;
                                    case "3": hi = 5; break;
                                    case "2": hi = 6; break;
                                    case "1": hi = 7; break;
                                }
                                switch string_char_at(res, 4) {
                                    case "a": wf = 0; break;
                                    case "b": wf = 1; break;
                                    case "c": wf = 2; break;
                                    case "d": wf = 3; break;
                                    case "e": wf = 4; break;
                                    case "f": wf = 5; break;
                                    case "g": wf = 6; break;
                                    case "h": wf = 7; break;
                                }
                                switch string_char_at(res, 5) {
                                    case "8": hf = 0; break;
                                    case "7": hf = 1; break;
                                    case "6": hf = 2; break;
                                    case "5": hf = 3; break;
                                    case "4": hf = 4; break;
                                    case "3": hf = 5; break;
                                    case "2": hf = 6; break;
                                    case "1": hf = 7; break;
                                }
                                if wi != -1 and hi != -1 and wf != -1 and hf != -1 {
                                    s_ajedrez_move(tipo_especial, wi, hi, wf, hf, true);
                                }
                            }
                        }
                        break;
                    
                    case o_batalla:
                        var btll = instance_furthest(tipo_especial.x, tipo_especial.y, o_batalla);
                        if s_grid_sum_val(btll.tiros, 0, false) &gt;= s_grid_sum_val(tipo_especial.tiros, 0, false) {
                            var res = string_lower(ds_map_find_value(async_load, "result"));
                            if string_length(res) == 2 {
                                var wi = -1; var hi = -1;
                                switch string_char_at(res, 1) {
                                    case "a": wi = 0; break;
                                    case "b": wi = 1; break;
                                    case "c": wi = 2; break;
                                    case "d": wi = 3; break;
                                    case "e": wi = 4; break;
                                    case "f": wi = 5; break;
                                    case "g": wi = 6; break;
                                    case "h": wi = 7; break;
                                }
                                switch string_char_at(res, 2) {
                                    case "8": hi = 0; break;
                                    case "7": hi = 1; break;
                                    case "6": hi = 2; break;
                                    case "5": hi = 3; break;
                                    case "4": hi = 4; break;
                                    case "3": hi = 5; break;
                                    case "2": hi = 6; break;
                                    case "1": hi = 7; break;
                                }
                                var quien = ds_grid_get(btll.barcos, wi, hi);
                                if quien == 1 or quien == 2 {
                                    ds_grid_set(btll.barcos, wi, hi, 2);
                                    ds_grid_set(tipo_especial.tiros, wi, hi, 2);
                                    
                                }
                                else {
                                    ds_grid_set(btll.barcos, wi, hi, 3);
                                    ds_grid_set(tipo_especial.tiros, wi, hi, 1);
                                }
                                btll.fecha = s_current_time();
                                btll.reloj_sinc = 0;
                                tipo_especial.fecha = s_current_time();
                                tipo_especial.reloj_sinc = 0;
                                s_batalla_ficha();
                            }
                        }
                        break;
                    
                    case o_juegovida:
                        var res = ds_map_find_value(async_load, "result");
                        if res != "" {
                            res = s_split(res, "/", false);
                            if is_array(res) {
                                if array_length_1d(res) == 2 {
                                    tipo_especial.regla[0] = res[0];
                                    tipo_especial.regla[1] = res[1];
                                    tipo_especial.fecha = s_current_time();
                                    tipo_especial.reloj_sinc = 1;
                                }
                            }
                        }
                        break;
                    
                    case o_votacion:
                        var res = ds_map_find_value(async_load, "result");
                        while string_height_ext(res, 13, 96) * 0.6 &gt; 48 or
                                string_width_ext(res, 13, 96) * 0.6 &gt; 64 {
                            res = string_copy(res, 1, string_length(res) - 1);
                        }
                        ds_list_clear(tipo_especial.derecha);
                        ds_list_clear(tipo_especial.izquierda);
                        tipo_especial.pregunta = res;
                        tipo_especial.fecha = s_current_time();
                        tipo_especial.reloj_sinc = 0;
                        break;
                }
            }
            break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_save_usuario(id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// verificar que no este en sex
var yop = id;
with o_sex {
    if cercano_A == yop or cercano_B == yop {
        exit;
    }
}
// ahora si dibujar todo
var dsf = -4;
if genero != 0 {
    dsf -= 4;
}
var raza = piel * 6;
// pies
if reloj_pies == 0 {
    draw_sprite(d_avatar, 3 + raza, x, y);
    draw_sprite(d_avatar, 4 + raza, x, y);
}
else {
    var pai, pad;
    switch paso {
        case 1: pai = 0; pad = 6; break;
        case 2: pai = 2; pad = 4; break;
        case 3: pai = 4; pad = 2; break;
        case 4: pai = 6; pad = 0; break;
        case 5: pai = 4; pad = 2; break;
        case 0: pai = 2; pad = 4; break;
    }
    draw_sprite(d_avatar, 3 + raza, x, y - pai);
    draw_sprite(d_avatar, 4 + raza, x, y - pad);
}
// cuerpo
draw_sprite(d_avatar, 1 + genero + raza, x, y + anima[0] + dsf);
var rp = ropa;
if genero == 0 {
    if rp &gt; 3 and collision_circle(x, y, o_control.radio_zona, o_pnt_piscina, true, false) {
        rp = 3;
    }
    draw_sprite_ext(d_ropa_fem, rp, x, y + anima[0] + dsf, 1, 1, 0,
        o_control.colores[tela], 1);
}
else {
    if rp &gt; 2 and collision_circle(x, y, o_control.radio_zona, o_pnt_piscina, true, false) {
        rp = 2;
    }
    if rp &lt;= 1 {
        draw_sprite(d_avatar, 5 + raza, x, y + anima[0] + dsf);
    }
    draw_sprite_ext(d_ropa_masc, rp, x, y + anima[0] + dsf, 1, 1, 0,
        o_control.colores[tela], 1);
}
// cabeza
draw_sprite(d_avatar, raza, x, y + anima[0] + anima[1] + dsf);
if estaonline {
    draw_sprite(d_emocion, emocion, x, y + anima[0] + anima[1] + dsf);
}
else {
    draw_sprite(d_dormido, 0, x, y + anima[0] + anima[1] + dsf);
}
draw_sprite_ext(d_pelo, pelo, x, y + anima[0] + anima[1] + dsf, 1, 1, 0,
    o_control.colores[tinte], 1);
// nombre
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
var nn = nombre;
if bloqueado {
    nn = "???";
}
draw_text_transformed_colour(x - 2, y + anima[0] + anima[1] - 82 + dsf, nn,
    0.8, 0.8, 0, c_white, c_white, c_white, c_white, 1);
draw_text_transformed_colour(x + 2, y + anima[0] + anima[1] - 82 + dsf, nn,
    0.8, 0.8, 0, c_white, c_white, c_white, c_white, 1);
draw_text_transformed_colour(x, y + anima[0] + anima[1] - 82 + dsf, nn,
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);
// objeto
if panfleto == "" {
    var ob = true;
    if instance_exists(o_gym) {
        var gym = instance_nearest(x, y, o_gym);
        if gym.cercano == id {
            ob = false;
        }
    }
    if ob {
        draw_sprite(d_objeto, objeto, x, y + anima[0] + anima[2] + dsf);
    }
    else {
        draw_sprite(d_pesa, 0, x, y + anima[0] + anima[2] + dsf);
    }
}
if !bloqueado {
    // panfleto
    if panfleto != "" {
        draw_sprite(d_dialogo, 1, x, y + anima[0] + anima[2] + dsf);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        draw_text_transformed_colour(x - 12, y + anima[0] + anima[2] - 87 + dsf, panfleto,
            0.7, 0.7, 0, c_black, c_black, c_black, c_black, 1);
    }
    // expresion
    if estaonline {
        if expresion &lt; 3 {
            draw_sprite(d_expresion, expresion, x, y + anima[0] + anima[1] + anima[3] + dsf);
        }
        else {
            draw_sprite(d_expresion, expresion + piel * 8, x, y + anima[0] + anima[3] + dsf);
        }
    }
    else {
        draw_sprite(d_dormido, 1, x, y + anima[0] + anima[1] + anima[3] + dsf);
    }
    // dialogo
    if propietario and modo_chat {
        draw_sprite_ext(d_dialogo, 0, x, y + anima[0] + anima[1] + dsf,
            1, 1, 0, c_white, 0.5);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        var res = string_replace(keyboard_string, "#", "");
        while string_height_ext(res, 13, 90) * 0.6 &gt; 50 or
                string_width_ext(res, 13, 90) * 0.6 &gt; 64 {
            res = string_copy(res, 1, string_length(res) - 1);
        }
        draw_text_ext_transformed_colour(x + 20, y + anima[0] + anima[1] - 105 + dsf, res,
            13, 90, 0.6, 0.6, 0, c_black, c_black, c_black, c_black, 1);
    }
    else if dialogo != "" {
        draw_sprite(d_dialogo, 0, x, y + anima[0] + anima[1] + dsf);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        var ch = string_char_at(dialogo, 1);
        if (ch == "$" or ch == "%") and string_length(dialogo) &gt;= 2 {
            var ok = false;
            var elman = o_control.mipropio;
            if ch == "$" {
                for (var c = 0; c &lt; o_control.total_contactos; c++) {
                    if amigo[c] == elman.idweb {
                        ok = amigi[c] == m_cont_secreto;
                        break;
                    }
                }
            }
            else if elhashtagmin == "" {
                ok = elman.objeto == objeto;
            }
            else {
                ok = elman.elhashtagmin == elhashtagmin;
            }
            if propietario or ok {
                draw_text_ext_transformed_colour(x + 20, y + anima[0] + anima[1] - 105 + dsf,
                    string_copy(dialogo, 2, string_length(dialogo) - 1),
                    13, 90, 0.6, 0.6, 0, c_black, c_black, c_black, c_black, 1);
            }
            else {
                draw_text_ext_transformed_colour(x + 20, y + anima[0] + anima[1] - 105 + dsf, "...",
                    13, 90, 0.6, 0.6, 0, c_black, c_black, c_black, c_black, 1);
            }
        }
        else {
            draw_text_ext_transformed_colour(x + 20, y + anima[0] + anima[1] - 105 + dsf, dialogo,
                13, 90, 0.6, 0.6, 0, c_black, c_black, c_black, c_black, 1);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

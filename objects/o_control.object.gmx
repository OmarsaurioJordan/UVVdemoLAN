<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>d_base_m</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INI
s_ventana();
randomize();
date_set_timezone(timezone_utc);
draw_set_font(d_letras);
audio_falloff_set_model(audio_falloff_linear_distance_clamped);
audio_channel_num(200);
audio_listener_orientation(0, 0, -1, 0, -1, 0);
instance_create(0, 0, o_mouse);
depth = 0;

// simulacion
globalvar dlt;
dlt = 0;
reloj_ahorcado_palabras = 3;
reloj_kriature = 2;
lista_borra_repetidos = ds_list_create(); // basura necesaria
reloj_exit = 0;

// constantes
caducidad_usr = 60 * 30; // segundos para que un usuario desaparezca por desconexion
actu_kreature = 1; // segundos para sincronizar criaturas
nav_celda = 32; // talla celdas de navegacion NPCs
kreaturas = ceil((sprite_get_number(d_kreature) / 4) * 1.5); // numero de mascotas NPCs
quieto_min = 30; // segundos quieto el NPC
quieto_max = 180;
velocidad = 90; // desplazamiento avatar
expresion = 2; // segundos
dialogo = 3; // segundos base
libelulas = 101; // numero de insectos decorativos
dialogo_w = 0.12; // bonus segundos por letra
vercorreo = 3; // segundos para no anular vista de correo
relojes_acelerados = 2; // divisor para tiempos de confesion, cultivo (no acelerar = 1, acel = 30)
relojini_parlante = 3; // tiempo muerto entre prender o apagar, evita cambios rapidos
ver_perfil = 72; // distancia a usuario para ver su perfil
dist_seghala = 24; // distancia para engancharse a usuario, halarlo o seguirlo
dura_difusion = 60 * 10; // segundos mantener mensaje de radios
trozos_file = 6; // limite talla archivos FTP, trozos x 64 KB
entrenotas = 0.15; // minimo tiempo para repetir notas en el piano
cerca_especial = 64; // distancia detectar objeto especial
num_diapositivas = 12; // maximas diapositivas que puede tener la presentacion
limite_correos = 300; // para 200 palabras c/u
radio_zona = 100; // para techos, puntos especiales y nombres de espacios
total_contactos = 10; // maximas fichas de contacto a tener
total_bloqueados = 40; // maximos usuarios bloqueados
confesion_futuro_min = 60 * 5; // segundos a futuro para mostrar confesion, azar min
confesion_futuro_max = 60 * 15; // segundos a futuro para mostrar confesion, azar max
ahorcado_palabras = ds_list_create();
ds_list_add(ahorcado_palabras, ""); // lista words
reloj_ahorcado_palabras_max = 60; // segundos cada cuanto buscar palabras en diccionarios
juegovida_celda = 16; // talla celda del juego
nivel_celda = 4; // talla celda del juego
signal_reloj = 0.05; // frecuencia creacion particulas generador ondas
signal_dist = 400; // distancia max alcanzada por particulas generador ondas
vel_chispa = 200; // vel de chispa electronica para circuitos
vel_bala = 404; // vel de proyectil disparo
cadencia_bala = 0.5; // cada cuanto se repiten disparos
recarga_bala = 3; // tiempo que tarda en rellenarse la municion
municion_bala = 9; // disparos seguidos maximos antes de recargar
oscuridad = 0.5; // de 0-1 que tan oscuro es el suelo a plena noche
poder_cultivar = 60; // segundos para poder poner otra semilla
celda_ajedrez = 24; // talla celda del juego
time_respawn = 30; // segundos para respawn
bicho_vision = 250; // bicho evolutivo radio de vision maxima
bicho_velocidad = 120; // bicho evolutivo velocidad maxima desplazamiento
bicho_cp = 0.015; // bicho evolutivo consumo de energia pasivo
bicho_ca = 0.00025; // bicho evolutivo consumo de energia activo
bicho_alimento = 10; // energia aportada por un elimaneto al bicho evolutivo
bicho_capacidad = 70; // cantidad de energia que guarda el bicho evolutivo maximamente
bicho_dormir = 10; // segundos maximos que el bicho eovlutivo permanece quieto
vel_alimento = 50; // velocidad criatura alimento del bicho
desvanecer_muertos = 8; // segundos desaparecer cosas
secuencia_minima = 3; // primer nivel para el juego de frecuencia
secuencia_velocidad = 0.5; // segundos que dura cada tramo de secuencia
tiro_parabolico = 3; // cada cuantos segundos puede disparar el parabolico
tiro_parabofuerza = 0.75; // conversion de fuerza del parabolico, si fuerza max 255
tiro_parabogravedad = 16; // aceleracion de la gravedad en el tiro
calculadora_puntos = 9; // puntos para ganar
calculadora_solo = 4; // segundos para jugar solo con la calculadora
muestra_memoria = 2; // segundos mostrar ficha a memorizar
virus_incubacion = 60 * 10; // segundos maximos de incubacion del virus
virus_enfermedad = 60 * 10; // segundos maximos de enfermedad del virus
virus_distancia = 169; // distancia para contagiarse
celda_lienzo = 6; // talla de una baldoza del lienzo
cantidad_opiniones = 10; // para objetos de efecto global como clima
duracion_opiniones = 60 * 20; // segundos duracion opiniones objetos de efecto global
preguntas_max = 20; // maximo de preguntas para examen
encuesta_max = 10; // numero maximo de preguntas encuesta
globo_altura = 250; // hasta donde llega el globo antes de desaparecer
reloj_pintura = 30; // duracion pintura
limite_ahorcado = 8; // maximas letras que puede tener una palabra ahorcado

// pequenno tutorial
tutorial = s_ini_open("tutorial", 2);

// grupos de usuarios
grupos[0] = "Ingeniería";
grupos[1] = "Ciencia";
grupos[2] = "Arte";
grupos[3] = "Medicina";
grupos[4] = "Humanid.";
grupos[5] = "Economía";
grupos[6] = "Deporte";
grupos[7] = "Magia";
grupos[8] = "Logística";
grupos[9] = "???";

// titulos de usuarios
title[0] = "Est. ";
title[1] = "Pro. ";
title[2] = "Mas. ";
title[3] = "Doc. ";
title[4] = "Tec. ";
title[5] = "Egr. ";
title[6] = "Obr. ";
title[7] = "Adm. ";
title[8] = "Vis. ";

// colores para pelo, ropa, etc
colores[0] = make_colour_rgb(242, 237, 49); // yellow
colores[1] = make_colour_rgb(242, 181, 53); // orange
colores[2] = make_colour_rgb(241, 83, 37); // red
colores[3] = make_colour_rgb(62, 230, 213); // aqua
colores[4] = make_colour_rgb(60, 89, 232); // blue
colores[5] = make_colour_rgb(151, 244, 47); // lime
colores[6] = make_colour_rgb(108, 194, 84); // green
colores[7] = make_colour_rgb(254, 213, 171); // skin
colores[8] = make_colour_rgb(240, 118, 250); // fuchsia
colores[9] = make_colour_rgb(177, 64, 238); // purple
colores[10] = make_colour_rgb(227, 157, 51); // caqui
colores[11] = make_colour_rgb(182, 129, 97); // brown
colores[12] = make_colour_rgb(131, 107, 71); // darkwood
colores[13] = make_colour_rgb(224, 224, 224); // white
colores[14] = make_colour_rgb(143, 143, 143); // gray
colores[15] = make_colour_rgb(68, 68, 68); // black

// para editor
// pared, arbol, decorado, baldoza, especial, zona, game, luz, punto
herramienta = "pared";
puntox = 0;
puntoy = 0;
clicdx = 0;
clicdy = 0;
seleccion = 0;
colorsito = 0;
titulo_zona = "";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///USRs

// abrir perfiles de usuario
s_open_respawn();
var fff = file_find_first("usuario*.ini", 0);
var garbas = ds_list_create();
while fff != "" {
    if s_open_usuario(fff, false) == noone {
        ds_list_add(garbas, fff);
    }
    fff = file_find_next();
}
file_find_close();
var grb = ds_list_size(garbas);
for (var i = 0; i &lt; grb; i++) {
    file_delete(ds_list_find_value(garbas, i));
}
ds_list_destroy(garbas);
var eli = s_ini_open("eliminados", 0);
s_ini_save("eliminados", eli + grb);

// crear o encontrar al usuario principal de este juego
var ilegal = 0;
mipropio = noone;
with o_usuario {
    if propietario {
        o_control.mipropio = id;
        ilegal++;
    }
}
if mipropio == noone {
    mipropio = s_open_usuario("", true);
    ilegal++;
}

// evitar mas de un usuario controlado por el mismo juego
if ilegal != 1 {
    show_message("Intento ilegal de manejar más de un usuario o ninguno (" +
        string(ilegal) + ")");
    game_end();
    exit;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LAN

globalvar g_network, g_lan_id;
g_network = s_ini_open("g_network", m_net_peer);

// estadisticas network
network_enviados = 0;
network_env_bytes = 0;
network_recibidos = 0;
network_rec_bytes = 0;
reloj_network_est = 0;
network_estadist = "";

// para actualizar widgets
esp_sinc = 3;
optimi_sinc = esp_sinc + random(1);

// para envio de contactos
esp_contactos = 6;
reloj_contactos = esp_contactos + random(1);

// para conectarse
mascara = s_ini_open("mascaraLAN", "192.168.1.");
esp_lan = 5;
reloj_busqueda_lan = esp_lan + random(1);
udp_tiempomuerto = 30; // segundos dar a usuario como desconectado

// buffer persistente para saludo general
influencia_peer = random(100);
llave_lan = irandom(65535);
saludo_buf = s_header(0, 8);
buffer_write(saludo_buf, buffer_u16, mipropio.idweb);
buffer_write(saludo_buf, buffer_u16, llave_lan);
buffer_write(saludo_buf, buffer_f32, influencia_peer);
saludo_size = buffer_get_size(saludo_buf);

// conexion LAN
conexion = network_create_socket_ext(network_socket_udp, m_web);
if conexion &lt; 0 {
    show_message("Advertencia: puerto " + string(m_web) + " no disponible!!!");
    game_end();
    exit;
}

// modelo info conectados
conectados = ds_list_create(); // IPs
tiempomuerto = ds_list_create(); // delay desconexion
idconectados = ds_list_create(); // IDwebs
esserver = ds_list_create(); // para saber si es server, util desde cliente
prioridad = ds_priority_create(); // para ver que peer gana

// agregar al usuario actual y auto saludarse
ds_list_add(conectados, "127.0.0.1");
ds_list_add(tiempomuerto, udp_tiempomuerto);
ds_list_add(idconectados, mipropio.idweb);
ds_list_add(esserver, false); // no importa si es un server
ds_priority_add(prioridad, mipropio.idweb, influencia_peer);
network_send_udp_raw(conexion, "127.0.0.1", m_web, saludo_buf, saludo_size);

// comenzar a buscar red VLAN oficial
mascvlan = "";
intercalador = false; // intermitente para intercalar mascara vs mascvlan
if os_is_network_connected() {
    http_get("http://omwekiatl.xyz/UVV_LAN.php");
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MUNDO

// crear el mundo
baldozall = noone;
s_open_mapa();
instance_create(0, 0, o_virtual_correo);
instance_create(0, 0, o_virtual_molino);

// obtener foto del mapa
if !file_exists("mapa.png") {
    s_foto_mapa("mapa.png", 1024);
}
var spr = sprite_add("mapa.png", 0, false, false, 0, 0);
var srf = surface_create(71, 61);
surface_set_target(srf);
draw_sprite_ext(spr, 0, 0, 0,
    (71 + 1) / sprite_get_width(spr),
    (61 + 1) / sprite_get_height(spr),
    0, c_white, 1);
surface_reset_target();
dd_mapa = sprite_create_from_surface(srf, 0, 0, 71, 61, false, false, 0, 0);
sprite_delete(spr);
surface_free(srf);

// rejilla para navegacion
zona = noone;
if !m_editor {
    zona = s_crea_rejilla();
}

// criaturas
if !m_editor {
    var kuant = 0;
    var xx, yy, nea;
    var fff = file_find_first("kreature*.ini", 0);
    while fff != "" {
        fff = filename_name(fff);
        while true {
            xx = random(room_width);
            yy = random(room_height);
            nea = instance_nearest(xx, yy, o_pnt_futbol);
            if point_distance(xx, yy, nea.x, nea.y) &lt; radio_zona {
                break;
            }
        }
        with instance_create(xx, yy, o_kreature) {
            idweb = real(string_replace(string_replace(fff, "kreature", ""), ".ini", ""));
        }
        kuant++;
        if kuant &gt;= kreaturas {
            break;
        }
        fff = file_find_next();
    }
    file_find_close();
    var n = 1;
    repeat kreaturas - kuant {
        while true {
            xx = random(room_width);
            yy = random(room_height);
            nea = instance_nearest(xx, yy, o_pnt_futbol);
            if point_distance(xx, yy, nea.x, nea.y) &lt; radio_zona {
                break;
            }
        }
        with instance_create(xx, yy, o_kreature) {
            idweb = n;
            n++;
        }
    }
}

// crear voladores decorativos
if !m_editor {
    var xx, yy, nat, ddd, aux;
    for (var i = 0; i &lt; libelulas; i++) {
        do {
            xx = random(room_width);
            yy = random(room_height);
            ddd = point_direction(xx, yy, room_width / 2, room_height / 2);
            nat = instance_nearest(xx, yy, o_pnt_floral);
        }
        until point_distance(xx, yy, nat.x, nat.y) &lt; radio_zona and
            !collision_line(xx, yy, xx + lengthdir_x(radio_zona, ddd),
            yy + lengthdir_y(radio_zona, ddd), o_bloque, true, false);
        aux = instance_create(xx, yy, o_libelula);
        aux.idloc = i;
    }
    instance_create(room_width / 2, room_height / 2, o_dron);
}

// eliminar cosas repetidas
var aux;
while !ds_list_empty(lista_borra_repetidos) {
    aux = ds_list_find_value(lista_borra_repetidos, 0);
    ds_list_delete(lista_borra_repetidos, 0);
    with aux {
        instance_destroy();
    }
}
ds_list_destroy(lista_borra_repetidos);

// dibujar los tiles de baldozas
if is_array(baldozall) {
    for (var i = 0; i &lt; array_height_2d(baldozall); i++) {
        tile_add(dd_baldoza, baldozall[i, 2] * 64, baldozall[i, 3] * 64,
            64, 64, baldozall[i, 0] - 32, baldozall[i, 1] - 32, 1);
    }
}
with o_baldoza {
    instance_destroy();
}

// solo para pruebas, sobrepoblar con ficticios
//s_poblar(99);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME
dlt = min(0.1, delta_time * 0.000001);

// poner microfono en camara
audio_listener_position(view_xview[0] + view_wview[0] / 2,
    view_yview[0] + view_hview[0] / 2, view_hview[0] / 2);

// ahorro grafico
var xx = view_xview[0] - 300;
var yy = view_yview[0] - 300;
var xw = view_xview[0] + view_wview[0] + 300;
var yh = view_yview[0] + view_hview[0] + 300;
with o_visible {
    visible = point_in_rectangle(x, y, xx, yy, xw, yh) ;
}
if m_editor {
    with o_usuario {
        visible = false;
    }
    with o_kreature {
        visible = false;
    }
}

// buscar nuevas palabras ahorcado
reloj_ahorcado_palabras -= dlt;
if reloj_ahorcado_palabras &lt;= 0 {
    reloj_ahorcado_palabras = reloj_ahorcado_palabras_max;
    s_ahorcado_words();
}

// buscar nombres repetidos y si existe contacto
if random(1) &lt; 0.003 {
    // tambien hace que solo un cartel UV se pueda tener
    var uv = false;
    var id_uv = sprite_get_number(d_objeto) - 1;
    with o_usuario {
        s_nombre_unico(id);
        if objeto == id_uv {
            if uv {
                objeto = 0;
            }
            else {
                uv = true;
            }
        }
    }
    with mipropio {
        for (var c = 0; c &lt; o_control.total_contactos; c++) {
            if amigo[c] != 0 and s_busca_nombre(amigo[c]) == "???" {
                amigo[c] = 0;
            }
        }
        for (var b = 0; b &lt; o_control.total_bloqueados; b++) {
            if enemigo[b] != 0 and s_busca_nombre(enemigo[b]) == "???" {
                enemigo[b] = 0;
            }
        }
    }
}

// para cerrar juego
reloj_exit = max(0, reloj_exit - dlt);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LAN

// buscar redes LAN
reloj_busqueda_lan -= dlt;
if reloj_busqueda_lan &lt;= 0 {
    reloj_busqueda_lan = esp_lan + random(1);
    var ok = true;
    if g_network == m_net_client {
        for (var i = 1; i &lt; ds_list_size(conectados); i++) {
            if ds_list_find_value(esserver, i) {
                ok = false;
                break;
            }
        }
    }
    if ok {
        intercalador = !intercalador;
        var msc = mascvlan;
        if intercalador or msc == "" {
            msc = mascara;
        }
        for (var i = 1; i &lt; 255; i++) {
            network_enviados++;
            network_env_bytes += saludo_size + m_head_udp;
            network_send_udp_raw(conexion, msc + string(i), m_web, saludo_buf, saludo_size);
        }
    }
}

// enviar contactos
if g_network != m_net_client {
    reloj_contactos -= dlt;
    if reloj_contactos &lt;= 0 {
        reloj_contactos = esp_contactos + random(1);
        var tot = ds_list_size(conectados) - 1;
        var buf = s_header(29, 2 + 6 * tot);
        buffer_write(buf, buffer_u16, tot);
        var idw;
        for (var i = 1; i &lt; ds_list_size(conectados); i++) {
            idw = ds_list_find_value(idconectados, i);
            buffer_write(buf, buffer_string, ds_list_find_value(conectados, i));
            buffer_write(buf, buffer_u16, idw);
            buffer_write(buf, buffer_f32, ds_priority_find_priority(prioridad, idw));
        }
        s_udp_send(buf, "");
    }
}

// eliminar de la lista a los desconectados
var new;
var revisar = false;
for (var i = 1; i &lt; ds_list_size(tiempomuerto); i++) {
    new = ds_list_find_value(tiempomuerto, i) - dlt;
    if new &lt;= 0 and ds_list_find_value(esserver, i) {
        ds_priority_delete_value(prioridad, ds_list_find_value(idconectados, i));
        ds_list_delete(tiempomuerto, i);
        ds_list_delete(conectados, i);
        ds_list_delete(idconectados, i);
        ds_list_delete(esserver, i);
        revisar = true;
    }
    else {
        ds_list_replace(tiempomuerto, i, new);
    }
}
// quitar todos los conectados si cliente pierde conexion con servidor
if revisar and g_network == m_net_client {
    revisar = false;
    for (var i = 1; i &lt; ds_list_size(tiempomuerto); i++) {
        if ds_list_find_value(esserver, i) {
            revisar = true;
            break;
        }
    }
    if !revisar {
        for (var i = ds_list_size(conectados) - 1; i &gt; 0; i--) {
            ds_priority_delete_value(prioridad,
                ds_list_find_value(idconectados, i));
            ds_list_delete(tiempomuerto, i);
            ds_list_delete(conectados, i);
            ds_list_delete(idconectados, i);
            ds_list_delete(esserver, i);
        }
    }
}

// enviar solicitu de actualizacion
optimi_sinc -= dlt;
if optimi_sinc &lt;= 0 {
    optimi_sinc = esp_sinc + random(1);
    var buf = s_buf_fechas();
    s_udp_send(buf, "");
}

// estadisticas networking
reloj_network_est -= dlt;
if reloj_network_est &lt;= 0 {
    randomize();
    var muestreo = 10; // segundos para muestreo estadisticas
    reloj_network_est += muestreo;
    // datos
    network_estadist =
        "Env: " + string((network_enviados / muestreo) / 1) + " /s" +
        "#Env: " + string(round(((network_env_bytes * 8) / muestreo) / 1000)) + " Kbps" +
        "#Rec: " + string((network_recibidos / muestreo) / 1) + " /s" +
        "#Rec: " + string(round(((network_rec_bytes * 8) / muestreo) / 1000)) + " Kbps";
    // limpiar
    network_enviados = 0;
    network_env_bytes = 0;
    network_recibidos = 0;
    network_rec_bytes = 0;
}

// actualizar constantemente posicion de NPCs
if s_permiso_pro() {
    reloj_kriature -= dlt;
    if reloj_kriature &lt;= 0 {
        reloj_kriature = actu_kreature;
        var buf = s_buf_kreatures();
        s_udp_send(buf, "");
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EDITOR

if m_editor {
    s_cam_zoom();
    s_cam_move(mouse_x, mouse_y, id);
    
    if keyboard_check_pressed(vk_escape) {
        if reloj_exit == 0 {
            reloj_exit = 1;
        }
        else {
            game_end();
            exit;
        }
    }
    else if keyboard_check_pressed(vk_enter) {
        s_save_mapa("_sav");
    }
    else if keyboard_check_pressed(ord('1')) {
        herramienta = "pared";
        seleccion = 0;
    }
    else if keyboard_check_pressed(ord('2')) {
        herramienta = "arbol";
        seleccion = 0;
    }
    else if keyboard_check_pressed(ord('3')) {
        herramienta = "decorado";
        seleccion = 0;
    }
    else if keyboard_check_pressed(ord('4')) {
        herramienta = "baldoza";
        seleccion = 0;
    }
    else if keyboard_check_pressed(ord('5')) {
        herramienta = "especial";
        seleccion = 0;
    }
    else if keyboard_check_pressed(ord('6')) {
        herramienta = "zona";
        seleccion = 0;
    }
    else if keyboard_check_pressed(ord('7')) {
        herramienta = "game";
        seleccion = 0;
    }
    else if keyboard_check_pressed(ord('8')) {
        herramienta = "luz";
        seleccion = 0;
    }
    else if keyboard_check_pressed(ord('9')) {
        herramienta = "punto";
        seleccion = 0;
    }
    else if keyboard_check_pressed(vk_f10) {
        var fff = get_save_filename("IMAGEN|*.png", "map");
        if fff != "" {
            screen_save(fff);
        }
    }
    
    switch herramienta {
        case "pared":
            if keyboard_check_pressed(vk_down) {
                seleccion--;
                if seleccion &lt; 0 {
                    seleccion = sprite_get_number(d_estructura) - 1;
                }
            }
            else if keyboard_check_pressed(vk_up) {
                seleccion++;
                if seleccion &gt;= sprite_get_number(d_estructura) {
                    seleccion = 0;
                }
            }
            if keyboard_check_pressed(vk_left) {
                colorsito--;
                if colorsito &lt; -1 {
                    colorsito = array_length_1d(o_control.colores) - 1;
                }
            }
            else if keyboard_check_pressed(vk_right) {
                colorsito++;
                if colorsito &gt;= array_length_1d(o_control.colores) {
                    colorsito = -1;
                }
            }
            if mouse_check_button_pressed(mb_left) {
                puntox = mouse_x;
                puntoy = mouse_y;
            }
            else if mouse_check_button_released(mb_left) {
                var xx, yy, aux;
                var borra = keyboard_check(vk_shift);
                var d = point_direction(puntox, puntoy, mouse_x, mouse_y);
                for (var i = 0; i &lt;= point_distance(puntox, puntoy,
                        mouse_x, mouse_y); i++) {
                    xx = puntox + lengthdir_x(i, d);
                    yy = puntoy + lengthdir_y(i, d);
                    aux = instance_place(xx, yy, o_visible);
                    if aux != noone and borra {
                        with aux {
                            switch object_index {
                                case o_pared:
                                    instance_destroy();
                                    break;
                                case o_solido:
                                case o_decorado:
                                    if imagen == d_estructura {
                                        instance_destroy();
                                    }
                                    break;
                            }
                        }
                    }
                    else if aux == noone and !borra {
                        if seleccion == 0 {
                            aux = instance_create(xx, yy, o_pared);
                            aux.colorsito = colorsito;
                        }
                        else if seleccion == 1 or seleccion == 2 {
                            aux = instance_create(xx, yy, o_decorado);
                            aux.imagen = d_estructura;
                            aux.subimagen = seleccion;
                        }
                        else {
                            aux = instance_create(xx, yy, o_solido);
                            aux.imagen = d_estructura;
                            aux.subimagen = seleccion;
                        }
                    }
                }
                puntox = 0;
                puntoy = 0;
            }
            break;
        case "arbol":
            if keyboard_check_pressed(vk_down) {
                seleccion--;
                if seleccion &lt; 0 {
                    seleccion = sprite_get_number(d_arboles) - 1;
                }
            }
            else if keyboard_check_pressed(vk_up) {
                seleccion++;
                if seleccion &gt;= sprite_get_number(d_arboles) {
                    seleccion = 0;
                }
            }
            if keyboard_check(vk_shift) {
                if mouse_check_button(mb_left) {
                    var aux = instance_place(mouse_x, mouse_y, o_solido);
                    if aux != noone {
                        with aux {
                            if imagen == d_arboles {
                                instance_destroy();
                            }
                        }
                    }
                }
            }
            else if mouse_check_button_pressed(mb_left) {
                if !place_meeting(mouse_x, mouse_y, o_visible) {
                    var aux = instance_create(mouse_x, mouse_y, o_solido);
                    aux.imagen = d_arboles;
                    aux.subimagen = seleccion;
                }
            }
            break;
        case "decorado":
            if keyboard_check_pressed(vk_down) {
                seleccion--;
                if seleccion &lt; 0 {
                    seleccion = sprite_get_number(d_decorados) - 1;
                }
            }
            else if keyboard_check_pressed(vk_up) {
                seleccion++;
                if seleccion &gt;= sprite_get_number(d_decorados) {
                    seleccion = 0;
                }
            }
            if keyboard_check(vk_shift) {
                if mouse_check_button(mb_left) {
                    var aux = instance_place(mouse_x, mouse_y, o_decorado);
                    if aux != noone {
                        with aux {
                            if imagen == d_decorados {
                                instance_destroy();
                            }
                        }
                    }
                }
            }
            else if mouse_check_button_pressed(mb_left) {
                var aux = instance_place(mouse_x, mouse_y, o_visible);
                if aux != noone {
                    if point_distance(mouse_x, mouse_y, aux.x, aux.y) &gt; 4 {
                        aux = instance_create(mouse_x, mouse_y, o_decorado);
                        aux.imagen = d_decorados;
                        aux.subimagen = seleccion;
                    }
                }
                else {
                    aux = instance_create(mouse_x, mouse_y, o_decorado);
                    aux.imagen = d_decorados;
                    aux.subimagen = seleccion;
                }
            }
            break;
        case "baldoza":
            if keyboard_check_pressed(vk_down) {
                seleccion--;
                if seleccion &lt; 0 {
                    seleccion = sprite_get_number(d_baldoza) - 1;
                }
            }
            else if keyboard_check_pressed(vk_up) {
                seleccion++;
                if seleccion &gt;= sprite_get_number(d_baldoza) {
                    seleccion = 0;
                }
            }
            if keyboard_check_pressed(vk_left) {
                colorsito--;
                if colorsito &lt; 0 {
                    colorsito = array_length_1d(o_control.colores) - 1;
                }
            }
            else if keyboard_check_pressed(vk_right) {
                colorsito++;
                if colorsito &gt;= array_length_1d(o_control.colores) {
                    colorsito = 0;
                }
            }
            if mouse_check_button(mb_left) {
                if keyboard_check(vk_shift) {
                    var aux = instance_place(mouse_x, mouse_y, o_baldoza);
                    if aux != noone {
                        with aux {
                            instance_destroy();
                        }
                    }
                }
                else {
                    if !place_meeting(mouse_x, mouse_y, o_baldoza) {
                        aux = instance_create(mouse_x, mouse_y, o_baldoza);
                        aux.colorsito = colorsito;
                        aux.subimagen = seleccion;
                    }
                }
            }
            break;
        case "especial":
            if keyboard_check_pressed(vk_down) {
                seleccion--;
                if seleccion &lt; 0 {
                    seleccion = sprite_get_number(d_core) - 1;
                }
            }
            else if keyboard_check_pressed(vk_up) {
                seleccion++;
                if seleccion &gt;= sprite_get_number(d_core) {
                    seleccion = 0;
                }
            }
            if keyboard_check(vk_shift) {
                if mouse_check_button(mb_left) {
                    var aux = instance_place(mouse_x, mouse_y, o_especial);
                    if aux != noone {
                        with aux {
                            instance_destroy();
                        }
                    }
                }
            }
            else if mouse_check_button_pressed(mb_left) {
                if !place_meeting(mouse_x, mouse_y, o_visible) {
                    switch seleccion {
                        case 0: instance_create(mouse_x, mouse_y, o_biblioteca); break;
                        case 1: instance_create(mouse_x, mouse_y, o_lienzo); break;
                        case 2: instance_create(mouse_x, mouse_y, o_presentacion); break;
                        case 3: instance_create(mouse_x, mouse_y, o_tablero); break;
                        case 4: instance_create(mouse_x, mouse_y, o_pergamino); break;
                        case 5: instance_create(mouse_x, mouse_y, o_parlante); break;
                        case 6: instance_create(mouse_x, mouse_y, o_piano); break;
                        case 7: instance_create(mouse_x, mouse_y, o_escritos); break;
                        case 8: instance_create(mouse_x, mouse_y, o_confesionario); break;
                        case 9: instance_create(mouse_x, mouse_y, o_diccionario); break;
                        case 10: instance_create(mouse_x, mouse_y, o_radio); break;
                        case 11: instance_create(mouse_x, mouse_y, o_emisora); break;
                        case 12: instance_create(mouse_x, mouse_y, o_correo); break;
                        case 13: instance_create(mouse_x, mouse_y, o_monumento); break;
                        case 14: instance_create(mouse_x, mouse_y, o_estilo); break;
                        case 15: instance_create(mouse_x, mouse_y, o_registro); break;
                        case 16: instance_create(mouse_x, mouse_y, o_baul); break;
                        case 17: instance_create(mouse_x, mouse_y, o_antena); break;
                        case 18: instance_create(mouse_x, mouse_y, o_mapa); break;
                        case 19: instance_create(mouse_x, mouse_y, o_nivel); break;
                        case 20: instance_create(mouse_x, mouse_y, o_reloj); break;
                        case 21: instance_create(mouse_x, mouse_y, o_examen); break;
                        case 22: instance_create(mouse_x, mouse_y, o_encuesta); break;
                        case 23: instance_create(mouse_x, mouse_y, o_votacion); break;
                        case 24: instance_create(mouse_x, mouse_y, o_molino); break;
                        case 25: instance_create(mouse_x, mouse_y, o_alfombra); break;
                        case 26: instance_create(mouse_x, mouse_y, o_azar); break;
                        case 27: instance_create(mouse_x, mouse_y, o_ciclas); break;
                    }
                }
            }
            break;
        case "zona":
            if mouse_check_button_pressed(mb_left) {
                if keyboard_check(vk_shift) {
                    var otr = instance_place(mouse_x, mouse_y, o_zona);
                    if otr != noone {
                        with otr {
                            instance_destroy();
                        }
                    }
                }
                else if !collision_circle(mouse_x, mouse_y, radio_zona / 2, o_zona, true, false) {
                    instance_create(mouse_x, mouse_y, o_zona);
                }
            }
            else if keyboard_check_pressed(vk_up) {
                titulo_zona = get_string("Título de la zona", titulo_zona);
            }
            break;
        case "punto":
            if mouse_check_button_pressed(mb_left) {
                if keyboard_check(vk_shift) {
                    var otr = instance_place(mouse_x, mouse_y, o_punto);
                    if otr != noone {
                        with otr {
                            instance_destroy();
                        }
                    }
                }
                else if !collision_circle(mouse_x, mouse_y, radio_zona / 2, o_punto, true, false) {
                    instance_create(mouse_x, mouse_y, o_punto);
                }
            }
            else if keyboard_check_pressed(vk_up) {
                titulo_zona = get_string("Título de la zona", titulo_zona);
            }
            break;
        case "game":
            if keyboard_check_pressed(vk_down) {
                seleccion--;
                if seleccion &lt; 0 {
                    seleccion = sprite_get_number(d_game) - 1;
                }
            }
            else if keyboard_check_pressed(vk_up) {
                seleccion++;
                if seleccion &gt;= sprite_get_number(d_game) {
                    seleccion = 0;
                }
            }
            if keyboard_check(vk_shift) {
                if mouse_check_button(mb_left) {
                    var aux = instance_place(mouse_x, mouse_y, o_game);
                    if aux != noone {
                        with aux {
                            instance_destroy();
                        }
                    }
                }
            }
            else if mouse_check_button_pressed(mb_left) {
                if !place_meeting(mouse_x, mouse_y, o_visible) {
                    switch seleccion {
                        case 0: instance_create(mouse_x, mouse_y, o_acelerador); break;
                        case 1: instance_create(mouse_x, mouse_y, o_puntaje); break;
                        case 2: instance_create(mouse_x, mouse_y, o_planetario); break;
                        case 3: instance_create(mouse_x, mouse_y, o_signal); break;
                        case 4: instance_create(mouse_x, mouse_y, o_cultivo); break;
                        case 5: instance_create(mouse_x, mouse_y, o_shooter); break;
                        case 6: instance_create(mouse_x, mouse_y, o_juegovida); break;
                        case 7: instance_create(mouse_x, mouse_y, o_ahorcado); break;
                        case 8: instance_create(mouse_x, mouse_y, o_tarot); break;
                        case 9: instance_create(mouse_x, mouse_y, o_evolutivo); break;
                        case 10: instance_create(mouse_x, mouse_y, o_calculadora); break;
                        case 11: instance_create(mouse_x, mouse_y, o_secuencia); break;
                        case 12: instance_create(mouse_x, mouse_y, o_pipati); break;
                        case 13: instance_create(mouse_x, mouse_y, o_digital); break;
                        case 14: instance_create(mouse_x, mouse_y, o_memoria); break;
                        case 15: instance_create(mouse_x, mouse_y, o_virus); break;
                        case 16: instance_create(mouse_x, mouse_y, o_parabolico); break;
                        case 17: instance_create(mouse_x, mouse_y, o_cancha); break;
                        case 18: instance_create(mouse_x, mouse_y, o_ajedrez); break;
                        case 19: instance_create(mouse_x, mouse_y, o_batalla); break;
                        case 20: instance_create(mouse_x, mouse_y, o_omwekiatl); break;
                        case 21: instance_create(mouse_x, mouse_y, o_univalle); break;
                        case 22: instance_create(mouse_x, mouse_y, o_gym); break;
                        case 23: instance_create(mouse_x, mouse_y, o_anatomia); break;
                        case 24: instance_create(mouse_x, mouse_y, o_sex); break;
                    }
                }
            }
            break;
        case "luz":
            if keyboard_check(vk_shift) {
                if mouse_check_button(mb_left) {
                    var aux = instance_place(mouse_x, mouse_y, o_luz);
                    if aux != noone {
                        with aux {
                            instance_destroy();
                        }
                    }
                }
            }
            else if mouse_check_button_pressed(mb_left) {
                if !place_meeting(mouse_x, mouse_y, o_visible) {
                    instance_create(mouse_x, mouse_y, o_luz);
                }
            }
            break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var la_ip = ds_map_find_value(async_load, "ip");
var buf = ds_map_find_value(async_load, "buffer");
var sizbuf = ds_map_find_value(async_load, "size");
if sizbuf &gt;= 5 {
    buffer_seek(buf, buffer_seek_start, 0);
    var okk = true
    if buffer_read(buf, buffer_u16) != m_web {
        okk = false;
    }
    else if buffer_read(buf, buffer_u8) != m_version {
        okk = false;
    }
    else {
        var ttt = buffer_read(buf, buffer_u8);
        switch g_network {
            case m_net_peer:
                okk = ttt == m_net_peer;
                break;
            case m_net_server:
                okk = ttt == m_net_client;
                break;
            case m_net_client:
                okk = ttt == m_net_server;
                break;
            default:
                okk = false;
                break;
        }
    }
    if okk {
        network_recibidos++;
        network_rec_bytes += sizbuf + m_head_udp;
        var tt_tt = buffer_read(buf, buffer_u8);
        switch tt_tt {
            
            case 0: // saludo inicial o re saludar
                var idw = buffer_read(buf, buffer_u16);
                var llave = buffer_read(buf, buffer_u16);
                var influ = buffer_read(buf, buffer_f32);
                var pos = ds_list_find_index(conectados, la_ip);
                // el remitente IP no esta en la lista
                if pos == -1 {
                    var duplicado = ds_list_find_index(idconectados, idw);
                    // es este mismo IDweb actual
                    if duplicado == 0 {
                        // evitar auto desconexion por diferentes IP de esta misma maquina
                        if llave == llave_lan {
                            if ds_list_find_value(conectados, 0) == "127.0.0.1" {
                                ds_list_replace(conectados, 0, la_ip);
                            }
                        }
                        // pedir al duplicado de este actual usuario que se desconecte
                        else {
                            var buf = s_header(9, 0);
                            var tll = buffer_tell(buf);
                            network_enviados++;
                            network_env_bytes += tll + m_head_udp;
                            network_send_udp_raw(conexion, la_ip, m_web, buf, tll);
                            buffer_delete(buf);
                        }
                    }
                    // agregar al nuevo conectado y reenviar saludo por si acaso
                    else if duplicado == -1 {
                        var agg = true;
                        // el cliente solo puede conectar con un servidor a la vez
                        if g_network == m_net_client {
                            for (var i = 1; i &lt; ds_list_size(conectados); i++) {
                                if ds_list_find_value(esserver, i) {
                                    agg = false;
                                    break;
                                }
                            }
                        }
                        if agg {
                            ds_list_add(conectados, la_ip);
                            ds_list_add(tiempomuerto, udp_tiempomuerto);
                            ds_list_add(idconectados, idw);
                            ds_list_add(esserver, true);
                            ds_priority_add(prioridad, idw, influ);
                            network_enviados++;
                            network_env_bytes += saludo_size + m_head_udp;
                            network_send_udp_raw(conexion, la_ip, m_web, saludo_buf, saludo_size);
                        }
                    }
                    // los duplicados a desconectar se trataran en el siguiente else
                }
                // el remitente IP ya esta en la lista, pero no coinciden los IDweb
                else if ds_list_find_value(idconectados, pos) != idw {
                    // si el idweb del remitente es desconocido en la lista, actualizarlo
                    var duplicado = ds_list_find_index(idconectados, idw);
                    if duplicado == -1 {
                        ds_list_replace(idconectados, pos, idw);
                    }
                    // el idweb esta en otro lado de la lista que no coincide con su IP
                    else if g_network == m_net_server {
                        var buf = s_header(9, 0);
                        var tll = buffer_tell(buf);
                        network_enviados++;
                        network_env_bytes += tll + m_head_udp;
                        network_send_udp_raw(conexion, la_ip, m_web, buf, tll);
                        buffer_delete(buf);
                    }
                    else if llave != llave_lan {
                        // tratar de corregir colision
                        with mipropio {
                            if file_exists("usuario" + string(idweb) + ".ini") {
                                file_delete("usuario" + string(idweb) + ".ini");
                            }
                            idweb = irandom_range(1, 65535);
                        }
                        if file_exists("usuario" + string(idw) + ".ini") {
                            file_delete("usuario" + string(idw) + ".ini")
                        }
                        show_message("Sorry, su ID de usuario estaba duplicado (Tx), intente de nuevo");
                        game_end();
                        exit;
                    }
                }
                break;
            
            case 9: // solicitud de desconexion por duplicado
                if g_network == m_net_server {
                    break;
                }
                with mipropio {
                    if file_exists("usuario" + string(idweb) + ".ini") {
                        file_delete("usuario" + string(idweb) + ".ini");
                    }
                    idweb = irandom_range(1, 65535);
                }
                show_message("Sorry, su ID de usuario estaba duplicado (Rx), intente de nuevo");
                game_end();
                exit;
            
            case 1: // datos de usuarios
                s_sync_usuario(buf);
                break;
            
            case 2: // lienzo
                var idw = buffer_read(buf, buffer_u16);
                with o_lienzo {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            for (var w = 0; w &lt; ds_grid_width(imagen); w++) {
                                for (var h = 0; h &lt; ds_grid_height(imagen); h++) {
                                    ds_grid_set(imagen, w, h, buffer_read(buf, buffer_u32));
                                }
                            }
                            for (var w = 0; w &lt; ds_grid_width(imagen); w++) {
                                for (var h = 0; h &lt; ds_grid_height(imagen); h++) {
                                    ds_grid_set(transp, w, h, buffer_read(buf, buffer_u8) / 255);
                                }
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 3: // pergamino
                var idw = buffer_read(buf, buffer_u16);
                with o_pergamino {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            texto = buffer_read(buf, buffer_string);
                            textote = buffer_read(buf, buffer_string);
                        }
                        break;
                    }
                }
                break;
            
            case 4: // parlante
                var idw = buffer_read(buf, buffer_u16);
                with o_parlante {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            mute = buffer_read(buf, buffer_u8);
                            if sizbuf &gt; 10 {
                                s_limpia_parlante(id, false);
                                // obtener datos buffer
                                var id_snd = string(buffer_read(buf, buffer_u16));
                                var tot = string(buffer_read(buf, buffer_u8));
                                var act = buffer_read(buf, buffer_u8);
                                var txt = buffer_read(buf, buffer_string);
                                // actualizar cabecera
                                if ds_list_empty(archivo) {
                                    s_limpia_parlante(id, true);
                                    ds_list_add(archivo, id_snd);
                                    ds_list_add(archivo, tot);
                                    ds_list_add(archivo, string_repeat("0", tot));
                                    repeat tot {
                                        ds_list_add(archivo, "");
                                    }
                                }
                                else if ds_list_find_value(archivo, 0) != id_snd {
                                    s_limpia_parlante(id, true);
                                    ds_list_add(archivo, id_snd);
                                    ds_list_add(archivo, tot);
                                    ds_list_add(archivo, string_repeat("0", tot));
                                    repeat tot {
                                        ds_list_add(archivo, "");
                                    }
                                }
                                // poner tramo respectivo
                                ds_list_replace(archivo, 3 + act, txt);
                                var flags = ds_list_find_value(archivo, 2);
                                flags = string_set_byte_at(flags, act + 1, ord('1'));
                                ds_list_replace(archivo, 2, flags);
                                // verificar si esta completo
                                if s_parlante_okey(id) {
                                    hubo_cambio = true;
                                    fecha = fec;
                                }
                            }
                            else {
                                fecha = fec;
                                s_limpia_parlante(id, true);
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 5: // emisora
                var idw = buffer_read(buf, buffer_u16);
                with o_emisora {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            texto = buffer_read(buf, buffer_string);
                        }
                        break;
                    }
                }
                break;
            
            case 6: // nota musical
                var idw = buffer_read(buf, buffer_u16);
                with o_piano {
                    if idweb == idw {
                        var nota = buffer_read(buf, buffer_u8);
                        s_piano_nota(id, nota, false);
                        break;
                    }
                }
                break;
            
            case 7: // piano
                var idw = buffer_read(buf, buffer_u16);
                with o_piano {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            mute = buffer_read(buf, buffer_u8);
                            ds_list_clear(melodia);
                            aguja = 0;
                            var tot = buffer_read(buf, buffer_u16);
                            for (var i = 0; i &lt; tot; i++) {
                                ds_list_add(melodia, buffer_read(buf, buffer_u8));
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 8: // monumento
                var idw = buffer_read(buf, buffer_u16);
                with o_monumento {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32)
                        if fec &gt; fecha {
                            fecha = fec;
                            imagenpng = buffer_read(buf, buffer_string);
                            mibandera = buffer_read(buf, buffer_u8);
                            s_actualiza_monumento(id);
                        }
                        break;
                    }
                }
                break;
            
            case 10: // escritos
                var idw = buffer_read(buf, buffer_u16);
                with o_escritos {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            for (var i = 0; i &lt; ds_list_size(textos); i++) {
                                ds_list_replace(textos, i, buffer_read(buf, buffer_string));
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 11: // tablero
                var idw = buffer_read(buf, buffer_u16);
                with o_tablero {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            for (var w = 0; w &lt; ds_grid_width(imagen); w++) {
                                for (var h = 0; h &lt; ds_grid_height(imagen); h++) {
                                    ds_grid_set(imagen, w, h, buffer_read(buf, buffer_u8));
                                }
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 12: // diccionario
                var idw = buffer_read(buf, buffer_u16);
                with o_diccionario {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            aguja = buffer_read(buf, buffer_u8);
                            var ww = ds_grid_width(imagen);
                            var hh = ds_grid_height(imagen);
                            var lnz = ds_grid_create(ww, hh);
                            for (var i = 0; i &lt; ds_list_size(titulos); i++) {
                                ds_list_replace(titulos, i, buffer_read(buf, buffer_string));
                                ds_list_replace(infos, i, buffer_read(buf, buffer_string));
                                if buffer_read(buf, buffer_u8) == 0 {
                                    ds_list_replace(fotos, i, "");
                                }
                                else {
                                    for (var w = 0; w &lt; ww; w++) {
                                        for (var h = 0; h &lt; hh; h++) {
                                            ds_grid_set(lnz, w, h, buffer_read(buf, buffer_u8));
                                        }
                                    }
                                    ds_list_replace(fotos, i, ds_grid_write(lnz));
                                }
                            }
                            ds_grid_destroy(lnz);
                            s_diccionario_aguja(id);
                        }
                        break;
                    }
                }
                break;
            
            case 13: // cambia hoja diccionario
                var idw = buffer_read(buf, buffer_u16);
                with o_diccionario {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            aguja = buffer_read(buf, buffer_u8);
                            s_diccionario_aguja(id);
                        }
                        break;
                    }
                }
                break;
            
            case 14: // biblioteca
                var idw = buffer_read(buf, buffer_u16);
                with o_biblioteca {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32); // fecha general inutil
                        var aract = buffer_read(buf, buffer_u8);
                        var fecact = buffer_read(buf, buffer_u32);
                        if fecact &gt; fechas[aract] {
                            var aux = ds_list_find_value(archivos, aract);
                            if sizbuf &gt; 14 {
                                // obtener datos buffer
                                var namef = string(buffer_read(buf, buffer_string));
                                var tot = string(buffer_read(buf, buffer_u8));
                                var act = buffer_read(buf, buffer_u8);
                                var txt = buffer_read(buf, buffer_string);
                                // actualizar cabecera
                                if ds_list_empty(aux) {
                                    ds_list_add(aux, namef);
                                    ds_list_add(aux, tot);
                                    ds_list_add(aux, string_repeat("0", tot));
                                    repeat tot {
                                        ds_list_add(aux, "");
                                    }
                                }
                                else if ds_list_find_value(aux, 0) != namef {
                                    ds_list_clear(aux);
                                    ds_list_add(aux, namef);
                                    ds_list_add(aux, tot);
                                    ds_list_add(aux, string_repeat("0", tot));
                                    repeat tot {
                                        ds_list_add(aux, "");
                                    }
                                }
                                // poner tramo respectivo
                                ds_list_replace(aux, 3 + act, txt);
                                var flags = ds_list_find_value(aux, 2);
                                flags = string_set_byte_at(flags, act + 1, ord('1'));
                                ds_list_replace(aux, 2, flags);
                                // verificar completud
                                if string_count("1", ds_list_find_value(aux, 2)) ==
                                        real(ds_list_find_value(aux, 1)) {
                                    fechas[aract] = fecact;
                                    fecha = s_minmax_vec(fechas, true);
                                }
                            }
                            else {
                                fechas[aract] = fecact;
                                fecha = s_minmax_vec(fechas, true);
                                ds_list_clear(aux);
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 15: // presentacion
                var idw = buffer_read(buf, buffer_u16);
                with o_presentacion {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            aguja = buffer_read(buf, buffer_u8);
                            ds_list_clear(fotos);
                            if aguja != 255 {
                                var tot = buffer_read(buf, buffer_u8);
                                var ww = ds_grid_width(imagen);
                                var hh = ds_grid_height(imagen);
                                var lnz = ds_grid_create(ww, hh);
                                for (var i = 0; i &lt; tot; i++) {
                                    for (var w = 0; w &lt; ww; w++) {
                                        for (var h = 0; h &lt; hh; h++) {
                                            ds_grid_set(lnz, w, h, buffer_read(buf, buffer_u8));
                                        }
                                    }
                                    ds_list_add(fotos, ds_grid_write(lnz));
                                }
                                ds_grid_destroy(lnz);
                            }
                            s_presentacion_aguja(id);
                        }
                        break;
                    }
                }
                break;
            
            case 16: // correo
                with o_virtual_correo {
                    var fec = buffer_read(buf, buffer_u32);
                    if fec &gt; fecha {
                        fecha = fec;
                        var tot = buffer_read(buf, buffer_u16);
                        ds_list_clear(mensajes);
                        ds_list_clear(emisores);
                        ds_list_clear(receptores);
                        ds_list_clear(fechas);
                        for (var i = 0; i &lt; tot; i++) {
                            ds_list_add(mensajes, buffer_read(buf, buffer_string));
                            ds_list_add(emisores, buffer_read(buf, buffer_u16));
                            ds_list_add(receptores, buffer_read(buf, buffer_u16));
                            ds_list_add(fechas, buffer_read(buf, buffer_u32));
                        }
                    }
                }
                break;
            
            case 17: // mute parlante
                var idw = buffer_read(buf, buffer_u16);
                with o_parlante {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            if s_parlante_okey(id) {
                                fecha = fec;
                                mute = buffer_read(buf, buffer_u8);
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 18: // confesionario
                var idw = buffer_read(buf, buffer_u16);
                with o_confesionario {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            leido = buffer_read(buf, buffer_u8);
                            futuro = buffer_read(buf, buffer_u32);
                            for (var i = 0; i &lt; ds_list_size(textos); i++) {
                                ds_list_replace(textos, i, buffer_read(buf, buffer_string));
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 19: // usuario desconectado, solo movimiento
                var idw = buffer_read(buf, buffer_u16);
                with o_usuario {
                    if idweb == idw {
                        if !estaonline {
                            posx = buffer_read(buf, buffer_u16);
                            posy = buffer_read(buf, buffer_u16);
                        }
                        break;
                    }
                }
                break;
            
            case 20: // tarot
                var idw = buffer_read(buf, buffer_u16);
                with o_tarot {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            for (var i = 0; i &lt; 3; i++) {
                                carta[i] = buffer_read(buf, buffer_u8);
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 21: // ahorcado
                var idw = buffer_read(buf, buffer_u16);
                with o_ahorcado {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            palabra = buffer_read(buf, buffer_string);
                            adivinada = buffer_read(buf, buffer_string);
                            vidas = buffer_read(buf, buffer_u8);
                            historial = buffer_read(buf, buffer_string);
                        }
                        break;
                    }
                }
                break;
            
            case 22: // juegovida
                var idw = buffer_read(buf, buffer_u16);
                with o_juegovida {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            regla[0] = buffer_read(buf, buffer_string);
                            regla[1] = buffer_read(buf, buffer_string);
                            for (var w = 0; w &lt; ds_grid_width(est_nex); w++) {
                                for (var h = 0; h &lt; ds_grid_height(est_nex); h++) {
                                    ds_grid_set(entrante, w, h, buffer_read(buf, buffer_u8));
                                }
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 23: // pipati
                var idw = buffer_read(buf, buffer_u16);
                with o_pipati {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            jugador_a = buffer_read(buf, buffer_u8);
                            jugador_b = buffer_read(buf, buffer_u8);
                        }
                        break;
                    }
                }
                break;
            
            case 24: // nivel
                var idw = buffer_read(buf, buffer_u16);
                with o_nivel {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            angulo = buffer_read(buf, buffer_u16);
                            for (var w = 0; w &lt; ds_grid_width(imagen); w++) {
                                for (var h = 0; h &lt; ds_grid_height(imagen); h++) {
                                    ds_grid_set(imagen, w, h, buffer_read(buf, buffer_u8));
                                }
                            }
                            alarm[1] = 1;
                        }
                        break;
                    }
                }
                break;
            
            case 25: // signal
                var idw = buffer_read(buf, buffer_u16);
                with o_signal {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            tipo = buffer_read(buf, buffer_u8);
                            amplitud = buffer_read(buf, buffer_u8);
                            frecuencia = buffer_read(buf, buffer_u8);
                            desfase = buffer_read(buf, buffer_u8);
                        }
                        break;
                    }
                }
                break;
            
            case 26: // planetario
                var idw = buffer_read(buf, buffer_u16);
                with o_planetario {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            velocidad = (buffer_read(buf, buffer_u8) / 255) * 10;
                        }
                        break;
                    }
                }
                break;
            
            case 27: // digital
                var idw = buffer_read(buf, buffer_u16);
                with o_digital {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            mute = buffer_read(buf, buffer_u8);
                            var yop = id;
                            with o_dispo {
                                if origen == yop {
                                    instance_destroy();
                                }
                            }
                            var tot = buffer_read(buf, buffer_u8);
                            var aux, xx, yy;
                            repeat tot {
                                xx = buffer_read(buf, buffer_u16);
                                yy = buffer_read(buf, buffer_u16);
                                aux = instance_create(xx, yy, o_dispo);
                                aux.name = buffer_read(buf, buffer_u8);
                                aux.tipo = buffer_read(buf, buffer_u8);
                                aux.valor = buffer_read(buf, buffer_u8);
                                for (var i = 0; i &lt; 3; i++) {
                                    aux.vecina[i] = buffer_read(buf, buffer_u8);
                                }
                                aux.origen = yop;
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 28: // bala
                var xx = buffer_read(buf, buffer_u16);
                var yy = buffer_read(buf, buffer_u16);
                var dd = buffer_read(buf, buffer_u16);
                var idw = buffer_read(buf, buffer_u16);
                var gr = buffer_read(buf, buffer_u8);
                s_crea_bala(xx, yy, dd, idw, gr, false);
                break;
            
            case 29: // recibe lista de conectados desde otro usuario
                var tot = buffer_read(buf, buffer_u16);
                var ip, idw, prio;
                if g_network == m_net_peer {
                    repeat tot {
                        ip = buffer_read(buf, buffer_string);
                        idw = buffer_read(buf, buffer_u16);
                        prio = buffer_read(buf, buffer_f32);
                        // enviar un hola
                        if ds_list_find_index(conectados, ip) == -1 {
                            network_enviados++;
                            network_env_bytes += saludo_size + m_head_udp;
                            network_send_udp_raw(conexion, ip, m_web, saludo_buf, saludo_size);
                        }
                    }
                }
                else { // client
                    var ok = false;
                    for (var i = ds_list_size(conectados) - 1; i &gt; 0; i--) {
                        if ds_list_find_value(esserver, i) {
                            ok = true;
                        }
                        else {
                            ds_priority_delete_value(prioridad,
                                ds_list_find_value(idconectados, i));
                            ds_list_delete(tiempomuerto, i);
                            ds_list_delete(conectados, i);
                            ds_list_delete(idconectados, i);
                            ds_list_delete(esserver, i);
                        }
                    }
                    if ok {
                        repeat tot {
                            ip = buffer_read(buf, buffer_string);
                            idw = buffer_read(buf, buffer_u16);
                            prio = buffer_read(buf, buffer_f32);
                            ds_list_add(conectados, ip);
                            ds_list_add(idconectados, idw);
                            ds_list_add(tiempomuerto, udp_tiempomuerto);
                            ds_list_add(esserver, false);
                            ds_priority_add(prioridad, idw, prio);
                        }
                    }
                }
                break;
            
            case 30: // nota buzzer
                var xx = buffer_read(buf, buffer_u16);
                var yy = buffer_read(buf, buffer_u16);
                var ss = buffer_read(buf, buffer_u8);
                s_buzzer_nota(xx, yy, ss, false);
                break;
            
            case 31: // cultivo
                var idw = buffer_read(buf, buffer_u16);
                with o_cultivo {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            var yop = id;
                            with o_planta {
                                if origen == yop {
                                    instance_destroy();
                                }
                            }
                            var aux, xx, yy;
                            var tot = buffer_read(buf, buffer_u8);
                            repeat tot {
                                xx = buffer_read(buf, buffer_u16);
                                yy = buffer_read(buf, buffer_u16);
                                aux = instance_create(xx, yy, o_planta);
                                aux.tipo = buffer_read(buf, buffer_u8);
                                aux.vida = buffer_read(buf, buffer_u8);
                                aux.fecha = buffer_read(buf, buffer_u32);
                                aux.origen = yop;
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 32: // usuarios se enganchan
                var idw = buffer_read(buf, buffer_u16);
                with o_usuario {
                    if idweb == idw and propietario {
                        if seguir_halar == noone {
                            var yop = id;
                            idw = buffer_read(buf, buffer_u16);
                            with o_usuario {
                                if idweb == idw {
                                    yop.seguir_halar = id;
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 33: // ajedrez
                var idw = buffer_read(buf, buffer_u16);
                with o_ajedrez {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            turno = buffer_read(buf, buffer_u8);
                            turno_max = buffer_read(buf, buffer_u16);
                            for (var h = 0; h &lt; 8; h++) {
                                for (var w = 0; w &lt; 8; w++) {
                                    ds_grid_set(tablero, w, h, buffer_read(buf, buffer_string));
                                }
                            }
                            s_ajedrez_fichas(id);
                        }
                        break;
                    }
                }
                break;
            
            case 34: // evolutivo
                var idw = buffer_read(buf, buffer_u16);
                with o_evolutivo {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            fuerza_mutacion = buffer_read(buf, buffer_u8);
                            fuerza_recombinacion = buffer_read(buf, buffer_u8);
                            densidad_alimento = buffer_read(buf, buffer_u8);
                            num_bichos_udp = buffer_read(buf, buffer_u16);
                            for (var g = 0; g &lt; 6; g++) {
                                gen[g] = buffer_read(buf, buffer_u8) / 255;
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 35: // efecto de sonido
                var xx = buffer_read(buf, buffer_u16);
                var yy = buffer_read(buf, buffer_u16);
                var ss = buffer_read(buf, buffer_u16);
                s_audio(xx, yy, ss, false);
                break;
            
            case 36: // secuencia
                var idw = buffer_read(buf, buffer_u16);
                with o_secuencia {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            secuencia = buffer_read(buf, buffer_string);
                            intento = buffer_read(buf, buffer_string);
                            if string_length(secuencia) &lt; ultima or
                                    string_length(intento) &lt; repeticion {
                                ultima = 0;
                                repeticion = 0;
                                reloj_secu = o_control.secuencia_velocidad;;
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 37: // parabolico
                var idw = buffer_read(buf, buffer_u16);
                with o_parabolico {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            angulo = buffer_read(buf, buffer_u8);
                            direction = buffer_read(buf, buffer_u16);
                            fuerza = buffer_read(buf, buffer_u8);
                        }
                        break;
                    }
                }
                break;
            
            case 38: // tiro parabolico
                var idw = buffer_read(buf, buffer_u16);
                with o_parabolico {
                    if idweb == idw {
                        var ang = buffer_read(buf, buffer_u8);
                        var dir = buffer_read(buf, buffer_u16);
                        var fue = buffer_read(buf, buffer_u8);
                        reloj_tiro = 0;
                        s_tiro_parabolico(id, ang, dir, fue, false);
                        break;
                    }
                }
                break;
            
            case 39: // calculadora
                var idw = buffer_read(buf, buffer_u16);
                with o_calculadora {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            pregunta = buffer_read(buf, buffer_string);
                            for (var i = 0; i &lt; 4; i++) {
                                respuesta[i] = buffer_read(buf, buffer_string);
                            }
                            verdadera = buffer_read(buf, buffer_u8);
                            nivel = buffer_read(buf, buffer_u8);
                            puntos[0] = buffer_read(buf, buffer_u8);
                            puntos[1] = buffer_read(buf, buffer_u8);
                        }
                        break;
                    }
                }
                break;
            
            case 40: // acelerador
                var idw = buffer_read(buf, buffer_u16);
                with o_acelerador {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            activo = buffer_read(buf, buffer_u8) != 0;
                            calor_ini = buffer_read(buf, buffer_u8);
                            cadencia = buffer_read(buf, buffer_u8);
                            girar = buffer_read(buf, buffer_u8);
                            direccional = buffer_read(buf, buffer_u16);
                            disparado = buffer_read(buf, buffer_u8);
                        }
                        break;
                    }
                }
                break;
            
            case 41: // puntaje (futbol)
                var idw = buffer_read(buf, buffer_u16);
                with o_puntaje {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        var del = buffer_read(buf, buffer_f32);
                        if fec + del &gt; fecha {
                            fecha = fec;
                            puntos[0] = buffer_read(buf, buffer_u8);
                            puntos[1] = buffer_read(buf, buffer_u8);
                            reloj_juego = buffer_read(buf, buffer_f32);
                            reloj_balon = buffer_read(buf, buffer_f32);
                            enjuego = buffer_read(buf, buffer_u8) != 0;
                            var xx = buffer_read(buf, buffer_u16);
                            var yy = buffer_read(buf, buffer_u16);
                            var dd = buffer_read(buf, buffer_u16);
                            var vv = buffer_read(buf, buffer_u16);
                            if xx == 0 and yy == 0 {
                                var yop = id;
                                with o_balon {
                                    if origen == yop {
                                        instance_destroy();
                                        break;
                                    }
                                }
                            }
                            else {
                                var yop = id;
                                var bll = noone;
                                with o_balon {
                                    if origen == yop {
                                        bll = id;
                                        break;
                                    }
                                }
                                if bll == noone {
                                    bll = instance_create(xx, yy, o_balon);
                                    bll.origen = yop;
                                }
                                bll.posx = xx;
                                bll.posy = yy;
                                bll.direcc = dd;
                                bll.velocity = vv;
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 42: // batalla
                var idw = buffer_read(buf, buffer_u16);
                with o_batalla {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            var lao = ds_grid_width(barcos);
                            for (var h = 0; h &lt; lao; h++) {
                                for (var w = 0; w &lt; lao; w++) {
                                    ds_grid_set(barcos, w, h, buffer_read(buf, buffer_u8));
                                }
                            }
                            for (var h = 0; h &lt; lao; h++) {
                                for (var w = 0; w &lt; lao; w++) {
                                    ds_grid_set(tiros, w, h, buffer_read(buf, buffer_u8));
                                }
                            }
                            s_batalla_ficha();
                        }
                        break;
                    }
                }
                break;
            
            case 43: // memoria
                var idw = buffer_read(buf, buffer_u16);
                with o_memoria {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            turno = buffer_read(buf, buffer_u16);
                            ultimo[0] = buffer_read(buf, buffer_u8);
                            ultimo[1] = buffer_read(buf, buffer_u8);
                            var aux;
                            var tll = ds_grid_width(tablero);
                            for (var h = 0; h &lt; tll; h++) {
                                for (var w = 0; w &lt; tll; w++) {
                                    aux = ds_grid_get(tablero, w, h);
                                    aux.tipo = buffer_read(buf, buffer_u8);
                                    aux.mostrado = buffer_read(buf, buffer_u8) - 1;
                                }
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 44: // virus
                var idw = buffer_read(buf, buffer_u16);
                with o_virus {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            mortandad = buffer_read(buf, buffer_u8);
                            incubacion = buffer_read(buf, buffer_u8);
                            enfermedad = buffer_read(buf, buffer_u8);
                            transmision = buffer_read(buf, buffer_u8);
                            curatodos = buffer_read(buf, buffer_u8);
                        }
                        break;
                    }
                }
                break;
            
            case 45: // infectar o curar
                var jer = buffer_read(buf, buffer_u8);
                if jer == 2 { // curar todos
                    with o_usuario {
                        salud = 0;
                    }
                }
                else {
                    var idw = buffer_read(buf, buffer_u16);
                    with o_usuario {
                        if idweb == idw {
                            if jer == 0 { // infectar
                                salud = s_current_time();
                            }
                            else if jer == 1 { // curar
                                salud = 0;
                            }
                            break;
                        }
                    }
                }
                break;
            
            case 46: // idweb + fecha gadgets
                var total = buffer_read(buf, buffer_u16);
                var idw, fec, aux;
                repeat total {
                    idw = buffer_read(buf, buffer_u16);
                    fec = buffer_read(buf, buffer_u32);
                    aux = noone;
                    with o_especial {
                        if idweb == idw {
                            aux = id;
                            break;
                        }
                    }
                    if aux == noone {
                        with o_game {
                            if idweb == idw {
                                aux = id;
                                break;
                            }
                        }
                    }
                    if aux != noone {
                        if aux.fecha &gt; fec {
                            aux.reloj_sinc = min(1, aux.reloj_sinc);
                        }
                    }
                }
                buffer_delete(buf);
                exit;
            
            case 47: // alfombra
                var idw = buffer_read(buf, buffer_u16);
                with o_alfombra {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            for (var w = 0; w &lt; ds_grid_width(imagen); w++) {
                                for (var h = 0; h &lt; ds_grid_height(imagen); h++) {
                                    ds_grid_set(imagen, w, h, buffer_read(buf, buffer_u32));
                                }
                            }
                            for (var w = 0; w &lt; ds_grid_width(imagen); w++) {
                                for (var h = 0; h &lt; ds_grid_height(imagen); h++) {
                                    ds_grid_set(transp, w, h, buffer_read(buf, buffer_u8) / 255);
                                }
                            }
                        }
                        break;
                    }
                }
                break;
            
            case 48: // azar
                var idw = buffer_read(buf, buffer_u16);
                with o_azar {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            ganador = buffer_read(buf, buffer_u16);
                            numerito = buffer_read(buf, buffer_string);
                            dado = buffer_read(buf, buffer_u8);
                            perfil_azar = noone;
                        }
                        break;
                    }
                }
                break;
            
            case 49: // clima
                with o_virtual_molino {
                    var fec = buffer_read(buf, buffer_u32);
                    if fec &gt; fecha {
                        fecha = fec;
                        for (var i = 0; i &lt; o_control.cantidad_opiniones; i++) {
                            ds_grid_set(opinador, i, 0, buffer_read(buf, buffer_u16));
                            ds_grid_set(opinador, i, 1, buffer_read(buf, buffer_u32));
                            ds_grid_set(opinador, i, 2, buffer_read(buf, buffer_u8) - 1);
                        }
                    }
                }
                break;
            
            case 50: // votacion
                var idw = buffer_read(buf, buffer_u16);
                with o_votacion {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            var lon = buffer_read(buf, buffer_u16);
                            ds_list_clear(derecha);
                            repeat lon {
                                ds_list_add(derecha, buffer_read(buf, buffer_u16));
                            }
                            lon = buffer_read(buf, buffer_u16);
                            ds_list_clear(izquierda);
                            repeat lon {
                                ds_list_add(izquierda, buffer_read(buf, buffer_u16));
                            }
                            pregunta = buffer_read(buf, buffer_string);
                        }
                        break;
                    }
                }
                break;
            
            case 51: // examen
                var idw = buffer_read(buf, buffer_u16);
                with o_examen {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            var tot = buffer_read(buf, buffer_u8);
                            ds_list_clear(preguntas);
                            repeat tot {
                                ds_list_add(preguntas, buffer_read(buf, buffer_string));
                            }
                            tot = buffer_read(buf, buffer_u8);
                            ds_list_clear(estudiantes);
                            ds_list_clear(notas);
                            repeat tot {
                                ds_list_add(estudiantes, buffer_read(buf, buffer_u16));
                                ds_list_add(notas, buffer_read(buf, buffer_u8));
                            }
                            s_notas(id);
                        }
                        break;
                    }
                }
                break;
            
            case 52: // encuesta
                var idw = buffer_read(buf, buffer_u16);
                with o_encuesta {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            var tot = buffer_read(buf, buffer_u8);
                            ds_list_clear(preguntas);
                            repeat tot {
                                ds_list_add(preguntas, buffer_read(buf, buffer_string));
                            }
                            tot = buffer_read(buf, buffer_u8);
                            ds_list_clear(estudiantes);
                            repeat tot {
                                ds_list_add(estudiantes, buffer_read(buf, buffer_u16));
                            }
                            ds_list_clear(respuestas);
                            repeat o_control.encuesta_max {
                                ds_list_add(respuestas, buffer_read(buf, buffer_u16));
                            }
                            genero = buffer_read(buf, buffer_u16);
                            s_respuestas(id);
                        }
                        break;
                    }
                }
                break;
            
            case 53: // criaturas
                var idw, tk, fec, xx, yy, mx, my, rq, rm;
                repeat o_control.kreaturas {
                    idw = buffer_read(buf, buffer_u16);
                    fec = buffer_read(buf, buffer_u32);
                    xx = buffer_read(buf, buffer_u16);
                    yy = buffer_read(buf, buffer_u16);
                    mx = buffer_read(buf, buffer_u16);
                    my = buffer_read(buf, buffer_u16);
                    rq = buffer_read(buf, buffer_u32);
                    rm = buffer_read(buf, buffer_u32);
                    tk = buffer_read(buf, buffer_u8);
                    with o_kreature {
                        if idweb == idw {
                            if fec &gt;= fechamove {
                                fechamove = fec;
                                posx = xx;
                                posy = yy;
                                metax = mx;
                                metay = my;
                                reloj_quiet = rq;
                                reloj_move = rm;
                                tipok = tk;
                            }
                            break;
                        }
                    }
                }
                break;
            
            case 54: // criatura
                var idw = buffer_read(buf, buffer_u16);
                with o_kreature {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            tipok = buffer_read(buf, buffer_u8);
                        }
                        break;
                    }
                }
                break;
            
            case 55: // anatomia
                var idw = buffer_read(buf, buffer_u16);
                with o_anatomia {
                    if idweb == idw {
                        var fec = buffer_read(buf, buffer_u32);
                        if fec &gt; fecha {
                            fecha = fec;
                            intensidad = buffer_read(buf, buffer_u8);
                        }
                        break;
                    }
                }
                break;
            
            case 56: // cambia objeto usuario
                var idw = buffer_read(buf, buffer_u16);
                with o_usuario {
                    if idweb == idw {
                        objeto = buffer_read(buf, buffer_u16);
                        break;
                    }
                }
                break;
            
            case 57: // numero
                var xx = buffer_read(buf, buffer_u16);
                var yy = buffer_read(buf, buffer_u16);
                var ss = buffer_read(buf, buffer_string);
                s_numero(xx, yy, ss, false);
                break;
            
            case 58: // globo
                var idw = buffer_read(buf, buffer_u16);
                with o_usuario {
                    if idweb == idw {
                        objeto = 0;
                        var aux = instance_create(x, y + 1, o_globo);
                        aux.esconfeti = buffer_read(buf, buffer_u8) == 1;
                        if aux.esconfeti {
                            s_audio(x, y, a_rocket, false);
                        }
                        break;
                    }
                }
                break;
            
            case 59: // pinturas
                var tot = buffer_read(buf, buffer_u16);
                var xx, yy, aux;
                repeat tot {
                    xx = buffer_read(buf, buffer_u16);
                    yy = buffer_read(buf, buffer_u16);
                    aux = instance_create(xx, yy, o_pintura);
                    aux.colorid = buffer_read(buf, buffer_u8);
                    s_pintura(aux);
                }
                break;
        }
        // retransmitir los paquetes a los demas usuarios
        if g_network == m_net_server {
            switch tt_tt {
                case 1: // datos de usuarios
                case 6: // nota musical
                case 17: // mute parlante
                case 13: // cambia hoja diccionario
                case 16: // correo
                case 19: // usuario desconectado, solo movimiento
                case 21: // ahorcado
                case 23: // pipati
                case 28: // bala
                case 30: // nota buzzer
                case 32: // usuarios se enganchan
                case 33: // ajedrez
                case 35: // efecto sonido
                case 36: // secuencia
                case 39: // calculadora
                case 42: // batalla
                case 41: // puntaje (futbol)
                case 43: // memoria
                case 45: // infectar o curar
                case 54: // criatura
                case 56: // cambia objeto usuario
                case 57: // numero
                case 58: // globo
                case 59: // pinturas
                    s_udp_rebote(buf, la_ip);
                    break;
            }
        }
    }
}
buffer_delete(buf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//s_recv_ofihttp(id);
if ds_map_find_value(async_load, "status") == 0 {
    var txt = s_split(ds_map_find_value(async_load, "result"), "|", false);
    if is_array(txt) {
        if array_length_1d(txt) == 3 {
            if txt[0] = m_http {
                if s_str_es_ip_msk(txt[1]) {
                    mascvlan = txt[1];
                }
                if s_str_es_ip(txt[2]) {
                    network_send_udp_raw(conexion, txt[2], m_web, saludo_buf, saludo_size);
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if conexion &gt;= 0 {
    network_destroy(conexion);
    buffer_delete(saludo_buf);
    ds_list_destroy(conectados);
    ds_list_destroy(tiempomuerto);
    ds_list_destroy(idconectados);
    ds_list_destroy(esserver);
    ds_priority_destroy(prioridad);
    sprite_delete(dd_mapa);
    ds_list_destroy(ahorcado_palabras);
    s_ini_save("mascaraLAN", mascara);
    s_save_mapa("");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI

if !m_editor {
    
    // listado de contactos
    var dibumous = false;
    var xx = view_xview[0] + view_wview[0] - 96;
    var yy;
    for (var c = 0; c &lt; total_contactos; c++) {
        if mipropio.amigo[c] != 0 {
            yy = view_yview[0] + 32 * c;
            draw_sprite(d_perfil, 15, xx, yy);
            draw_sprite(d_perfil, 16 + mipropio.amigi[c], xx, yy);
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_text_transformed_colour(xx + 48, yy + 22,
                s_busca_nombre(mipropio.amigo[c]),
                0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);
            if point_in_rectangle(mouse_x, mouse_y, xx, yy, xx + 96, yy + 32) {
                dibumous = true;
            }
        }
    }
    
    // perfil del propio usuario y ordenes contextuales
    with mipropio {
        s_draw_perfil(id, view_xview[0], view_yview[0]);
        var xx = view_xview[0] + view_wview[0];
        var yy = view_yview[0] + view_hview[0];
        draw_set_halign(fa_right);
        draw_set_valign(fa_bottom);
        draw_set_alpha(0.6);
        var esc = 0.6;
        draw_rectangle_colour(xx - (string_width(comandos_gui) * esc + 15),
            yy - (string_height(comandos_gui) * esc + 15), xx - 5, yy - 5,
            c_white, c_white, c_white, c_white, false);
        draw_set_alpha(1);
        draw_text_transformed_colour(xx - 10, yy - 10, comandos_gui, esc, esc, 0,
            c_black, c_black, c_black, c_black, 1);
        break;
    }
    
    // puntero sobre contactos
    if dibumous {
        draw_sprite(d_puntero, 1, mouse_x, mouse_y);
    }
    
    // otro perfil abierto
    if mipropio.en_mira != noone {
        s_draw_perfil(mipropio.en_mira, view_xview[0],
            view_yview[0] + view_hview[0] - 192);
    }
    
    // gran papel abierto para lectura grande
    if mipropio.papelote != "" {
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        var xx = view_xview[0] + view_wview[0] / 2;
        var yy = view_yview[0] + view_hview[0] / 2;
        draw_sprite_ext(d_papelote, 0, xx, yy, 1.5, 1.5, 0, c_white, 1);
        draw_text_ext_transformed_colour(xx, yy, mipropio.papelote,
            13, 232 * 1.5, 0.6, 0.6, 0 , c_black, c_black, c_black, c_black, 1);
    }
    // extension de pantallas
    else {
        var ptll = mipropio.pantalla;
        if ptll != noone { switch ptll.object_index {
            case o_lienzo:
                with ptll {
                    var xx = view_xview[0] + view_wview[0] / 2;
                    var yy = view_yview[0] + view_hview[0] / 2;
                    var e = 5;
                    var ww = ds_grid_width(imagen);
                    var hh = ds_grid_height(imagen);
                    for (var w = 0; w &lt; ww; w++) {
                        for (var h = 0; h &lt; hh; h++) {
                            draw_sprite_ext(d_piezas, 0,
                                xx + (lerp(-37, 37, w / ww) + 2) * e,
                                yy + (lerp(-37, 37, h / hh) + 2) * e,
                                e, e, 0, c_white, 1);
                        }
                    }
                    for (var w = 0; w &lt; ww; w++) {
                        for (var h = 0; h &lt; hh; h++) {
                            draw_sprite_ext(d_piezas, 0,
                                xx + (lerp(-37, 37, w / ww) + 2) * e,
                                yy + (lerp(-37, 37, h / hh) + 2) * e,
                                e, e, 0, ds_grid_get(imagen, w, h), ds_grid_get(transp, w, h));
                        }
                    }
                }
                break;
            
            case o_tablero:
                with ptll {
                    var xx = view_xview[0] + view_wview[0] / 2;
                    var yy = view_yview[0] + view_hview[0] / 2;
                    var e = 5;
                    var ww = ds_grid_width(imagen);
                    var hh = ds_grid_height(imagen);
                    for (var w = 0; w &lt; ww; w++) {
                        for (var h = 0; h &lt; hh; h++) {
                            draw_sprite_ext(d_piezas, 29,
                                xx + (lerp(-37, 37, w / ww) + 2) * e,
                                yy + (lerp(-37, 37, h / hh) + 2) * e,
                                e, e, 0, c_white, 1);
                        }
                    }
                    for (var w = 0; w &lt; ww; w++) {
                        for (var h = 0; h &lt; hh; h++) {
                            if ds_grid_get(imagen, w, h) != 0 {
                                draw_sprite_ext(d_piezas, 2,
                                    xx + (lerp(-37, 37, w / ww) + 2) * e,
                                    yy + (lerp(-37, 37, h / hh) + 2) * e,
                                    e, e, 0, c_white, 1);
                            }
                        }
                    }
                }
                break;
            
            case o_presentacion:
                with ptll {
                    if aguja != 255 {
                        var xx = view_xview[0] + view_wview[0] / 2;
                        var yy = view_yview[0] + view_hview[0] / 2;
                        var e = 5;
                        var ww = ds_grid_width(imagen);
                        var hh = ds_grid_height(imagen);
                        var ccc;
                        for (var w = 0; w &lt; ww; w++) {
                            for (var h = 0; h &lt; hh; h++) {
                                draw_sprite_ext(d_piezas, 0,
                                    xx + (lerp(-37, 37, w / ww) + 2) * e,
                                    yy + (lerp(-37, 37, h / hh) + 2) * e,
                                    e, e, 0, c_white, 1);
                            }
                        }
                        for (var w = 0; w &lt; ww; w++) {
                            for (var h = 0; h &lt; hh; h++) {
                                ccc = ds_grid_get(imagen, w, h);
                                if ccc != 0 {
                                    ccc = make_colour_rgb(ccc, ccc, ccc);
                                    draw_sprite_ext(d_piezas, 0,
                                        xx + (lerp(-37, 37, w / ww) + 2) * e,
                                        yy + (lerp(-37, 37, h / hh) + 2) * e,
                                        e, e, 0, ccc, 1);
                                }
                            }
                        }
                    }
                }
                break;
        } }
    }
    
    // pestanna para titulos de zonas y ref mapa
    var xx = view_xview[0] + view_wview[0] / 2;
    var yy = view_yview[0] + 14;
    draw_sprite(d_zona, 0, xx, yy);
    // gran mapa abierto
    if mipropio.ver_mapa != noone {
        // dibujo mapa
        var esc = (view_wview[0] * 0.8) / 1024;
        draw_sprite_ext(mipropio.ver_mapa, 0, view_xview[0] + view_wview[0] / 2,
            view_yview[0] + view_hview[0] / 2, esc, esc, 0, c_white, 0.8);
        // calculos de referencias y proporciones
        var ww = 1024 * esc;
        var hh = (1024 / room_width) * room_height * esc;
        var xo = (view_xview[0] + view_wview[0] / 2) - (ww / 2);
        var yo = (view_yview[0] + view_hview[0] / 2) - (hh / 2);
        var invesc = room_width / ww;
        var zx = (mouse_x - xo) * invesc;
        var zy = (mouse_y - yo) * invesc;
        // dibujar a las criaturas
        with o_kreature {
            draw_sprite(d_piezas, 23, xo + x * (1 / invesc),
                yo + y * (1 / invesc));
        }
        // dibujar a todos los usuarios, mas translucidos si desconectados
        with o_usuario {
            if estaonline {
                draw_sprite(d_piezas, 15, xo + x * (1 / invesc),
                    yo + y * (1 / invesc));
            }
            else {
                draw_sprite_ext(d_piezas, 15, xo + x * (1 / invesc),
                    yo + y * (1 / invesc), 0.75, 0.75, 0, c_white, 0.75);
            }
        }
        // contactos del usuario actual
        var ami;
        for (var c = 0; c &lt; total_contactos; c++) {
            if mipropio.amigo[c] != 0 {
                // buscar el id entre todos los usuarios, solo si el contacto no vacio
                ami = noone;
                with o_usuario {
                    if o_control.mipropio.amigo[c] == idweb {
                        ami = id;
                        break;
                    }
                }
                if ami != noone {
                    // dibujarlo dependiendo de si perfil en mira
                    if mipropio.en_mira == ami {
                        draw_sprite_ext(d_piezas, 4 + mipropio.amigi[c], xo + ami.x * (1 / invesc),
                            yo + ami.y * (1 / invesc), 1.5, 1.5, 0, c_white, 1);
                    }
                    else {
                        draw_sprite(d_piezas, 4 + mipropio.amigi[c], xo + ami.x * (1 / invesc),
                            yo + ami.y * (1 / invesc));
                    }
                }
            }
        }
        // usuario actual
        draw_sprite(d_piezas, 3, xo + mipropio.x * (1 / invesc),
            yo + mipropio.y * (1 / invesc));
        // titulos de zonas en mapa
        var zzz = instance_nearest(zx, zy, o_zona);
        if point_distance(zx, zy, zzz.x, zzz.y) &lt;= radio_zona {
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_text_transformed_colour(xx, yy, s_titulo_zona(zzz.titulo),
                0.8, 0.8, 0 , c_black, c_black, c_black, c_black, 1);
        }
        // puntero sobre mapa
        draw_sprite(d_puntero, 1, mouse_x, mouse_y);
    }
    // titulos de zonas sin influencia de mapa
    else {
        var zzz = instance_nearest(mipropio.x, mipropio.y, o_zona);
        if point_distance(mipropio.x, mipropio.y, zzz.x, zzz.y) &lt;= radio_zona {
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_text_transformed_colour(xx, yy, s_titulo_zona(zzz.titulo),
                0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);
        }
    }
    
    // lapiz del tablero, por encima de todo como mouse
    if mipropio.cerca_esp != noone {
        if mipropio.cerca_esp.object_index == o_tablero {
            if mipropio.pantalla == mipropio.cerca_esp {
                draw_sprite(d_puntero, 0,
                    view_xview[0] + lerp(127, 497, (mouse_x - view_xview[0]) / view_wview[0]),
                    view_yview[0] + lerp(49, 417, (mouse_y - view_yview[0]) / view_hview[0]));
            }
            else {
                draw_sprite(d_puntero, 0, mouse_x, mouse_y);
            }
        }
    }
    
    // conteo respawn
    if mipropio.reloj_respawn != 0 {
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_transformed_colour(view_xview[0] + view_wview[0] / 2,
            view_yview[0] + view_hview[0] / 2, "Reaparecer en#" +
            string(round(mipropio.reloj_respawn)) + " s",
            5, 5, 0, c_maroon, c_maroon, c_maroon, c_maroon, 1);
    }
}
else {
    switch herramienta {
        case "zona":
            draw_set_alpha(0.5);
            draw_rectangle_colour(view_xview[0], view_yview[0],
                view_xview[0] + view_wview[0], view_yview[0] + view_hview[0],
                c_white, c_white, c_white, c_white, false);
            draw_set_alpha(1);
            draw_circle_colour(mouse_x, mouse_y, radio_zona, c_black, c_black, true);
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_text_transformed_colour(mouse_x, mouse_y, titulo_zona,
                1, 1, 0, c_black, c_black, c_black, c_black, 1);
            break;
        case "punto":
            draw_set_alpha(0.5);
            draw_rectangle_colour(view_xview[0], view_yview[0],
                view_xview[0] + view_wview[0], view_yview[0] + view_hview[0],
                c_white, c_white, c_white, c_white, false);
            draw_set_alpha(1);
            draw_circle_colour(mouse_x, mouse_y, radio_zona, c_black, c_black, true);
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_text_transformed_colour(mouse_x, mouse_y, titulo_zona,
                1, 1, 0, c_black, c_black, c_black, c_black, 1);
            break;
    }
    
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_text_transformed_colour(view_xview[0] + view_wview[0],
        view_yview[0] + view_hview[0], string(mouse_x) + "," + string(mouse_y),
        1, 1, 0, c_black, c_black, c_black, c_black, 1);
}
// oscurecer para salir
if reloj_exit != 0 {
    draw_set_alpha(lerp(0.2, 0.6, reloj_exit));
    draw_rectangle_colour(view_xview[0], view_yview[0],
        view_xview[0] + view_wview[0], view_yview[0] + view_hview[0],
        c_black, c_black, c_black, c_black, false);
    draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sombras

// baldozas base editor
if m_editor {
    with o_baldoza {
        draw_sprite_ext(d_baldoza, subimagen, x, y,
            1, 1, 0, o_control.colores[colorsito], 0.8);
    }
}

// imagen alfombra
with o_alfum {
    if visible {
        draw_sprite_ext(d_sombra, 17, x, y, 1, 1, 0,
            ds_grid_get(origen.imagen, posw, posh),
            ds_grid_get(origen.transp, posw, posh) * 0.8);
    }
}

// casillas ajedrez
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
with o_ajedrez {
    if visible {
        var ca = o_control.celda_ajedrez;
        var desf = 0;
        var cmb = 0;
        var ltt;
        for (var h = 0; h &lt; 8; h++) {
            for (var w = 0; w &lt; 8; w++) {
                if cmb == 0 {
                    cmb = 1;
                }
                else {
                    cmb = 0;
                }
                draw_sprite(d_sombra, 7 + cmb,
                    x - 4 * ca + w * ca + desf,
                    y + 24 + h * ca * 0.75);
                if w == 0 {
                    draw_text_transformed_colour(x - 4 * ca + -1 * ca + desf,
                        y + 24 + h * ca * 0.75, string(8 - h), 0.7, 0.7, 0,
                        c_black, c_black, c_black, c_black, 0.8);
                }
                if h == 7 {
                    switch w {
                        case 0: ltt = "A"; break;
                        case 1: ltt = "B"; break;
                        case 2: ltt = "C"; break;
                        case 3: ltt = "D"; break;
                        case 4: ltt = "E"; break;
                        case 5: ltt = "F"; break;
                        case 6: ltt = "G"; break;
                        case 7: ltt = "H"; break;
                    }
                    draw_text_transformed_colour(x - 4 * ca + w * ca + desf,
                        y + 24 + 8 * ca * 0.75, ltt, 0.7, 0.7, 0,
                        c_black, c_black, c_black, c_black, 0.8);
                }
            }
            if cmb == 0 {
                cmb = 1;
            }
            else {
                cmb = 0;
            }
            desf += ca * 0.2;
        }
    }
}

// casillas batalla
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
with o_batalla {
    if visible {
        var ca = o_control.celda_ajedrez;
        var desf = 0;
        var cmb = 0;
        var ltt;
        for (var h = 0; h &lt; 8; h++) {
            for (var w = 0; w &lt; 8; w++) {
                if cmb == 0 {
                    cmb = 3;
                }
                else {
                    cmb = 0;
                }
                draw_sprite(d_sombra, 10 + ds_grid_get(tiros, w, h) + cmb,
                    x - 4 * ca + w * ca + desf,
                    y + 24 + h * ca * 0.75);
                if w == 0 {
                    draw_text_transformed_colour(x - 4 * ca + -1 * ca + desf,
                        y + 24 + h * ca * 0.75, string(8 - h), 0.7, 0.7, 0,
                        c_black, c_black, c_black, c_black, 0.8);
                }
                if h == 7 {
                    switch w {
                        case 0: ltt = "A"; break;
                        case 1: ltt = "B"; break;
                        case 2: ltt = "C"; break;
                        case 3: ltt = "D"; break;
                        case 4: ltt = "E"; break;
                        case 5: ltt = "F"; break;
                        case 6: ltt = "G"; break;
                        case 7: ltt = "H"; break;
                    }
                    draw_text_transformed_colour(x - 4 * ca + w * ca + desf,
                        y + 24 + 8 * ca * 0.75, ltt, 0.7, 0.7, 0,
                        c_black, c_black, c_black, c_black, 0.8);
                }
            }
            if cmb == 0 {
                cmb = 3;
            }
            else {
                cmb = 0;
            }
            desf += ca * 0.2;
        }
    }
}

// casillas juegovida
with o_gusano {
    if visible {
        draw_sprite(d_sombra, 5, x, y);
    }
}

// oscuridad dia y noche
if !m_editor {
    var h = o_reloj.hora + o_reloj.minuto * (1 / 60);
    if mipropio.objeto == 143 {
        h = 12;
    }
    var xx = view_xview[0] - 50;
    var yy = view_yview[0] - 50;
    var penumbra = surface_create(view_wview[0] + 100, view_hview[0] + 100);
    surface_set_target(penumbra);
    draw_clear_alpha(c_black, 1);
    var lamp = false;
    var lint = true;
    var alp;
    if h &gt; 7 and h &lt; 17 { // dia
        alp = 0;
        lint = false;
    }
    else if h &gt; 19 or h &lt; 5 { // noche
        alp = oscuridad;
        if h &gt; 12 {
            lamp = true;
        }
    }
    else if h &lt; 12 { // amanecer
        alp = lerp(oscuridad, 0, (h - 5) / 2);
    }
    else { // atardecer
        alp = lerp(0, oscuridad, (h - 17) / 2);
        lamp = true;
    }
    draw_set_blend_mode(bm_subtract);
    if lamp { // dibujar luces fijas del campus
        with o_luz {
            if visible {
                draw_sprite(d_luz, 0, x - xx, y - yy);
            }
        }
    }
    if lint { // dibujar linternas, por ejemplo objetos de usuarios
        with o_usuario {
            if visible {
                switch objeto {
                    case 107: // bombillo
                        draw_sprite(d_luz, 0, x - xx, y - yy); break;
                    case 108: // lampara
                        draw_sprite_ext(d_luz, 0, x - xx, y - yy, 1.5, 1.5, 0, c_white, 1); break;
                    case 110: // vela
                        draw_sprite_ext(d_luz, 0, x - xx, y - yy, 1, 1, 0, c_white, parpadeo_llama); break;
                    case 111: // antorcha
                        draw_sprite_ext(d_luz, 0, x - xx, y - yy, 0.5, 0.5, 0, c_white, parpadeo_llama); break;
                }
            }
            if objeto == 109 { // linterna
                if propietario {
                    draw_sprite(d_luz, 0, mouse_x - xx, mouse_y - yy);
                }
                else {
                    draw_sprite(d_luz, 0, puntero_x - xx, puntero_y - yy); break;
                }
            }
        }
        with o_tiro_humo {
            if visible {
                switch imagen {
                    case 25: case 26:
                        draw_sprite_ext(d_luz, 0, x - xx, y - yy, 0.5, 0.5, 0, c_white,
                            (reloj_fin / reloj_fin_max) * 0.5);
                        break;
                }
            }
        }
        with o_dispo {
            if visible {
                if tipo == 0 and salida == 1 {
                    draw_sprite(d_luz, 0, x - xx, y - yy);
                }
            }
        }
    }
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
    draw_surface_ext(penumbra, xx, yy, 1, 1, 0, c_white, alp);
    surface_free(penumbra);
}
else {
    if herramienta == "luz" {
        draw_sprite_ext(d_luz, 0, mouse_x, mouse_y,
            1, 1, 0, c_white, 0.7);
        with o_luz {
            draw_sprite(d_luz, 0, x, y);
        }
    }
}

// lineas digital
draw_set_alpha(0.2);
with o_dispo {
    if visible {
        for (var i = 0; i &lt; 3; i++) {
            if vecino[i] != noone {
                if instance_exists(vecino[i]) {
                    draw_line_width_colour(x, y, vecino[i].x, vecino[i].y,
                        2, c_red, c_white);
                }
            }
        }
    }
}
draw_set_alpha(1);

// lineas planetario
draw_set_alpha(0.2);
with o_planeta {
    if visible {
        draw_line_width_colour(x, y, centro.x, centro.y, 2, c_maroon, c_maroon);
    }
}
draw_set_alpha(1);

// lineas parabolico
with o_parabolico {
    if visible {
        draw_sprite_ext(d_sombra, 3, x, y, 1.5, 1.5, direction, c_red, 1);
    }
}

// sombra de puertas arco
if m_editor {
    if herramienta == "pared" {
        if seleccion == 1 or seleccion == 2 {
            draw_sprite(d_sombra, 4, mouse_x, mouse_y);
        }
    }
}
with o_decorado {
    if visible {
        if imagen == d_estructura and (subimagen == 1 or subimagen == 2) {
            draw_sprite(d_sombra, 4, x, y);
        }
    }
}

// sombra parti signal
with o_psig {
    if visible and activo {
        var v = 1 - clamp((x - orix) / o_control.signal_dist, 0, 1);
        draw_sprite_ext(d_sombra, 6, x, y, 1, 1, 0, c_white, v);
    }
}

// sombra parti signal
with o_pbatll {
    if visible and activo {
        draw_sprite_ext(d_sombra, 6, x, y, 1, 1, 0, c_white, 0.8);
    }
}

// sombra parti bala
with o_bala {
    if visible {
        draw_sprite(d_sombra, 6, x, y);
    }
}

// sombra parti digital
with o_chispa {
    if visible and activo {
        draw_sprite(d_sombra, 6, x, y);
    }
}

// sombra ahorcado
with o_ahorcado {
    if visible {
        if vidas &lt; 6 {
            draw_sprite(d_sombra, 4, x + 16, y);
        }
    }
}

// sombra tiro parabolico
with o_tiro_pesado {
    if visible {
        var a = clamp(lerp(3, 0, (altura * 0.25) / 255), 0, 1);
        draw_sprite_ext(d_sombra, 0, x, y, 1, 1, 0, c_white, lerp(0.25, 1, a));
    }
}
with o_tiro_humo {
    if visible {
        var a = reloj_fin / reloj_fin_max;
        var e;
        switch imagen {
            case 26: case 27: e = lerp(3, 1, a) * 0.5; break;
            default: e = lerp(3, 1, a); break;
        }
        draw_sprite_ext(d_sombra, 0, x, y, e, e, 0, c_white, 0.5 * a);
    }
}

// sombra confeti
with o_confeti {
    if visible {
        var a = altura / altura_max;
        var e = lerp(2, 1, a) * 0.5;
        draw_sprite_ext(d_sombra, 0, x, y, e, e, 0, c_white, 0.5 * a);
    }
}

// sombra humo faso
with o_hierba {
    if visible {
        var a = reloj_fin / reloj_fin_max;
        var e = lerp(3, 1, a);
        draw_sprite_ext(d_sombra, 0, x, y, e, e, 0, c_white, 0.5 * a);
    }
}

// sombra globo
with o_globo {
    if visible {
        var a = 1 - altu / o_control.globo_altura;
        draw_sprite_ext(d_sombra, 9, x - 16, y, 1, 1, 0, c_white, a);
    }
}

// sombra tos
with o_tos {
    if visible {
        var a = reloj_fin / reloj_fin_max;
        draw_sprite_ext(d_sombra, 6, x, y, 1, 1, 0, c_white, 0.5 * a);
    }
}

// sombra gota
with o_gota {
    if visible and activo {
        var a = -power((clamp(altura, -100, 200) - 50) / 150, 2) + 1;
        draw_sprite_ext(d_sombra, 6, x, y, 1, 1, 0, c_white, 0.5 * a);
    }
}

// sombra particula
with o_particula {
    if visible and activo {
        var a = reloj_fin / reloj_fin_max;
        draw_sprite_ext(d_sombra, 6, x, y, 1, 1, 0, c_white, a);
    }
}

// sombra bicho y alimento
with o_bicho {
    if visible {
        draw_sprite(d_sombra, 9, x, y);
    }
}
with o_voladorcito {
    if visible {
        draw_sprite(d_sombra, 6, x, y);
    }
}

// sombra balon
with o_balon {
    if visible {
        draw_sprite(d_sombra, 4, x, y);
    }
}

// sombra criatura
with o_kreature {
    if visible {
        draw_sprite(d_sombra, 0, x, y);
    }
}

// sombra e indicadores usuarios
var mihashtag = mipropio.elhashtagmin;
with o_usuario {
    if visible {
        draw_sprite(d_sombra, 0, x, y);
        if enfermito {
            draw_sprite(d_sombra, 16, x, y);
        }
        else if salud == 1 {
            draw_sprite_ext(d_sombra, 16, x, y, 1, 1, 0, c_black, 1);
        }
        if propietario {
            draw_sprite(d_sombra, 1, x, y);
            if en_mira != noone {
                var ddd = point_direction(x, y, en_mira.x, en_mira.y);
                draw_sprite_ext(d_sombra, 3, x, y, 1, 1, ddd, c_white, 1);
            }
            if o_control.tutorial != 0 {
                var ddd;
                if o_control.tutorial == 2 { // registro
                    ddd = point_direction(x, y, o_registro.x, o_registro.y);
                }
                else { // ropero
                    var aux = instance_nearest(o_registro.x, o_registro.y, o_estilo);
                    ddd = point_direction(x, y, aux.x, aux.y);
                }
                draw_sprite_ext(d_sombra, 3, x, y, 2, 2, ddd, c_red, 1);
            }
        }
        else if mihashtag != "" and elhashtagmin == mihashtag {
            draw_sprite(d_sombra, 2, x, y);
        }
    }
    // puntero laser
    if objeto == 113 {
        if propietario {
            draw_sprite(d_luz, 1, mouse_x, mouse_y);
        }
        else {
            draw_sprite(d_luz, 1, puntero_x, puntero_y);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

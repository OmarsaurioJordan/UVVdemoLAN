<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_game</parentName>
  <maskName>d_base_e</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
imge = 9;
idweb = s_idweb_loco(x, y);
fecha = 0;
reloj_sinc = -1;

fuerza_mutacion = 2; // 0-9 cambio azar en un gen
fuerza_recombinacion = 8; // 0-9 cantidad de genes al azar cambiados
densidad_alimento = 5; // 0-9 sera probabilidad de aparecer comida

for (var g = 0; g &lt; 6; g++) { // genes normalizados, para recepcion udp
    // 0: radio vision
    // 1: velocidad andar
    // 2: capacidad energia
    // 3: empatia familiar
    // 4: agresividad no familiar
    // 5: temporizador dormir
    gen[g] = random(1);
}
num_bichos_udp = 0;
num_bichos = 0;
num_genmax = 1;

activo = false;

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s_ini_md5_open("evolutivo" + string(idweb) + ".ini") {
    ini_open("evolutivo" + string(idweb) + ".ini");
    fecha = real(ini_read_string("config", "fecha", "0"));
    fuerza_mutacion = real(ini_read_string("evo", "fuerza_mutacion", "0"));
    fuerza_recombinacion = real(ini_read_string("evo", "fuerza_recombinacion", "0"));
    densidad_alimento = real(ini_read_string("evo", "densidad_alimento", "0"));
    num_bichos_udp = real(ini_read_string("evo", "num_bichos_udp", "0"));
    for (var g = 0; g &lt; 6; g++) {
        gen[g] = real(ini_read_string("evo", "g" + string(g), "0"));
    }
    var aux;
    var n = 0;
    while ini_key_exists("bichos", "x" + string(n)) {
        aux = instance_create(real(ini_read_string("bichos", "x" + string(n), "0")),
            real(ini_read_string("bichos", "y" + string(n), "0")), o_bicho);
        aux.mx = real(ini_read_string("bichos", "mx" + string(n), "0"));
        aux.my = real(ini_read_string("bichos", "my" + string(n), "0"));
        for (var g = 0; g &lt; 6; g++) {
            aux.gen[g] = real(ini_read_string("bichos", "g" + string(n) + "_" + string(g), "0"));
        }
        aux.energia = real(ini_read_string("bichos", "e" + string(n), "0"));
        aux.generacion = real(ini_read_string("bichos", "gt" + string(n), "1"));
        aux.edad = real(ini_read_string("bichos", "es" + string(n), "0"));
        aux.hijos = real(ini_read_string("bichos", "ht" + string(n), "0"));
        s_fenotipo(aux);
        n++;
    }
    with o_bicho {
        if mx != 0 or my != 0 {
            aux = id;
            with o_bicho {
                if id != aux and x == aux.mx and y == aux.my {
                    aux.madre = id;
                }
            }
        }
        mx = x; my = y;
    }
    n = 0;
    while ini_key_exists("alimento", "x" + string(n)) {
        aux = instance_create(real(ini_read_string("alimento", "x" + string(n), "0")),
            real(ini_read_string("alimento", "y" + string(n), "0")), o_alimento);
        aux.energia = real(ini_read_string("alimento", "e" + string(n), "0"));
        n++;
    }
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sincronia

if !m_editor {
    if s_ciclo_actualizador(id) {
        var buf = s_header(34, 11 + 6);
        buffer_write(buf, buffer_u16, idweb);
        buffer_write(buf, buffer_u32, fecha);
        buffer_write(buf, buffer_u8, fuerza_mutacion);
        buffer_write(buf, buffer_u8, fuerza_recombinacion);
        buffer_write(buf, buffer_u8, densidad_alimento);
        // encontrar genes promedio de la poblacion, y talla de esta
        var ggg;
        for (var g = 0; g &lt; 6; g++) {
            ggg[g] = 0;
        }
        var tot = 0;
        with o_bicho {
            for (var g = 0; g &lt; 6; g++) {
                ggg[g] += gen[g];
            }
            tot++;
        }
        if tot &gt; 1 {
            for (var g = 0; g &lt; 6; g++) {
                ggg[g] /= tot;
            }
        }
        buffer_write(buf, buffer_u16, tot);
        for (var g = 0; g &lt; 6; g++) {
            buffer_write(buf, buffer_u8, round(ggg[g] * 255));
        }
        s_udp_send(buf, "");
    }
    
    // reloj aleatorio para modificar cosas
    var man = o_control.mipropio;
    activo = point_distance(x, y, man.x, man.y) &lt; view_wview[0] * 2;
    if activo and random(1) &lt; 0.1 {
        // crear bicho inicial
        if random(1) &lt; 0.01 and !instance_exists(o_bicho) {
            s_pobla_bichos(id, true);
        }
        // crear alimento
        if random(1) &lt; lerp(0.05, 0.4, densidad_alimento / 9) and
                instance_number(o_alimento) &lt; 50 {
            s_pobla_bichos(id, false);
        }
        // estadisticas
        num_bichos = 0;
        num_genmax = 1;
        var yop = id;
        with o_bicho {
            yop.num_genmax = max(yop.num_genmax, generacion);
            yop.num_bichos++;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("evolutivo" + string(idweb) + ".ini");
ini_write_string("config", "idweb", string(idweb)); // inutil
ini_write_string("config", "fecha", string(fecha));
ini_write_string("evo", "fuerza_mutacion", string(fuerza_mutacion));
ini_write_string("evo", "fuerza_recombinacion", string(fuerza_recombinacion));
ini_write_string("evo", "densidad_alimento", string(densidad_alimento));
ini_write_string("evo", "num_bichos_udp", string(num_bichos_udp));
for (var g = 0; g &lt; 6; g++) {
    ini_write_string("evo", "g" + string(g), string(gen[g]));
}
if ini_section_exists("bichos") {
    ini_section_delete("bichos");
}
var n = 0;
with o_bicho {
    ini_write_string("bichos", "x" + string(n), string(x));
    ini_write_string("bichos", "y" + string(n), string(y));
    if madre != noone {
        if instance_exists(madre) {
            ini_write_string("bichos", "mx" + string(n), string(madre.x));
            ini_write_string("bichos", "my" + string(n), string(madre.y));
        }
        else {
            ini_write_string("bichos", "mx" + string(n), "0");
            ini_write_string("bichos", "my" + string(n), "0");
        }
    }
    else {
        ini_write_string("bichos", "mx" + string(n), "0");
        ini_write_string("bichos", "my" + string(n), "0");
    }
    for (var g = 0; g &lt; 6; g++) {
        ini_write_string("bichos", "g" + string(n) + "_" + string(g), string(gen[g]));
    }
    ini_write_string("bichos", "e" + string(n), string(energia));
    ini_write_string("bichos", "gt" + string(n), string(generacion));
    ini_write_string("bichos", "es" + string(n), string(edad));
    ini_write_string("bichos", "ht" + string(n), string(hijos));
    n++;
}
if ini_section_exists("alimento") {
    ini_section_delete("alimento");
}
n = 0;
with o_alimento {
    ini_write_string("alimento", "x" + string(n), string(x));
    ini_write_string("alimento", "y" + string(n), string(y));
    ini_write_string("alimento", "e" + string(n), string(energia));
    n++;
}
ini_close();
s_ini_md5_close("evolutivo" + string(idweb) + ".ini");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_game, imge, x, y);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text_transformed_colour(x, y - 57, string(densidad_alimento),
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x + 18, y - 36, string(fuerza_mutacion),
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x + 18, y - 14, string(fuerza_recombinacion),
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x - 7, y - 33, string(num_bichos),
    0.7, 0.7, 0, c_black, c_black, c_black, c_black, 1);
draw_text_transformed_colour(x - 9, y - 14, string(num_genmax),
    0.7, 0.7, 0, c_black, c_black, c_black, c_black, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

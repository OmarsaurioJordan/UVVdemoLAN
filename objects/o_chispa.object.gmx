<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_visible</parentName>
  <maskName>d_base_u</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>polo = 0; // 0:neg, 1:pos
activo = true;
origen = noone; // id dispo que envia
mx = x; // lugar a ir
my = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if activo {
    if point_distance(x, y, mx, my) &lt; 8 {
        activo = false;
        var aux = collision_point(mx, my, o_dispo, true, false);
        if aux != noone {
            var n = -1;
            for (var i = 0; i &lt; 3; i++) {
                if aux.vecino[i] == origen {
                    n = i;
                    break;
                }
            }
            if n != -1 {
                switch aux.tipo {
                    case 14: // cable
                        if n == 0 {
                            var yop = id;
                            with aux {
                                if s_existe(vecino[1]) {
                                    var ch = s_busca_chispa();
                                    ch.x = yop.x; ch.y = yop.y;
                                    ch.mx = vecino[1].x;
                                    ch.my = vecino[1].y;
                                    ch.origen = id;
                                    ch.polo = yop.polo;
                                }
                                if s_existe(vecino[2]) {
                                    var ch = s_busca_chispa();
                                    ch.x = yop.x; ch.y = yop.y;
                                    ch.mx = vecino[2].x;
                                    ch.my = vecino[2].y;
                                    ch.origen = id;
                                    ch.polo = yop.polo;
                                }
                            }
                        }
                        break;
                    case 11: case 12: case 13: case 10: // opera
                        aux.entrada[n] = polo;
                        break;
                    case 0: case 1: // out
                        if n == 0 {
                            aux.salida = polo;
                            if aux.tipo == 1 and polo != 0 {
                                var nn = noone;
                                switch aux.valor {
                                    case 0: nn = a_tono_do; break;
                                    case 1: nn = a_tono_re; break;
                                    case 2: nn = a_tono_mi; break;
                                    case 3: nn = a_tono_fa; break;
                                    case 4: nn = a_tono_sol; break;
                                    case 5: nn = a_tono_la; break;
                                    case 6: nn = a_tono_si; break;
                                }
                                s_buzzer_nota(aux.x, aux.y, nn, false);
                            }
                        }
                        break;
                    case 2: // mem
                        aux.entrada[n] = polo;
                        break;
                    case 3: // delay
                        if n == 0 {
                            aux.delay[0] = polo;
                        }
                        break;
                }
            }
        }
    }
    else {
        direction = point_direction(x, y, mx, my);
        var vv = o_control.vel_chispa * dlt;
        x += lengthdir_x(vv, direction);
        y += lengthdir_y(vv, direction);
        depth = -y;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if activo {
    if polo == 0 {
        draw_sprite_ext(d_piezas, 9, x, y - 44, 1, 1, 0, c_black, 1);
    }
    else {
        draw_sprite(d_piezas, 9, x, y - 44);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

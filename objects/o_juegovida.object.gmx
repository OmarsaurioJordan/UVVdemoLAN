<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_game</parentName>
  <maskName>d_base_e</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
imge = 6;
idweb = s_idweb_loco(x, y);
fecha = 0;
reloj_sinc = -1;

var tllx = 22; // lado del cuadro
var tlly = 16;
est_nex = ds_grid_create(tllx, tlly);
ds_grid_clear(est_nex, 0);
reloj_max = 1.5; // 0: quieto
regla[0] = "23"; // continuidad
regla[1] = "3"; // nacimiento

reloj_cambio = 0; // no sincronizable
gusanos = ds_grid_create(tllx, tlly);
ds_grid_clear(gusanos, 0);
var aux;
var cc = o_control.juegovida_celda;
for (var w = 0; w &lt; tllx; w++) {
    for (var h = 0; h &lt; tlly; h++) {
        aux = instance_create(x - ((tllx / 2) * cc) + w * cc - 20,
                y + 24 + h * cc, o_gusano);
        aux.origen = id;
        aux.mx = w;
        aux.my = h;
        // iniciar al azar
        if random(1) &lt; 0.5 {
            ds_grid_set(est_nex, w, h, 1);
        }
    }
}
est_act = ds_grid_create(tllx, tlly);
saliente = ds_grid_create(tllx, tlly); // envia datos web
entrante = ds_grid_create(tllx, tlly); // recibe datos web
ds_grid_clear(est_act, 0);
ds_grid_clear(entrante, 0);
ds_grid_clear(saliente, 0);

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s_ini_md5_open("juegovida" + string(idweb) + ".ini") {
    ini_open("juegovida" + string(idweb) + ".ini");
    fecha = real(ini_read_string("config", "fecha", "0"));
    ds_grid_read(est_nex, ini_read_string("juego", "est_nex", ""));
    ds_grid_read(entrante, ini_read_string("juego", "entrante", ""));
    reloj_max = real(ini_read_string("juego", "reloj_max", "1"));
    regla[0] = ini_read_string("juego", "r0", "23");
    regla[1] = ini_read_string("juego", "r1", "3");
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sincronia

if !m_editor {
    if s_ciclo_actualizador(id) {
        var ww = ds_grid_width(est_nex);
        var hh = ds_grid_height(est_nex);
        var buf = s_header(22, 6 + ww * hh);
        buffer_write(buf, buffer_u16, idweb);
        buffer_write(buf, buffer_u32, fecha);
        buffer_write(buf, buffer_string, regla[0]);
        buffer_write(buf, buffer_string, regla[1]);
        for (var w = 0; w &lt; ww; w++) {
            for (var h = 0; h &lt; hh; h++) {
                buffer_write(buf, buffer_u8, ds_grid_get(saliente, w, h));
            }
        }
        s_udp_send(buf, "");
    }
    
    // funcionamiento juego de la vida
    if reloj_max != 0 {
        reloj_cambio -= dlt;
        if reloj_cambio &lt;= 0 {
            reloj_cambio = reloj_max;
            // ejecucion
            var sum;
            ds_grid_copy(est_act, est_nex);
            var ww = ds_grid_width(est_nex);
            var hh = ds_grid_height(est_nex);
            for (var w = 0; w &lt; ww; w++) {
                for (var h = 0; h &lt; hh; h++) {
                    sum = ds_grid_get_sum(est_act, max(0, w - 1), max(0, h - 1),
                        min(ww - 1, w + 1), min(hh - 1, h + 1));
                    if ds_grid_get(est_act, w, h) != 0 { // viva
                        sum--;
                        if string_count(string(sum), regla[0]) != 0 {
                            ds_grid_set(est_nex, w, h, 1);
                        }
                        else {
                            ds_grid_set(est_nex, w, h, 0);
                        }
                    }
                    else { // muerta
                        if string_count(string(sum), regla[1]) != 0 {
                            ds_grid_set(est_nex, w, h, 1);
                        }
                        else {
                            ds_grid_set(est_nex, w, h, 0);
                        }
                    }
                }
            }
        }
        // optimizacion
        var ok = false;
        var yop = id;
        with o_gusano {
            if visible and origen == yop {
                ok = true;
                break;
            }
        }
        if !ok {
            exit;
        }
        // dibujado
        var ww = ds_grid_width(est_nex);
        var hh = ds_grid_height(est_nex);
        var act, nex;
        for (var w = 0; w &lt; ww; w++) {
            for (var h = 0; h &lt; hh; h++) {
                act = ds_grid_get(est_act, w, h);
                nex = ds_grid_get(est_nex, w, h);
                if act == 0 {
                    if nex == 0 { // 00
                        ds_grid_set(gusanos, w, h, 0);
                    }
                    else { // 01
                        ds_grid_set(gusanos, w, h,
                            clamp(1 - reloj_cambio / reloj_max, 0, 1));
                    }
                }
                else {
                    if nex == 0 { // 10
                        ds_grid_set(gusanos, w, h,
                            clamp(reloj_cambio / reloj_max, 0, 1));
                    }
                    else { // 11
                        ds_grid_set(gusanos, w, h, 1);
                    }
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("juegovida" + string(idweb) + ".ini");
ini_write_string("config", "idweb", string(idweb)); // inutil
ini_write_string("config", "fecha", string(fecha));
ini_write_string("juego", "est_nex", ds_grid_write(est_nex));
ini_write_string("juego", "entrante", ds_grid_write(entrante));
ini_write_string("juego", "reloj_max", string(reloj_max));
ini_write_string("juego", "r0", regla[0]);
ini_write_string("juego", "r1", regla[1]);
ini_close();
s_ini_md5_close("juegovida" + string(idweb) + ".ini");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_game, imge, x, y);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text_transformed_colour(x + 20, y - 40,
    string(round(ds_grid_get_sum(est_nex, 0, 0,
    ds_grid_width(est_nex) - 1, ds_grid_height(est_nex) - 1))),
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_movil</parentName>
  <maskName>d_base_u</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>idweb = irandom_range(1, 65535);
fecha = irandom(100);
reloj_sinc = -1;
fechamove = irandom(100);

tipok = irandom_range(1, sprite_get_number(d_kreature) / 4 - 1);
posx = x; // lugar actual fisico, mientras x,y dibujado
posy = y;
metax = x; // lugar a donde ir
metay = y;
// relojes para esperar o re calcular rutas (fechas futuras)
reloj_quiet = s_current_time();
reloj_move = reloj_quiet + 1;

viemetx = x; // metas viejas, para recalcular ruta
viemety = y;

// rejilla de navegacion
var cel = o_control.nav_celda;
var wmax = ceil(room_width / cel);
var hmax = ceil(room_height / cel);
rumbo = ds_grid_create(wmax, hmax);

// animacion
s_anima_ini(id, 3, true, false);

// evitar fallos
estaonline = false;
reloj_udp = 0;

alarm[0] = 1;
alarm[1] = room_speed * 30;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// fijar fecha para tipo
if fecha &lt;= 100 {
    fecha = s_current_time();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s_ini_md5_open("kreature" + string(idweb) + ".ini") {
    ini_open("kreature" + string(idweb) + ".ini");
    fecha = real(ini_read_string("config", "fecha", "0"));
    fechamove = real(ini_read_string("config", "fechamove", "0"));
    tipok = real(ini_read_string("genes", "tipok", "0"));
    posx = real(ini_read_string("genes", "posx", "0"));
    posy = real(ini_read_string("genes", "posy", "0"));
    metax = real(ini_read_string("genes", "metax", "0"));
    metay = real(ini_read_string("genes", "metay", "0"));
    reloj_quiet = real(ini_read_string("genes", "reloj_quiet", "0"));
    reloj_move = real(ini_read_string("genes", "reloj_move", "0"));
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IA

// animacion
s_anima_osc(id, 0, 1.1, 2); // cuerpo
s_anima_osc(id, 1, 0.81, 1); // cabeza
s_anima_osc(id, 2, 0.69, 2); // objeto

if !m_editor {
    if s_ciclo_actualizador(id) {
        var buf = s_header(54, 7);
        buffer_write(buf, buffer_u16, idweb);
        buffer_write(buf, buffer_u32, fecha);
        buffer_write(buf, buffer_u8, tipok);
        s_udp_send(buf, "");
    }
}

if s_permiso_pro() {
    
    // verificar exista mascota uv
    if random(1) &lt; 0.001 {
        if tipok == 0 {
            var yop = id;
            with o_kreature {
                if id != yop and tipok == 0 {
                    yop.tipok = irandom_range(1, sprite_get_number(d_kreature) / 4 - 1);
                    yop.fecha = s_current_time();
                    yop.reloj_sinc = 0;
                    break;
                }
            }
        }
        else {
            var ok = true;
            with o_kreature {
                if tipok == 0 {
                    ok = false;
                    break;
                }
            }
            if ok {
                tipok = 0;
                fecha = s_current_time();
                reloj_sinc = 0;
            }
        }
    }
    
    // rebote
    var impasable = false;
    var otr = instance_place(posx, posy, o_bloque);
    if otr == noone {
        otr = instance_place(posx, posy, o_tiro_pesado);
        if otr != noone {
            if otr.altura &gt; 82 {
                otr = noone;
            }
            else {
                impasable = true;
            }
        }
        if otr == noone {
            otr = collision_circle(posx, posy, 12, o_movil, true, true); // base_u(8) + 4 px
        }
    }
    else {
        var elparent = object_get_parent(otr.object_index);
        if elparent != o_especial and elparent != o_game {
            impasable = true;
        }
    }
    if otr != noone {
        direction = point_direction(otr.x, otr.y, posx, posy);
        var vel;
        if impasable {
            vel = o_control.velocidad * dlt * 1.25;
        }
        else {
            vel = o_control.velocidad * dlt;
        }
        posx += lengthdir_x(vel, direction);
        posy += lengthdir_y(vel, direction);
    }
    
    // relojes
    var move = reloj_move &lt; reloj_quiet;
    if move {
        if point_distance(posx, posy, metax, metay) &lt; 24 {
            reloj_move = 0;
        }
        if reloj_move &lt; s_current_time() {
            var aux, pnt;
            switch s_salvajismo(id) {
                case 0: // salvaje
                    pnt = o_pnt_floral;
                    break;
                case 2: // humanoide
                    pnt = o_pnt_techo;
                    break;
                default: // domestico
                    pnt = o_pnt;
                    break;
            }
            do {
                metax = irandom(room_width);
                metay = irandom(room_height);
                aux = instance_nearest(metax, metay, pnt);
                if point_distance(metax, metay, aux.x, aux.y) &gt; o_control.radio_zona {
                    metax = 0;
                    continue;
                }
                var cel = o_control.nav_celda;
                if ds_grid_get(o_control.zona, round(metax / cel), round(metay / cel)) == -1 {
                    metax = 0;
                }
            }
            until metax != 0;
            reloj_quiet = s_current_time() + irandom_range(
                o_control.quieto_min, o_control.quieto_max);
            reloj_move = reloj_quiet + 30 +
                round(point_distance(posx, posy, metax, metay) / 10);
            fechamove = s_current_time() - irandom(100);
        }
    }
    else {
        if reloj_quiet &lt; s_current_time() {
            reloj_quiet = reloj_move + 1;
        }
    }
    
    // ejecutar movimiento
    if move and !impasable {
        var vel = o_control.velocidad * dlt * 0.5;
        if s_enagua(posx, posy) {
            vel *= 0.75;
        }
        var cel = o_control.nav_celda;
        var wmax = ceil(room_width / cel);
        var hmax = ceil(room_height / cel);
        var ww = round(posx / cel);
        var hh = round(posy / cel);
        var menor = ds_grid_get_min(rumbo, max(0, ww - 1), max(0, hh - 1),
            min(wmax - 1, ww + 1), min(hmax - 1, hh + 1));
        if menor != 1000000 {
            var xx = ds_grid_value_x(rumbo, max(0, ww - 1), max(0, hh - 1),
                min(wmax - 1, ww + 1), min(hmax - 1, hh + 1), menor);
            var yy = ds_grid_value_y(rumbo, max(0, ww - 1), max(0, hh - 1),
                min(wmax - 1, ww + 1), min(hmax - 1, hh + 1), menor);
            direction = point_direction(ww, hh, xx, yy);
        }
        else {
            direction = random(360);
        }
        posx += lengthdir_x(vel, direction);
        posy += lengthdir_y(vel, direction);
        // hacer colision lejana para evitar estancarse
        otr = collision_circle(posx, posy, 16, o_bloque, true, false);
        if otr != noone {
            direction = point_direction(otr.x, otr.y, posx, posy);
            posx += lengthdir_x(vel * 0.8, direction);
            posy += lengthdir_y(vel * 0.8, direction);
        }
    }
    
    // limites
    posx = clamp(posx, 0, room_width);
    posy = clamp(posy, 0, room_height);
    
    // recalcular camino
    if metax != viemetx or metay != viemety {
        if metax != 0 and metay != 0 {
            s_calcula_rejilla_pro(metax, metay, rumbo);
        }
        viemetx = metax;
        viemety = metay;
    }
}

// ejecucion general
//
// sincronizacion posicion
var vel = point_distance(x, y, posx, posy);
if vel &gt; 100 {
    x = posx;
    y = posy;
}
else if vel &gt; 4 {
    vel *= dlt * 2;
    direction = point_direction(x, y, posx, posy);
    x += lengthdir_x(vel, direction);
    y += lengthdir_y(vel, direction);
}
// sonido
if random(1) &lt; 0.001 {
    switch tipok {
        case 1: s_audio(x, y, a_perro, false); break;
        case 2: s_audio(x, y, a_gato, false); break;
        case 3: s_audio(x, y, a_vaca, false); break;
    }
}

// animacion
s_anima_paso(id, 0.2, 6); // pies
depth = -y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("kreature" + string(idweb) + ".ini");
ini_write_string("config", "idweb", string(idweb)); // inutil
ini_write_string("config", "fecha", string(fecha));
ini_write_string("config", "fechamove", string(fechamove));
ini_write_string("genes", "tipok", string(tipok));
ini_write_string("genes", "posx", string(posx));
ini_write_string("genes", "posy", string(posy));
ini_write_string("genes", "metax", string(metax));
ini_write_string("genes", "metay", string(metay));
ini_write_string("genes", "reloj_quiet", string(reloj_quiet));
ini_write_string("genes", "reloj_move", string(reloj_move));
ini_close();
s_ini_md5_close("kreature" + string(idweb) + ".ini");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dsf = -4;
// pies
if reloj_pies == 0 {
    draw_sprite(d_kreature, 2 + tipok * 4, x, y);
    draw_sprite(d_kreature, 3 + tipok * 4, x, y);
}
else {
    var pai, pad;
    switch paso {
        case 1: pai = 0; pad = 6; break;
        case 2: pai = 2; pad = 4; break;
        case 3: pai = 4; pad = 2; break;
        case 4: pai = 6; pad = 0; break;
        case 5: pai = 4; pad = 2; break;
        case 0: pai = 2; pad = 4; break;
    }
    draw_sprite(d_kreature, 2 + tipok * 4, x, y - pai);
    draw_sprite(d_kreature, 3 + tipok * 4, x, y - pad);
}
// cuerpo
draw_sprite(d_kreature, 1 + tipok * 4, x, y + anima[0] + dsf);
// cabeza
draw_sprite(d_kreature, tipok * 4, x, y + anima[0] + anima[1] + dsf);
// objetos especiales
switch tipok {
    case 11:
        draw_sprite(d_objeto, 2, x, y + anima[0] + anima[2] + dsf);
        break;
    case 15:
        draw_sprite(d_objeto, 3, x, y + anima[0] + anima[2] + dsf);
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_game</parentName>
  <maskName>d_base_e</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
imge = 13;
idweb = s_idweb_loco(x, y);
fecha = 0;
reloj_sinc = -1;

mute = 0; // si funcionando, sincronizable
tipo = 0; // en mira para poner
nodos = 0; // total dispos

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s_ini_md5_open("digital" + string(idweb) + ".ini") {
    ini_open("digital" + string(idweb) + ".ini");
    fecha = real(ini_read_string("config", "fecha", "0"));
    mute = real(ini_read_string("config", "mute", "0"));
    var n = 0;
    var xx, yy, aux;
    var yop = id;
    with o_dispo {
        if origen == yop {
            instance_destroy();
        }
    }
    while ini_section_exists("dispo" + string(n)) {
        xx = real(ini_read_string("dispo" + string(n), "x", "0"));
        yy = real(ini_read_string("dispo" + string(n), "y", "0"));
        aux = instance_create(xx, yy, o_dispo);
        aux.name = real(ini_read_string("dispo" + string(n), "n", "255"));
        aux.tipo = real(ini_read_string("dispo" + string(n), "t", "0"));
        aux.valor = real(ini_read_string("dispo" + string(n), "v", "0"));
        for (var i = 0; i &lt; 3; i++) {
            aux.vecina[i] = real(ini_read_string("dispo" + string(n),
                "c" + string(i), "255"));
        }
        aux.origen = id;
        n++;
    }
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sincronia

if !m_editor {
    if s_ciclo_actualizador(id) {
        var tot = 0;
        var yop = id;
        with o_dispo {
            if origen == yop {
                tot++;
            }
        }
        var buf = s_header(27, 8 + 10 * tot);
        buffer_write(buf, buffer_u16, idweb);
        buffer_write(buf, buffer_u32, fecha);
        buffer_write(buf, buffer_u8, mute);
        buffer_write(buf, buffer_u8, tot);
        with o_dispo {
            if origen == yop {
                buffer_write(buf, buffer_u16, x);
                buffer_write(buf, buffer_u16, y);
                buffer_write(buf, buffer_u8, name);
                buffer_write(buf, buffer_u8, tipo);
                buffer_write(buf, buffer_u8, valor);
                for (var i = 0; i &lt; 3; i++) {
                    buffer_write(buf, buffer_u8, vecina[i]);
                }
            }
        }
        s_udp_send(buf, "");
    }
    
    // funcionamiento
    if mute == 0 and random(1) &lt; 0.1 and visible {
        var ok = true;
        with o_chispa {
            if activo {
                ok = false;
                break;
            }
        }
        if !ok {
            exit;
        }
        var yop = id;
        with o_dispo {
            if origen == yop {
                for (var i = 0; i &lt; 3; i++) {
                    if entrada[i] == -1 {
                        entrada[i] = irandom(1);
                    }
                }
                if delay[0] == -1 {
                    delay[0] = irandom(1);
                }
                switch tipo {
                    case 2: // mem
                        if entrada[1] == 1 {
                            memoria = entrada[0];
                        }
                        if s_existe(vecino[2]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[2].x;
                            ch.my = vecino[2].y;
                            ch.origen = id;
                            ch.polo = memoria;
                        }
                        break;
                    case 3: // delay
                        if s_existe(vecino[1]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[1].x;
                            ch.my = vecino[1].y;
                            ch.origen = id;
                            ch.polo = delay[valor];
                        }
                        break;
                    case 4: // azar
                        if s_existe(vecino[0]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[0].x;
                            ch.my = vecino[0].y;
                            ch.origen = id;
                            if irandom(valor) == 0 {
                                ante_azar = irandom(1);
                            }
                            ch.polo = ante_azar;
                        }
                        break;
                    case 5: // sensor
                        if s_existe(vecino[0]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[0].x;
                            ch.my = vecino[0].y;
                            ch.origen = id;
                            if collision_circle(x, y, (250 / 7) * (valor + 1),
                                    o_movil, true, false) {
                                ch.polo = 1;
                            }
                            else {
                                ch.polo = 0;
                            }
                        }
                        break;
                    case 6: // boton
                        if s_existe(vecino[0]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[0].x;
                            ch.my = vecino[0].y;
                            ch.origen = id;
                            ch.polo = 0;
                            if valor == 0 and keyboard_check(ord('Z')) { ch.polo = 1; }
                            else if valor == 1 and keyboard_check(ord('X')) { ch.polo = 1; }
                            else if valor == 2 and keyboard_check(ord('C')) { ch.polo = 1; }
                            else if valor == 3 and keyboard_check(ord('V')) { ch.polo = 1; }
                            else if valor == 4 and keyboard_check(ord('B')) { ch.polo = 1; }
                            else if valor == 5 and keyboard_check(ord('N')) { ch.polo = 1; }
                            else if valor == 6 and keyboard_check(ord('M')) { ch.polo = 1; }
                        }
                        break;
                    case 7: // oscila
                        if s_existe(vecino[0]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[0].x;
                            ch.my = vecino[0].y;
                            ch.origen = id;
                            var t = (valor + 1) * 2;
                            if tiempo &lt; t / 2 {
                                ch.polo = 0;
                            }
                            else {
                                ch.polo = 1;
                            }
                            tiempo++;
                            if tiempo &gt;= t {
                                tiempo = 0;
                            }
                        }
                        break;
                    case 8: // true
                        if s_existe(vecino[0]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[0].x;
                            ch.my = vecino[0].y;
                            ch.origen = id;
                            ch.polo = 1;
                        }
                        break;
                    case 9: // false
                        if s_existe(vecino[0]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[0].x;
                            ch.my = vecino[0].y;
                            ch.origen = id;
                            ch.polo = 0;
                        }
                        break;
                    case 10: // not
                        if s_existe(vecino[1]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[1].x;
                            ch.my = vecino[1].y;
                            ch.origen = id;
                            if entrada[0] == 0 {
                                ch.polo = 1;
                            }
                            else {
                                ch.polo = 0;
                            }
                        }
                        break;
                    case 11: // or
                        if s_existe(vecino[2]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[2].x;
                            ch.my = vecino[2].y;
                            ch.origen = id;
                            if entrada[0] == 0 and entrada[1] == 0 {
                                ch.polo = 0;
                            }
                            else {
                                ch.polo = 1;
                            }
                        }
                        break;
                    case 12: // and
                        if s_existe(vecino[2]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[2].x;
                            ch.my = vecino[2].y;
                            ch.origen = id;
                            if entrada[0] == 1 and entrada[1] == 1 {
                                ch.polo = 1;
                            }
                            else {
                                ch.polo = 0;
                            }
                        }
                        break;
                    case 13: // xor
                        if s_existe(vecino[2]) {
                            var ch = s_busca_chispa();
                            ch.x = x; ch.y = y;
                            ch.mx = vecino[2].x;
                            ch.my = vecino[2].y;
                            ch.origen = id;
                            if entrada[0] != entrada[1] {
                                ch.polo = 1;
                            }
                            else {
                                ch.polo = 0;
                            }
                        }
                        break;
                }
                for (var i = 0; i &lt; 3; i++) {
                    entrada[i] = -1;
                }
                var dly;
                dly[0] = -1;
                for (var d = 0; d &lt; 6; d++) {
                    dly[d + 1] = delay[d];
                }
                delay = dly;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if file_exists("digital" + string(idweb) + ".ini") {
    file_delete("digital" + string(idweb) + ".ini");
}
ini_open("digital" + string(idweb) + ".ini");
ini_write_string("config", "idweb", string(idweb)); // inutil
ini_write_string("config", "fecha", string(fecha));
ini_write_string("config", "mute", string(mute));
var n = 0;
var yop = id;
with o_dispo {
    if origen == yop {
        ini_write_string("dispo" + string(n), "x", string(x));
        ini_write_string("dispo" + string(n), "y", string(y));
        ini_write_string("dispo" + string(n), "n", string(name));
        ini_write_string("dispo" + string(n), "t", string(tipo));
        ini_write_string("dispo" + string(n), "v", string(valor));
        for (var i = 0; i &lt; 3; i++) {
            ini_write_string("dispo" + string(n), "c" + string(i), string(vecina[i]));
        }
        n++;
    }
}
ini_close();
s_ini_md5_close("digital" + string(idweb) + ".ini");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_game, imge, x, y);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text_transformed_colour(x - 21, y - 57, nodos,
    0.8, 0.8, 0, c_black, c_black, c_black, c_black, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
